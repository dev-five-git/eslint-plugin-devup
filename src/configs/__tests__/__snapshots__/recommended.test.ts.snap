// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`recommended > export recommended config 1`] = `
[
  {
    "ignores": [
      "**/node_modules/",
      "**/build/",
      "**/__snapshots__/",
      "!**/src/**",
      "!vite.config.ts",
      "!**/.storybook/**",
      "**/storybook-static/",
      "**/dist/",
      "**/next-env.d.ts",
      "**/out/",
      "**/.next/",
      "**/public/",
      "**/.df/",
    ],
  },
  {
    "languageOptions": {
      "parserOptions": {
        "ecmaFeatures": {
          "jsx": true,
        },
      },
    },
    "plugins": {
      "react": {
        "configs": {
          "all": {
            "parserOptions": {
              "ecmaFeatures": {
                "jsx": true,
              },
            },
            "plugins": [
              "react",
            ],
            "rules": {
              "react/boolean-prop-naming": 2,
              "react/button-has-type": 2,
              "react/checked-requires-onchange-or-readonly": 2,
              "react/default-props-match-prop-types": 2,
              "react/destructuring-assignment": 2,
              "react/display-name": 2,
              "react/forbid-component-props": 2,
              "react/forbid-dom-props": 2,
              "react/forbid-elements": 2,
              "react/forbid-foreign-prop-types": 2,
              "react/forbid-prop-types": 2,
              "react/forward-ref-uses-ref": 2,
              "react/function-component-definition": 2,
              "react/hook-use-state": 2,
              "react/iframe-missing-sandbox": 2,
              "react/jsx-boolean-value": 2,
              "react/jsx-child-element-spacing": 2,
              "react/jsx-closing-bracket-location": 2,
              "react/jsx-closing-tag-location": 2,
              "react/jsx-curly-brace-presence": 2,
              "react/jsx-curly-newline": 2,
              "react/jsx-curly-spacing": 2,
              "react/jsx-equals-spacing": 2,
              "react/jsx-filename-extension": 2,
              "react/jsx-first-prop-new-line": 2,
              "react/jsx-fragments": 2,
              "react/jsx-handler-names": 2,
              "react/jsx-indent": 2,
              "react/jsx-indent-props": 2,
              "react/jsx-key": 2,
              "react/jsx-max-depth": 2,
              "react/jsx-max-props-per-line": 2,
              "react/jsx-newline": 2,
              "react/jsx-no-bind": 2,
              "react/jsx-no-comment-textnodes": 2,
              "react/jsx-no-constructed-context-values": 2,
              "react/jsx-no-duplicate-props": 2,
              "react/jsx-no-leaked-render": 2,
              "react/jsx-no-literals": 2,
              "react/jsx-no-script-url": 2,
              "react/jsx-no-target-blank": 2,
              "react/jsx-no-undef": 2,
              "react/jsx-no-useless-fragment": 2,
              "react/jsx-one-expression-per-line": 2,
              "react/jsx-pascal-case": 2,
              "react/jsx-props-no-multi-spaces": 2,
              "react/jsx-props-no-spread-multi": 2,
              "react/jsx-props-no-spreading": 2,
              "react/jsx-sort-props": 2,
              "react/jsx-tag-spacing": 2,
              "react/jsx-uses-react": 2,
              "react/jsx-uses-vars": 2,
              "react/jsx-wrap-multilines": 2,
              "react/no-access-state-in-setstate": 2,
              "react/no-adjacent-inline-elements": 2,
              "react/no-array-index-key": 2,
              "react/no-arrow-function-lifecycle": 2,
              "react/no-children-prop": 2,
              "react/no-danger": 2,
              "react/no-danger-with-children": 2,
              "react/no-deprecated": 2,
              "react/no-did-mount-set-state": 2,
              "react/no-did-update-set-state": 2,
              "react/no-direct-mutation-state": 2,
              "react/no-find-dom-node": 2,
              "react/no-invalid-html-attribute": 2,
              "react/no-is-mounted": 2,
              "react/no-multi-comp": 2,
              "react/no-namespace": 2,
              "react/no-object-type-as-default-prop": 2,
              "react/no-redundant-should-component-update": 2,
              "react/no-render-return-value": 2,
              "react/no-set-state": 2,
              "react/no-string-refs": 2,
              "react/no-this-in-sfc": 2,
              "react/no-typos": 2,
              "react/no-unescaped-entities": 2,
              "react/no-unknown-property": 2,
              "react/no-unsafe": 2,
              "react/no-unstable-nested-components": 2,
              "react/no-unused-class-component-methods": 2,
              "react/no-unused-prop-types": 2,
              "react/no-unused-state": 2,
              "react/no-will-update-set-state": 2,
              "react/prefer-es6-class": 2,
              "react/prefer-exact-props": 2,
              "react/prefer-read-only-props": 2,
              "react/prefer-stateless-function": 2,
              "react/prop-types": 2,
              "react/react-in-jsx-scope": 2,
              "react/require-default-props": 2,
              "react/require-optimization": 2,
              "react/require-render-return": 2,
              "react/self-closing-comp": 2,
              "react/sort-comp": 2,
              "react/sort-default-props": 2,
              "react/sort-prop-types": 2,
              "react/state-in-constructor": 2,
              "react/static-property-placement": 2,
              "react/style-prop-object": 2,
              "react/void-dom-elements-no-children": 2,
            },
          },
          "flat": {
            "all": {
              "languageOptions": {
                "parserOptions": {
                  "ecmaFeatures": {
                    "jsx": true,
                  },
                },
              },
              "plugins": {
                "react": [Circular],
              },
              "rules": {
                "react/boolean-prop-naming": 2,
                "react/button-has-type": 2,
                "react/checked-requires-onchange-or-readonly": 2,
                "react/default-props-match-prop-types": 2,
                "react/destructuring-assignment": 2,
                "react/display-name": 2,
                "react/forbid-component-props": 2,
                "react/forbid-dom-props": 2,
                "react/forbid-elements": 2,
                "react/forbid-foreign-prop-types": 2,
                "react/forbid-prop-types": 2,
                "react/forward-ref-uses-ref": 2,
                "react/function-component-definition": 2,
                "react/hook-use-state": 2,
                "react/iframe-missing-sandbox": 2,
                "react/jsx-boolean-value": 2,
                "react/jsx-child-element-spacing": 2,
                "react/jsx-closing-bracket-location": 2,
                "react/jsx-closing-tag-location": 2,
                "react/jsx-curly-brace-presence": 2,
                "react/jsx-curly-newline": 2,
                "react/jsx-curly-spacing": 2,
                "react/jsx-equals-spacing": 2,
                "react/jsx-filename-extension": 2,
                "react/jsx-first-prop-new-line": 2,
                "react/jsx-fragments": 2,
                "react/jsx-handler-names": 2,
                "react/jsx-indent": 2,
                "react/jsx-indent-props": 2,
                "react/jsx-key": 2,
                "react/jsx-max-depth": 2,
                "react/jsx-max-props-per-line": 2,
                "react/jsx-newline": 2,
                "react/jsx-no-bind": 2,
                "react/jsx-no-comment-textnodes": 2,
                "react/jsx-no-constructed-context-values": 2,
                "react/jsx-no-duplicate-props": 2,
                "react/jsx-no-leaked-render": 2,
                "react/jsx-no-literals": 2,
                "react/jsx-no-script-url": 2,
                "react/jsx-no-target-blank": 2,
                "react/jsx-no-undef": 2,
                "react/jsx-no-useless-fragment": 2,
                "react/jsx-one-expression-per-line": 2,
                "react/jsx-pascal-case": 2,
                "react/jsx-props-no-multi-spaces": 2,
                "react/jsx-props-no-spread-multi": 2,
                "react/jsx-props-no-spreading": 2,
                "react/jsx-sort-props": 2,
                "react/jsx-tag-spacing": 2,
                "react/jsx-uses-react": 2,
                "react/jsx-uses-vars": 2,
                "react/jsx-wrap-multilines": 2,
                "react/no-access-state-in-setstate": 2,
                "react/no-adjacent-inline-elements": 2,
                "react/no-array-index-key": 2,
                "react/no-arrow-function-lifecycle": 2,
                "react/no-children-prop": 2,
                "react/no-danger": 2,
                "react/no-danger-with-children": 2,
                "react/no-deprecated": 2,
                "react/no-did-mount-set-state": 2,
                "react/no-did-update-set-state": 2,
                "react/no-direct-mutation-state": 2,
                "react/no-find-dom-node": 2,
                "react/no-invalid-html-attribute": 2,
                "react/no-is-mounted": 2,
                "react/no-multi-comp": 2,
                "react/no-namespace": 2,
                "react/no-object-type-as-default-prop": 2,
                "react/no-redundant-should-component-update": 2,
                "react/no-render-return-value": 2,
                "react/no-set-state": 2,
                "react/no-string-refs": 2,
                "react/no-this-in-sfc": 2,
                "react/no-typos": 2,
                "react/no-unescaped-entities": 2,
                "react/no-unknown-property": 2,
                "react/no-unsafe": 2,
                "react/no-unstable-nested-components": 2,
                "react/no-unused-class-component-methods": 2,
                "react/no-unused-prop-types": 2,
                "react/no-unused-state": 2,
                "react/no-will-update-set-state": 2,
                "react/prefer-es6-class": 2,
                "react/prefer-exact-props": 2,
                "react/prefer-read-only-props": 2,
                "react/prefer-stateless-function": 2,
                "react/prop-types": 2,
                "react/react-in-jsx-scope": 2,
                "react/require-default-props": 2,
                "react/require-optimization": 2,
                "react/require-render-return": 2,
                "react/self-closing-comp": 2,
                "react/sort-comp": 2,
                "react/sort-default-props": 2,
                "react/sort-prop-types": 2,
                "react/state-in-constructor": 2,
                "react/static-property-placement": 2,
                "react/style-prop-object": 2,
                "react/void-dom-elements-no-children": 2,
              },
            },
            "jsx-runtime": {
              "languageOptions": {
                "parserOptions": {
                  "ecmaFeatures": {
                    "jsx": true,
                  },
                  "jsxPragma": null,
                },
              },
              "plugins": {
                "react": [Circular],
              },
              "rules": {
                "react/jsx-uses-react": 0,
                "react/react-in-jsx-scope": 0,
              },
            },
            "recommended": [Circular],
          },
          "jsx-runtime": {
            "parserOptions": {
              "ecmaFeatures": {
                "jsx": true,
              },
              "jsxPragma": null,
            },
            "plugins": [
              "react",
            ],
            "rules": {
              "react/jsx-uses-react": 0,
              "react/react-in-jsx-scope": 0,
            },
          },
          "recommended": {
            "parserOptions": {
              "ecmaFeatures": {
                "jsx": true,
              },
            },
            "plugins": [
              "react",
            ],
            "rules": {
              "react/display-name": 2,
              "react/jsx-key": 2,
              "react/jsx-no-comment-textnodes": 2,
              "react/jsx-no-duplicate-props": 2,
              "react/jsx-no-target-blank": 2,
              "react/jsx-no-undef": 2,
              "react/jsx-uses-react": 2,
              "react/jsx-uses-vars": 2,
              "react/no-children-prop": 2,
              "react/no-danger-with-children": 2,
              "react/no-deprecated": 2,
              "react/no-direct-mutation-state": 2,
              "react/no-find-dom-node": 2,
              "react/no-is-mounted": 2,
              "react/no-render-return-value": 2,
              "react/no-string-refs": 2,
              "react/no-unescaped-entities": 2,
              "react/no-unknown-property": 2,
              "react/no-unsafe": 0,
              "react/prop-types": 2,
              "react/react-in-jsx-scope": 2,
              "react/require-render-return": 2,
            },
          },
        },
        "deprecatedRules": {
          "jsx-sort-default-props": {
            "create": [Function],
            "meta": {
              "deprecated": true,
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce defaultProps declarations alphabetical sorting",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-sort-default-props.md",
              },
              "messages": {
                "propsNotSorted": "Default prop types declarations should be sorted alphabetically",
              },
              "replacedBy": [
                "sort-default-props",
              ],
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreCase": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "jsx-space-before-closing": {
            "create": [Function],
            "meta": {
              "deprecated": true,
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce spacing before closing bracket in JSX",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-space-before-closing.md",
              },
              "fixable": "code",
              "messages": {
                "needSpaceBeforeClose": "A space is required before closing bracket",
                "noSpaceBeforeClose": "A space is forbidden before closing bracket",
              },
              "replacedBy": [
                "jsx-tag-spacing",
              ],
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
              ],
            },
          },
        },
        "rules": {
          "boolean-prop-naming": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforces consistent naming for boolean props",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/boolean-prop-naming.md",
              },
              "messages": {
                "patternMismatch": "Prop name \`{{propName}}\` doesn’t match rule \`{{pattern}}\`",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "message": {
                      "minLength": 1,
                      "type": "string",
                    },
                    "propTypeNames": {
                      "items": {
                        "type": "string",
                      },
                      "minItems": 1,
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "rule": {
                      "default": "^(is|has)[A-Z]([A-Za-z0-9]?)+",
                      "minLength": 1,
                      "type": "string",
                    },
                    "validateNested": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "button-has-type": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Disallow usage of \`button\` elements without an explicit \`type\` attribute",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/button-has-type.md",
              },
              "messages": {
                "complexType": "The button type attribute must be specified by a static string or a trivial ternary expression",
                "forbiddenValue": ""{{value}}" is an invalid value for button type attribute",
                "invalidValue": ""{{value}}" is an invalid value for button type attribute",
                "missingType": "Missing an explicit type attribute for button",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "button": {
                      "default": true,
                      "type": "boolean",
                    },
                    "reset": {
                      "default": true,
                      "type": "boolean",
                    },
                    "submit": {
                      "default": true,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "checked-requires-onchange-or-readonly": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Enforce using \`onChange\` or \`readonly\` attribute when \`checked\` is used",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/checked-requires-onchange-or-readonly.md",
              },
              "messages": {
                "exclusiveCheckedAttribute": "Use either \`checked\` or \`defaultChecked\`, but not both.",
                "missingProperty": "\`checked\` should be used with either \`onChange\` or \`readOnly\`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreExclusiveCheckedAttribute": {
                      "type": "boolean",
                    },
                    "ignoreMissingProperties": {
                      "type": "boolean",
                    },
                  },
                },
              ],
            },
          },
          "default-props-match-prop-types": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Enforce all defaultProps have a corresponding non-required PropType",
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/default-props-match-prop-types.md",
              },
              "messages": {
                "defaultHasNoType": "defaultProp "{{name}}" has no corresponding propTypes declaration.",
                "requiredHasDefault": "defaultProp "{{name}}" defined for isRequired propType.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowRequiredDefaults": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "destructuring-assignment": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce consistent usage of destructuring assignment of props, state, and context",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/destructuring-assignment.md",
              },
              "fixable": "code",
              "messages": {
                "destructureInSignature": "Must destructure props in the function signature.",
                "noDestructAssignment": "Must never use destructuring {{type}} assignment",
                "noDestructContextInSFCArg": "Must never use destructuring context assignment in SFC argument",
                "noDestructPropsInSFCArg": "Must never use destructuring props assignment in SFC argument",
                "useDestructAssignment": "Must use destructuring {{type}} assignment",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                  "type": "string",
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "destructureInSignature": {
                      "enum": [
                        "always",
                        "ignore",
                      ],
                      "type": "string",
                    },
                    "ignoreClassFields": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "display-name": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow missing displayName in a React component definition",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/display-name.md",
              },
              "messages": {
                "noContextDisplayName": "Context definition is missing display name",
                "noDisplayName": "Component definition is missing display name",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkContextObjects": {
                      "type": "boolean",
                    },
                    "ignoreTranspilerName": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "forbid-component-props": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow certain props on components",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-component-props.md",
              },
              "messages": {
                "propIsForbidden": "Prop "{{prop}}" is forbidden on Components",
              },
              "schema": [
                {
                  "properties": {
                    "forbid": {
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "allowedFor": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "allowedForPatterns": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "message": {
                                "type": "string",
                              },
                              "propName": {
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                          {
                            "additionalProperties": false,
                            "anyOf": [
                              {
                                "required": [
                                  "disallowedFor",
                                ],
                              },
                              {
                                "required": [
                                  "disallowedForPatterns",
                                ],
                              },
                            ],
                            "properties": {
                              "disallowedFor": {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "disallowedForPatterns": {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "message": {
                                "type": "string",
                              },
                              "propName": {
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "allowedFor": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "allowedForPatterns": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "message": {
                                "type": "string",
                              },
                              "propNamePattern": {
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                          {
                            "additionalProperties": false,
                            "anyOf": [
                              {
                                "required": [
                                  "disallowedFor",
                                ],
                              },
                              {
                                "required": [
                                  "disallowedForPatterns",
                                ],
                              },
                            ],
                            "properties": {
                              "disallowedFor": {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "disallowedForPatterns": {
                                "items": {
                                  "type": "string",
                                },
                                "minItems": 1,
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "message": {
                                "type": "string",
                              },
                              "propNamePattern": {
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "forbid-dom-props": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow certain props on DOM Nodes",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-dom-props.md",
              },
              "messages": {
                "propIsForbidden": "Prop "{{prop}}" is forbidden on DOM Nodes",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "forbid": {
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                          },
                          {
                            "properties": {
                              "disallowedFor": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "message": {
                                "type": "string",
                              },
                              "propName": {
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        ],
                        "minLength": 1,
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "forbid-elements": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow certain elements",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-elements.md",
              },
              "messages": {
                "forbiddenElement": "<{{element}}> is forbidden",
                "forbiddenElement_message": "<{{element}}> is forbidden, {{message}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "forbid": {
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "element": {
                                "type": "string",
                              },
                              "message": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "element",
                            ],
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "forbid-foreign-prop-types": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow using another component's propTypes",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-foreign-prop-types.md",
              },
              "messages": {
                "forbiddenPropType": "Using propTypes from another component is not safe because they may be removed in production builds",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowInPropTypes": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "forbid-prop-types": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow certain propTypes",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forbid-prop-types.md",
              },
              "messages": {
                "forbiddenPropType": "Prop type "{{target}}" is forbidden",
              },
              "schema": [
                {
                  "additionalProperties": true,
                  "properties": {
                    "checkChildContextTypes": {
                      "type": "boolean",
                    },
                    "checkContextTypes": {
                      "type": "boolean",
                    },
                    "forbid": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "forward-ref-uses-ref": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Require all forwardRef components include a ref parameter",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/forward-ref-uses-ref.md",
              },
              "hasSuggestions": true,
              "messages": {
                "addRefParameter": "Add a ref parameter",
                "missingRefParameter": "forwardRef is used with this component but no ref parameter is set",
                "removeForwardRef": "Remove forwardRef wrapper",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "function-component-definition": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce a specific function type for function components",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/function-component-definition.md",
              },
              "fixable": "code",
              "messages": {
                "arrow-function": "Function component is not an arrow function",
                "function-declaration": "Function component is not a function declaration",
                "function-expression": "Function component is not a function expression",
              },
              "schema": [
                {
                  "properties": {
                    "namedComponents": {
                      "anyOf": [
                        {
                          "enum": [
                            "function-declaration",
                            "arrow-function",
                            "function-expression",
                          ],
                        },
                        {
                          "items": {
                            "enum": [
                              "function-declaration",
                              "arrow-function",
                              "function-expression",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                      ],
                    },
                    "unnamedComponents": {
                      "anyOf": [
                        {
                          "enum": [
                            "arrow-function",
                            "function-expression",
                          ],
                        },
                        {
                          "items": {
                            "enum": [
                              "arrow-function",
                              "function-expression",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "hook-use-state": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Ensure destructuring and symmetric naming of useState hook value and setter variables",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/hook-use-state.md",
              },
              "hasSuggestions": true,
              "messages": {
                "suggestMemo": "Replace useState call with useMemo",
                "suggestPair": "Destructure useState call into value + setter pair",
                "useStateErrorMessage": "useState call is not destructured into value + setter pair",
                "useStateErrorMessageOrAddOption": "useState call is not destructured into value + setter pair (you can allow destructuring by enabling "allowDestructuredState" option)",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowDestructuredState": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "iframe-missing-sandbox": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Enforce sandbox attribute on iframe elements",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/iframe-missing-sandbox.md",
              },
              "messages": {
                "attributeMissing": "An iframe element is missing a sandbox attribute",
                "invalidCombination": "An iframe element defines a sandbox attribute with both allow-scripts and allow-same-origin which is invalid",
                "invalidValue": "An iframe element defines a sandbox attribute with invalid value "{{ value }}"",
              },
              "schema": [],
            },
          },
          "jsx-boolean-value": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce boolean attributes notation in JSX",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-boolean-value.md",
              },
              "fixable": "code",
              "messages": {
                "omitBoolean": "Value must be omitted for boolean attribute \`{{propName}}\`",
                "omitPropAndBoolean": "Value must be omitted for \`false\` attribute: \`{{propName}}\`",
                "setBoolean": "Value must be set for boolean attribute \`{{propName}}\`",
              },
              "schema": {
                "anyOf": [
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "enum": [
                          "always",
                          "never",
                        ],
                      },
                    ],
                    "type": "array",
                  },
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "enum": [
                          "always",
                        ],
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "assumeUndefinedIsFalse": {
                            "type": "boolean",
                          },
                          "never": {
                            "items": {
                              "minLength": 1,
                              "type": "string",
                            },
                            "type": "array",
                            "uniqueItems": true,
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "enum": [
                          "never",
                        ],
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "always": {
                            "items": {
                              "minLength": 1,
                              "type": "string",
                            },
                            "type": "array",
                            "uniqueItems": true,
                          },
                          "assumeUndefinedIsFalse": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                ],
              },
            },
          },
          "jsx-child-element-spacing": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce or disallow spaces inside of curly braces in JSX attributes and expressions",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-child-element-spacing.md",
              },
              "fixable": null,
              "messages": {
                "spacingAfterPrev": "Ambiguous spacing after previous element {{element}}",
                "spacingBeforeNext": "Ambiguous spacing before next element {{element}}",
              },
              "schema": [],
            },
          },
          "jsx-closing-bracket-location": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce closing bracket location in JSX",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-closing-bracket-location.md",
              },
              "fixable": "code",
              "messages": {
                "bracketLocation": "The closing bracket must be {{location}}{{details}}",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "enum": [
                        "after-props",
                        "props-aligned",
                        "tag-aligned",
                        "line-aligned",
                      ],
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "location": {
                          "enum": [
                            "after-props",
                            "props-aligned",
                            "tag-aligned",
                            "line-aligned",
                          ],
                        },
                      },
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "nonEmpty": {
                          "enum": [
                            "after-props",
                            "props-aligned",
                            "tag-aligned",
                            "line-aligned",
                            false,
                          ],
                        },
                        "selfClosing": {
                          "enum": [
                            "after-props",
                            "props-aligned",
                            "tag-aligned",
                            "line-aligned",
                            false,
                          ],
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
            },
          },
          "jsx-closing-tag-location": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce closing tag location for multiline JSX",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-closing-tag-location.md",
              },
              "fixable": "whitespace",
              "messages": {
                "alignWithOpening": "Expected closing tag to be aligned with the line containing the opening tag",
                "matchIndent": "Expected closing tag to match indentation of opening.",
                "onOwnLine": "Closing tag of a multiline JSX expression must be on its own line.",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "enum": [
                        "tag-aligned",
                        "line-aligned",
                      ],
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "location": {
                          "enum": [
                            "tag-aligned",
                            "line-aligned",
                          ],
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
            },
          },
          "jsx-curly-brace-presence": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Disallow unnecessary JSX expressions when literals alone are sufficient or enforce JSX expressions on literals in JSX children or attributes",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-curly-brace-presence.md",
              },
              "fixable": "code",
              "messages": {
                "missingCurly": "Need to wrap this literal in a JSX expression.",
                "unnecessaryCurly": "Curly braces are unnecessary here.",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "children": {
                          "enum": [
                            "always",
                            "never",
                            "ignore",
                          ],
                        },
                        "propElementValues": {
                          "enum": [
                            "always",
                            "never",
                            "ignore",
                          ],
                        },
                        "props": {
                          "enum": [
                            "always",
                            "never",
                            "ignore",
                          ],
                        },
                      },
                      "type": "object",
                    },
                    {
                      "enum": [
                        "always",
                        "never",
                        "ignore",
                      ],
                    },
                  ],
                },
              ],
            },
          },
          "jsx-curly-newline": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce consistent linebreaks in curly braces in JSX attributes and expressions",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-curly-newline.md",
              },
              "fixable": "whitespace",
              "messages": {
                "expectedAfter": "Expected newline after '{'.",
                "expectedBefore": "Expected newline before '}'.",
                "unexpectedAfter": "Unexpected newline after '{'.",
                "unexpectedBefore": "Unexpected newline before '}'.",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "enum": [
                        "consistent",
                        "never",
                      ],
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "multiline": {
                          "enum": [
                            "consistent",
                            "require",
                            "forbid",
                          ],
                        },
                        "singleline": {
                          "enum": [
                            "consistent",
                            "require",
                            "forbid",
                          ],
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "layout",
            },
          },
          "jsx-curly-spacing": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce or disallow spaces inside of curly braces in JSX attributes and expressions",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-curly-spacing.md",
              },
              "fixable": "code",
              "messages": {
                "noNewlineAfter": "There should be no newline after '{{token}}'",
                "noNewlineBefore": "There should be no newline before '{{token}}'",
                "noSpaceAfter": "There should be no space after '{{token}}'",
                "noSpaceBefore": "There should be no space before '{{token}}'",
                "spaceNeededAfter": "A space is required after '{{token}}'",
                "spaceNeededBefore": "A space is required before '{{token}}'",
              },
              "schema": {
                "definitions": {
                  "basicConfig": {
                    "properties": {
                      "allowMultiline": {
                        "type": "boolean",
                      },
                      "spacing": {
                        "properties": {
                          "objectLiterals": {
                            "enum": [
                              "always",
                              "never",
                            ],
                          },
                        },
                        "type": "object",
                      },
                      "when": {
                        "enum": [
                          "always",
                          "never",
                        ],
                      },
                    },
                    "type": "object",
                  },
                  "basicConfigOrBoolean": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/basicConfig",
                      },
                      {
                        "type": "boolean",
                      },
                    ],
                  },
                },
                "items": [
                  {
                    "anyOf": [
                      {
                        "allOf": [
                          {
                            "$ref": "#/definitions/basicConfig",
                          },
                          {
                            "properties": {
                              "attributes": {
                                "$ref": "#/definitions/basicConfigOrBoolean",
                              },
                              "children": {
                                "$ref": "#/definitions/basicConfigOrBoolean",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      {
                        "enum": [
                          "always",
                          "never",
                        ],
                      },
                    ],
                  },
                  {
                    "additionalProperties": false,
                    "properties": {
                      "allowMultiline": {
                        "type": "boolean",
                      },
                      "spacing": {
                        "properties": {
                          "objectLiterals": {
                            "enum": [
                              "always",
                              "never",
                            ],
                          },
                        },
                        "type": "object",
                      },
                    },
                    "type": "object",
                  },
                ],
                "type": "array",
              },
            },
          },
          "jsx-equals-spacing": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce or disallow spaces around equal signs in JSX attributes",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-equals-spacing.md",
              },
              "fixable": "code",
              "messages": {
                "needSpaceAfter": "A space is required after '='",
                "needSpaceBefore": "A space is required before '='",
                "noSpaceAfter": "There should be no space after '='",
                "noSpaceBefore": "There should be no space before '='",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
              ],
            },
          },
          "jsx-filename-extension": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Disallow file extensions that may contain JSX",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-filename-extension.md",
              },
              "messages": {
                "extensionOnlyForJSX": "Only files containing JSX may use the extension '{{ext}}'",
                "noJSXWithExtension": "JSX not allowed in files with extension '{{ext}}'",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "enum": [
                        "always",
                        "as-needed",
                      ],
                    },
                    "extensions": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "ignoreFilesWithoutCode": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "jsx-first-prop-new-line": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce proper position of the first property in JSX",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-first-prop-new-line.md",
              },
              "fixable": "code",
              "messages": {
                "propOnNewLine": "Property should be placed on a new line",
                "propOnSameLine": "Property should be placed on the same line as the component declaration",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                    "multiline",
                    "multiline-multiprop",
                    "multiprop",
                  ],
                },
              ],
            },
          },
          "jsx-fragments": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce shorthand or standard form for React fragments",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-fragments.md",
              },
              "fixable": "code",
              "messages": {
                "fragmentsNotSupported": "Fragments are only supported starting from React v16.2. Please disable the \`react/jsx-fragments\` rule in \`eslint\` settings or upgrade your version of React.",
                "preferFragment": "Prefer fragment shorthand over {{react}}.{{fragment}}",
                "preferPragma": "Prefer {{react}}.{{fragment}} over fragment shorthand",
              },
              "schema": [
                {
                  "enum": [
                    "syntax",
                    "element",
                  ],
                },
              ],
            },
          },
          "jsx-handler-names": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce event handler naming conventions in JSX",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-handler-names.md",
              },
              "messages": {
                "badHandlerName": "Handler function for {{propKey}} prop key must be a camelCase name beginning with '{{handlerPrefix}}' only",
                "badPropKey": "Prop key for {{propValue}} must begin with '{{handlerPropPrefix}}'",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "checkInlineFunction": {
                          "type": "boolean",
                        },
                        "checkLocalVariables": {
                          "type": "boolean",
                        },
                        "eventHandlerPrefix": {
                          "type": "string",
                        },
                        "eventHandlerPropPrefix": {
                          "type": "string",
                        },
                        "ignoreComponentNames": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "checkInlineFunction": {
                          "type": "boolean",
                        },
                        "checkLocalVariables": {
                          "type": "boolean",
                        },
                        "eventHandlerPrefix": {
                          "type": "string",
                        },
                        "eventHandlerPropPrefix": {
                          "enum": [
                            false,
                          ],
                          "type": "boolean",
                        },
                        "ignoreComponentNames": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "checkInlineFunction": {
                          "type": "boolean",
                        },
                        "checkLocalVariables": {
                          "type": "boolean",
                        },
                        "eventHandlerPrefix": {
                          "enum": [
                            false,
                          ],
                          "type": "boolean",
                        },
                        "eventHandlerPropPrefix": {
                          "type": "string",
                        },
                        "ignoreComponentNames": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "checkLocalVariables": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "checkInlineFunction": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                    {
                      "properties": {
                        "ignoreComponentNames": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                          "uniqueItems": true,
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
            },
          },
          "jsx-indent": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce JSX indentation",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-indent.md",
              },
              "fixable": "whitespace",
              "messages": {
                "wrongIndent": "Expected indentation of {{needed}} {{type}} {{characters}} but found {{gotten}}.",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "enum": [
                        "tab",
                      ],
                    },
                    {
                      "type": "integer",
                    },
                  ],
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkAttributes": {
                      "type": "boolean",
                    },
                    "indentLogicalExpressions": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "jsx-indent-props": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce props indentation in JSX",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-indent-props.md",
              },
              "fixable": "code",
              "messages": {
                "wrongIndent": "Expected indentation of {{needed}} {{type}} {{characters}} but found {{gotten}}.",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "enum": [
                        "tab",
                        "first",
                      ],
                    },
                    {
                      "type": "integer",
                    },
                    {
                      "properties": {
                        "ignoreTernaryOperator": {
                          "type": "boolean",
                        },
                        "indentMode": {
                          "anyOf": [
                            {
                              "enum": [
                                "tab",
                                "first",
                              ],
                            },
                            {
                              "type": "integer",
                            },
                          ],
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
            },
          },
          "jsx-key": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Disallow missing \`key\` props in iterators/collection literals",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-key.md",
              },
              "messages": {
                "keyBeforeSpread": "\`key\` prop must be placed before any \`{...spread}, to avoid conflicting with React’s new JSX transform: https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html\`",
                "missingArrayKey": "Missing "key" prop for element in array",
                "missingArrayKeyUsePrag": "Missing "key" prop for element in array. Shorthand fragment syntax does not support providing keys. Use {{reactPrag}}.{{fragPrag}} instead",
                "missingIterKey": "Missing "key" prop for element in iterator",
                "missingIterKeyUsePrag": "Missing "key" prop for element in iterator. Shorthand fragment syntax does not support providing keys. Use {{reactPrag}}.{{fragPrag}} instead",
                "nonUniqueKeys": "\`key\` prop must be unique",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkFragmentShorthand": {
                      "default": false,
                      "type": "boolean",
                    },
                    "checkKeyMustBeforeSpread": {
                      "default": false,
                      "type": "boolean",
                    },
                    "warnOnDuplicates": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "jsx-max-depth": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce JSX maximum depth",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-max-depth.md",
              },
              "messages": {
                "wrongDepth": "Expected the depth of nested jsx elements to be <= {{needed}}, but found {{found}}.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "max": {
                      "minimum": 0,
                      "type": "integer",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "jsx-max-props-per-line": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce maximum of props on a single line in JSX",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-max-props-per-line.md",
              },
              "fixable": "code",
              "messages": {
                "newLine": "Prop \`{{prop}}\` must be placed on a new line",
              },
              "schema": [
                {
                  "anyOf": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "maximum": {
                          "properties": {
                            "multi": {
                              "minimum": 1,
                              "type": "integer",
                            },
                            "single": {
                              "minimum": 1,
                              "type": "integer",
                            },
                          },
                          "type": "object",
                        },
                      },
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "maximum": {
                          "minimum": 1,
                          "type": "number",
                        },
                        "when": {
                          "enum": [
                            "always",
                            "multiline",
                          ],
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
            },
          },
          "jsx-newline": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Require or prevent a new line after jsx elements and expressions.",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-newline.md",
              },
              "fixable": "code",
              "messages": {
                "allowMultilines": "Multiline JSX elements should start in a new line",
                "prevent": "JSX element should not start in a new line",
                "require": "JSX element should start in a new line",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "if": {
                    "properties": {
                      "allowMultilines": {
                        "const": true,
                      },
                    },
                  },
                  "properties": {
                    "allowMultilines": {
                      "default": false,
                      "type": "boolean",
                    },
                    "prevent": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "then": {
                    "properties": {
                      "prevent": {
                        "const": true,
                      },
                    },
                    "required": [
                      "prevent",
                    ],
                  },
                  "type": "object",
                },
              ],
            },
          },
          "jsx-no-bind": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow \`.bind()\` or arrow functions in JSX props",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-bind.md",
              },
              "messages": {
                "arrowFunc": "JSX props should not use arrow functions",
                "bindCall": "JSX props should not use .bind()",
                "bindExpression": "JSX props should not use ::",
                "func": "JSX props should not use functions",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowArrowFunctions": {
                      "default": false,
                      "type": "boolean",
                    },
                    "allowBind": {
                      "default": false,
                      "type": "boolean",
                    },
                    "allowFunctions": {
                      "default": false,
                      "type": "boolean",
                    },
                    "ignoreDOMComponents": {
                      "default": false,
                      "type": "boolean",
                    },
                    "ignoreRefs": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "jsx-no-comment-textnodes": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Disallow comments from being inserted as text nodes",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-comment-textnodes.md",
              },
              "messages": {
                "putCommentInBraces": "Comments inside children section of tag should be placed inside braces",
              },
              "schema": [],
            },
          },
          "jsx-no-constructed-context-values": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallows JSX context provider values from taking values that will cause needless rerenders",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-constructed-context-values.md",
              },
              "messages": {
                "defaultMsg": "The {{type}} passed as the value prop to the Context provider (at line {{nodeLine}}) changes every render. To fix this consider wrapping it in a useMemo hook.",
                "defaultMsgFunc": "The {{type}} passed as the value prop to the Context provider (at line {{nodeLine}}) changes every render. To fix this consider wrapping it in a useCallback hook.",
                "withIdentifierMsg": "The '{{variableName}}' {{type}} (at line {{nodeLine}}) passed as the value prop to the Context provider (at line {{usageLine}}) changes every render. To fix this consider wrapping it in a useMemo hook.",
                "withIdentifierMsgFunc": "The '{{variableName}}' {{type}} (at line {{nodeLine}}) passed as the value prop to the Context provider (at line {{usageLine}}) changes every render. To fix this consider wrapping it in a useCallback hook.",
              },
              "schema": false,
            },
          },
          "jsx-no-duplicate-props": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Disallow duplicate properties in JSX",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-duplicate-props.md",
              },
              "messages": {
                "noDuplicateProps": "No duplicate props allowed",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreCase": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "jsx-no-leaked-render": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Disallow problematic leaked values from being rendered",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-leaked-render.md",
              },
              "fixable": "code",
              "messages": {
                "noPotentialLeakedRender": "Potential leaked value that might cause unintentionally rendered values or rendering crashes",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "validStrategies": {
                      "default": [
                        "ternary",
                        "coerce",
                      ],
                      "items": {
                        "enum": [
                          "ternary",
                          "coerce",
                        ],
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "jsx-no-literals": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Disallow usage of string literals in JSX",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-literals.md",
              },
              "messages": {
                "invalidPropValue": "Invalid prop value: "{{text}}"",
                "invalidPropValueInElement": "Invalid prop value: "{{text}}" in {{element}}",
                "literalNotInJSXExpression": "Missing JSX expression container around literal string: "{{text}}"",
                "literalNotInJSXExpressionInElement": "Missing JSX expression container around literal string: "{{text}}" in {{element}}",
                "noStringsInAttributes": "Strings not allowed in attributes: "{{text}}"",
                "noStringsInAttributesInElement": "Strings not allowed in attributes: "{{text}}" in {{element}}",
                "noStringsInJSX": "Strings not allowed in JSX files: "{{text}}"",
                "noStringsInJSXInElement": "Strings not allowed in JSX files: "{{text}}" in {{element}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowedStrings": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "elementOverrides": {
                      "patternProperties": {
                        "^[A-Z][\\w.]*$": {
                          "properties": {
                            "allowedStrings": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                              "uniqueItems": true,
                            },
                            "applyToNestedElements": {
                              "type": "boolean",
                            },
                            "ignoreProps": {
                              "type": "boolean",
                            },
                            "noAttributeStrings": {
                              "type": "boolean",
                            },
                            "noStrings": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      },
                      "type": "object",
                    },
                    "ignoreProps": {
                      "type": "boolean",
                    },
                    "noAttributeStrings": {
                      "type": "boolean",
                    },
                    "noStrings": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "jsx-no-script-url": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow usage of \`javascript:\` URLs",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-script-url.md",
              },
              "messages": {
                "noScriptURL": "A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML, try using dangerouslySetInnerHTML instead.",
              },
              "schema": {
                "anyOf": [
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "items": {
                          "additionalProperties": false,
                          "properties": {
                            "name": {
                              "type": "string",
                            },
                            "props": {
                              "items": {
                                "type": "string",
                                "uniqueItems": true,
                              },
                              "type": "array",
                            },
                          },
                          "required": [
                            "name",
                            "props",
                          ],
                          "type": "object",
                        },
                        "type": "array",
                        "uniqueItems": true,
                      },
                      {
                        "additionalItems": false,
                        "properties": {
                          "includeFromSettings": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "additionalItems": false,
                        "properties": {
                          "includeFromSettings": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                ],
              },
            },
          },
          "jsx-no-target-blank": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow \`target="_blank"\` attribute without \`rel="noreferrer"\`",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-target-blank.md",
              },
              "fixable": "code",
              "messages": {
                "noTargetBlankWithoutNoopener": "Using target="_blank" without rel="noreferrer" or rel="noopener" (the former implies the latter and is preferred due to wider support) is a security risk: see https://mathiasbynens.github.io/rel-noopener/#recommendations",
                "noTargetBlankWithoutNoreferrer": "Using target="_blank" without rel="noreferrer" (which implies rel="noopener") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowReferrer": {
                      "type": "boolean",
                    },
                    "enforceDynamicLinks": {
                      "enum": [
                        "always",
                        "never",
                      ],
                    },
                    "forms": {
                      "default": false,
                      "type": "boolean",
                    },
                    "links": {
                      "default": true,
                      "type": "boolean",
                    },
                    "warnOnSpreadAttributes": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "jsx-no-undef": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Disallow undeclared variables in JSX",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-undef.md",
              },
              "messages": {
                "undefined": "'{{identifier}}' is not defined.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowGlobals": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "jsx-no-useless-fragment": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Disallow unnecessary fragments",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-no-useless-fragment.md",
              },
              "fixable": "code",
              "messages": {
                "ChildOfHtmlElement": "Passing a fragment to an HTML element is useless.",
                "NeedsMoreChildren": "Fragments should contain more than one child - otherwise, there’s no need for a Fragment at all.",
              },
              "schema": [
                {
                  "properties": {
                    "allowExpressions": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "jsx-one-expression-per-line": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Require one JSX element per line",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-one-expression-per-line.md",
              },
              "fixable": "whitespace",
              "messages": {
                "moveToNewLine": "\`{{descriptor}}\` must be placed on a new line",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "default": {
                    "allow": "none",
                  },
                  "properties": {
                    "allow": {
                      "enum": [
                        "none",
                        "literal",
                        "single-child",
                        "non-jsx",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "jsx-pascal-case": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce PascalCase for user-defined JSX components",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-pascal-case.md",
              },
              "messages": {
                "usePascalCase": "Imported JSX component {{name}} must be in PascalCase",
                "usePascalOrSnakeCase": "Imported JSX component {{name}} must be in PascalCase or SCREAMING_SNAKE_CASE",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowAllCaps": {
                      "type": "boolean",
                    },
                    "allowLeadingUnderscore": {
                      "type": "boolean",
                    },
                    "allowNamespace": {
                      "type": "boolean",
                    },
                    "ignore": {
                      "items": [
                        {
                          "type": "string",
                        },
                      ],
                      "minItems": 0,
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "jsx-props-no-multi-spaces": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Disallow multiple spaces between inline JSX props",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-props-no-multi-spaces.md",
              },
              "fixable": "code",
              "messages": {
                "noLineGap": "Expected no line gap between “{{prop1}}” and “{{prop2}}”",
                "onlyOneSpace": "Expected only one space between “{{prop1}}” and “{{prop2}}”",
              },
              "schema": [],
            },
          },
          "jsx-props-no-spread-multi": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow JSX prop spreading the same identifier multiple times",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-props-no-spread-multi.md",
              },
              "messages": {
                "noMultiSpreading": "Spreading the same expression multiple times is forbidden",
              },
            },
          },
          "jsx-props-no-spreading": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow JSX prop spreading",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-props-no-spreading.md",
              },
              "messages": {
                "noSpreading": "Prop spreading is forbidden",
              },
              "schema": [
                {
                  "allOf": [
                    {
                      "properties": {
                        "custom": {
                          "enum": [
                            "enforce",
                            "ignore",
                          ],
                        },
                        "exceptions": {
                          "items": {
                            "type": "string",
                            "uniqueItems": true,
                          },
                          "type": "array",
                        },
                        "explicitSpread": {
                          "enum": [
                            "enforce",
                            "ignore",
                          ],
                        },
                        "html": {
                          "enum": [
                            "enforce",
                            "ignore",
                          ],
                        },
                      },
                      "type": "object",
                    },
                    {
                      "not": {
                        "properties": {
                          "custom": {
                            "enum": [
                              "ignore",
                            ],
                          },
                          "exceptions": {
                            "maxItems": 0,
                            "minItems": 0,
                            "type": "array",
                          },
                          "html": {
                            "enum": [
                              "ignore",
                            ],
                          },
                        },
                        "required": [
                          "html",
                          "custom",
                        ],
                        "type": "object",
                      },
                    },
                  ],
                },
              ],
            },
          },
          "jsx-sort-default-props": {
            "create": [Function],
            "meta": {
              "deprecated": true,
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce defaultProps declarations alphabetical sorting",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-sort-default-props.md",
              },
              "messages": {
                "propsNotSorted": "Default prop types declarations should be sorted alphabetically",
              },
              "replacedBy": [
                "sort-default-props",
              ],
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreCase": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "jsx-sort-props": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce props alphabetical sorting",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-sort-props.md",
              },
              "fixable": "code",
              "messages": {
                "listCallbacksLast": "Callbacks must be listed after all other props",
                "listIsEmpty": "A customized reserved first list must not be empty",
                "listMultilineFirst": "Multiline props must be listed before all other props",
                "listMultilineLast": "Multiline props must be listed after all other props",
                "listReservedPropsFirst": "Reserved props must be listed before all other props",
                "listShorthandFirst": "Shorthand props must be listed before all other props",
                "listShorthandLast": "Shorthand props must be listed after all other props",
                "noUnreservedProps": "A customized reserved first list must only contain a subset of React reserved props. Remove: {{unreservedWords}}",
                "sortPropsByAlpha": "Props should be sorted alphabetically",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "callbacksLast": {
                      "type": "boolean",
                    },
                    "ignoreCase": {
                      "type": "boolean",
                    },
                    "locale": {
                      "default": "auto",
                      "type": "string",
                    },
                    "multiline": {
                      "default": "ignore",
                      "enum": [
                        "ignore",
                        "first",
                        "last",
                      ],
                    },
                    "noSortAlphabetically": {
                      "type": "boolean",
                    },
                    "reservedFirst": {
                      "type": [
                        "array",
                        "boolean",
                      ],
                    },
                    "shorthandFirst": {
                      "type": "boolean",
                    },
                    "shorthandLast": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "jsx-space-before-closing": {
            "create": [Function],
            "meta": {
              "deprecated": true,
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce spacing before closing bracket in JSX",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-space-before-closing.md",
              },
              "fixable": "code",
              "messages": {
                "needSpaceBeforeClose": "A space is required before closing bracket",
                "noSpaceBeforeClose": "A space is forbidden before closing bracket",
              },
              "replacedBy": [
                "jsx-tag-spacing",
              ],
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
              ],
            },
          },
          "jsx-tag-spacing": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce whitespace in and around the JSX opening and closing brackets",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-tag-spacing.md",
              },
              "fixable": "whitespace",
              "messages": {
                "afterOpenNeedSpace": "A space is required after opening bracket",
                "afterOpenNoSpace": "A space is forbidden after opening bracket",
                "beforeCloseNeedNewline": "A newline is required before closing bracket",
                "beforeCloseNeedSpace": "Whitespace is required before closing bracket",
                "beforeCloseNoSpace": "A space is forbidden before closing bracket",
                "beforeSelfCloseNeedNewline": "A newline is required before closing bracket",
                "beforeSelfCloseNeedSpace": "A space is required before closing bracket",
                "beforeSelfCloseNoSpace": "A space is forbidden before closing bracket",
                "closeSlashNeedSpace": "Whitespace is required between \`<\` and \`/\`; write \`< /\`",
                "closeSlashNoSpace": "Whitespace is forbidden between \`<\` and \`/\`; write \`</\`",
                "selfCloseSlashNeedSpace": "Whitespace is required between \`/\` and \`>\`; write \`/ >\`",
                "selfCloseSlashNoSpace": "Whitespace is forbidden between \`/\` and \`>\`; write \`/>\`",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "default": {
                    "afterOpening": "never",
                    "beforeClosing": "allow",
                    "beforeSelfClosing": "always",
                    "closingSlash": "never",
                  },
                  "properties": {
                    "afterOpening": {
                      "enum": [
                        "always",
                        "allow-multiline",
                        "never",
                        "allow",
                      ],
                    },
                    "beforeClosing": {
                      "enum": [
                        "always",
                        "proportional-always",
                        "never",
                        "allow",
                      ],
                    },
                    "beforeSelfClosing": {
                      "enum": [
                        "always",
                        "proportional-always",
                        "never",
                        "allow",
                      ],
                    },
                    "closingSlash": {
                      "enum": [
                        "always",
                        "never",
                        "allow",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "jsx-uses-react": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow React to be incorrectly marked as unused",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-uses-react.md",
              },
              "schema": [],
            },
          },
          "jsx-uses-vars": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow variables used in JSX to be incorrectly marked as unused",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-uses-vars.md",
              },
              "schema": [],
            },
          },
          "jsx-wrap-multilines": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Disallow missing parentheses around multiline JSX",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/jsx-wrap-multilines.md",
              },
              "fixable": "code",
              "messages": {
                "extraParens": "Expected no parentheses around multilines JSX",
                "missingParens": "Missing parentheses around multilines JSX",
                "parensOnNewLines": "Parentheses around JSX should be on separate lines",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "arrow": {
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line",
                        "never",
                      ],
                    },
                    "assignment": {
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line",
                        "never",
                      ],
                    },
                    "condition": {
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line",
                        "never",
                      ],
                    },
                    "declaration": {
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line",
                        "never",
                      ],
                    },
                    "logical": {
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line",
                        "never",
                      ],
                    },
                    "prop": {
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line",
                        "never",
                      ],
                    },
                    "return": {
                      "enum": [
                        true,
                        false,
                        "ignore",
                        "parens",
                        "parens-new-line",
                        "never",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "no-access-state-in-setstate": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Disallow when this.state is accessed within setState",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-access-state-in-setstate.md",
              },
              "messages": {
                "useCallback": "Use callback in setState when referencing the previous state.",
              },
            },
          },
          "no-adjacent-inline-elements": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow adjacent inline elements not separated by whitespace.",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-adjacent-inline-elements.md",
              },
              "messages": {
                "inlineElement": "Child elements which render as inline HTML elements should be separated by a space or wrapped in block level elements.",
              },
              "schema": [],
            },
          },
          "no-array-index-key": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow usage of Array index in keys",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-array-index-key.md",
              },
              "messages": {
                "noArrayIndex": "Do not use Array index in keys",
              },
              "schema": [],
            },
          },
          "no-arrow-function-lifecycle": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Lifecycle methods should be methods on the prototype, not class fields",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-arrow-function-lifecycle.md",
              },
              "fixable": "code",
              "messages": {
                "lifecycle": "{{propertyName}} is a React lifecycle method, and should not be an arrow function or in a class field. Use an instance method instead.",
              },
              "schema": [],
            },
          },
          "no-children-prop": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow passing of children as props",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-children-prop.md",
              },
              "messages": {
                "nestChildren": "Do not pass children as props. Instead, nest children between the opening and closing tags.",
                "nestFunction": "Do not nest a function between the opening and closing tags. Instead, pass it as a prop.",
                "passChildrenAsArgs": "Do not pass children as props. Instead, pass them as additional arguments to React.createElement.",
                "passFunctionAsArgs": "Do not pass a function as an additional argument to React.createElement. Instead, pass it as a prop.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowFunctions": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "no-danger": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow usage of dangerous JSX properties",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-danger.md",
              },
              "messages": {
                "dangerousProp": "Dangerous property '{{name}}' found",
              },
              "schema": [
                {
                  "properties": {
                    "customComponentNames": {
                      "items": {
                        "type": "string",
                      },
                      "minItems": 0,
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "no-danger-with-children": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Disallow when a DOM element is using both children and dangerouslySetInnerHTML",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-danger-with-children.md",
              },
              "messages": {
                "dangerWithChildren": "Only set one of \`children\` or \`props.dangerouslySetInnerHTML\`",
              },
              "schema": [],
            },
          },
          "no-deprecated": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow usage of deprecated methods",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-deprecated.md",
              },
              "messages": {
                "deprecated": "{{oldMethod}} is deprecated since React {{version}}{{newMethod}}{{refs}}",
              },
              "schema": [],
            },
          },
          "no-did-mount-set-state": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow usage of setState in componentDidMount",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-did-mount-set-state.md",
              },
              "messages": {
                "noSetState": "Do not use setState in {{name}}",
              },
              "schema": [
                {
                  "enum": [
                    "disallow-in-func",
                  ],
                },
              ],
            },
          },
          "no-did-update-set-state": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow usage of setState in componentDidUpdate",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-did-update-set-state.md",
              },
              "messages": {
                "noSetState": "Do not use setState in {{name}}",
              },
              "schema": [
                {
                  "enum": [
                    "disallow-in-func",
                  ],
                },
              ],
            },
          },
          "no-direct-mutation-state": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Disallow direct mutation of this.state",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-direct-mutation-state.md",
              },
              "messages": {
                "noDirectMutation": "Do not mutate state directly. Use setState().",
              },
            },
          },
          "no-find-dom-node": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow usage of findDOMNode",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-find-dom-node.md",
              },
              "messages": {
                "noFindDOMNode": "Do not use findDOMNode. It doesn’t work with function components and is deprecated in StrictMode. See https://reactjs.org/docs/react-dom.html#finddomnode",
              },
              "schema": [],
            },
          },
          "no-invalid-html-attribute": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Disallow usage of invalid attributes",
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-invalid-html-attribute.md",
              },
              "hasSuggestions": true,
              "messages": {
                "emptyIsMeaningless": "An empty “{{attributeName}}” attribute is meaningless.",
                "neverValid": "“{{reportingValue}}” is never a valid “{{attributeName}}” attribute value.",
                "noEmpty": "An empty “{{attributeName}}” attribute is meaningless.",
                "noMethod": "The ”{{attributeName}}“ attribute cannot be a method.",
                "notAlone": "“{{reportingValue}}” must be directly followed by “{{missingValue}}”.",
                "notPaired": "“{{reportingValue}}” can not be directly followed by “{{secondValue}}” without “{{missingValue}}”.",
                "notValidFor": "“{{reportingValue}}” is not a valid “{{attributeName}}” attribute value for <{{elementName}}>.",
                "onlyMeaningfulFor": "The ”{{attributeName}}“ attribute only has meaning on the tags: {{tagNames}}",
                "onlyStrings": "“{{attributeName}}” attribute only supports strings.",
                "spaceDelimited": "”{{attributeName}}“ attribute values should be space delimited.",
                "suggestRemoveDefault": ""remove {{attributeName}}"",
                "suggestRemoveEmpty": ""remove empty attribute {{attributeName}}"",
                "suggestRemoveInvalid": "“remove invalid attribute {{reportingValue}}”",
                "suggestRemoveNonString": "remove non-string value in “{{attributeName}}”",
                "suggestRemoveWhitespaces": "remove whitespaces in “{{attributeName}}”",
              },
              "schema": [
                {
                  "items": {
                    "enum": [
                      "rel",
                    ],
                  },
                  "type": "array",
                  "uniqueItems": true,
                },
              ],
              "type": "suggestion",
            },
          },
          "no-is-mounted": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow usage of isMounted",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-is-mounted.md",
              },
              "messages": {
                "noIsMounted": "Do not use isMounted",
              },
              "schema": [],
            },
          },
          "no-multi-comp": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Disallow multiple component definition per file",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-multi-comp.md",
              },
              "messages": {
                "onlyOneComponent": "Declare only one React component per file",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreStateless": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "no-namespace": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Enforce that namespaces are not used in React elements",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-namespace.md",
              },
              "messages": {
                "noNamespace": "React component {{name}} must not be in a namespace, as React does not support them",
              },
              "schema": [],
            },
          },
          "no-object-type-as-default-prop": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow usage of referential-type variables as default param in functional component",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-object-type-as-default-prop.md",
              },
              "messages": {
                "forbiddenTypeDefaultParam": "{{propName}} has a/an {{forbiddenType}} as default prop. This could lead to potential infinite render loop in React. Use a variable reference instead of {{forbiddenType}}.",
              },
            },
          },
          "no-redundant-should-component-update": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Disallow usage of shouldComponentUpdate when extending React.PureComponent",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-redundant-should-component-update.md",
              },
              "messages": {
                "noShouldCompUpdate": "{{component}} does not need shouldComponentUpdate when extending React.PureComponent.",
              },
              "schema": [],
            },
          },
          "no-render-return-value": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow usage of the return value of ReactDOM.render",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-render-return-value.md",
              },
              "messages": {
                "noReturnValue": "Do not depend on the return value from {{node}}.render",
              },
              "schema": [],
            },
          },
          "no-set-state": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Disallow usage of setState",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-set-state.md",
              },
              "messages": {
                "noSetState": "Do not use setState",
              },
              "schema": [],
            },
          },
          "no-string-refs": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow using string references",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-string-refs.md",
              },
              "messages": {
                "stringInRefDeprecated": "Using string literals in ref attributes is deprecated.",
                "thisRefsDeprecated": "Using this.refs is deprecated.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "noTemplateLiterals": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "no-this-in-sfc": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Disallow \`this\` from being used in stateless functional components",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-this-in-sfc.md",
              },
              "messages": {
                "noThisInSFC": "Stateless functional components should not use \`this\`",
              },
              "schema": [],
            },
          },
          "no-typos": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Disallow common typos",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-typos.md",
              },
              "messages": {
                "noPropTypesBinding": "\`'prop-types'\` imported without a local \`PropTypes\` binding.",
                "noReactBinding": "\`'react'\` imported without a local \`React\` binding.",
                "staticLifecycleMethod": "Lifecycle method should be static: {{method}}",
                "typoLifecycleMethod": "Typo in component lifecycle method declaration: {{actual}} should be {{expected}}",
                "typoPropDeclaration": "Typo in property declaration",
                "typoPropType": "Typo in declared prop type: {{name}}",
                "typoPropTypeChain": "Typo in prop type chain qualifier: {{name}}",
                "typoStaticClassProp": "Typo in static class property declaration",
              },
              "schema": [],
            },
          },
          "no-unescaped-entities": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Disallow unescaped HTML entities from appearing in markup",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unescaped-entities.md",
              },
              "hasSuggestions": true,
              "messages": {
                "replaceWithAlt": "Replace with \`{{alt}}\`.",
                "unescapedEntity": "HTML entity, \`{{entity}}\` , must be escaped.",
                "unescapedEntityAlts": "\`{{entity}}\` can be escaped with {{alts}}.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "forbid": {
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                          },
                          {
                            "properties": {
                              "alternatives": {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              "char": {
                                "type": "string",
                              },
                            },
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "no-unknown-property": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Disallow usage of unknown DOM property",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unknown-property.md",
              },
              "fixable": "code",
              "messages": {
                "dataLowercaseRequired": "React does not recognize data-* props with uppercase characters on a DOM element. Found '{{name}}', use '{{lowerCaseName}}' instead",
                "invalidPropOnTag": "Invalid property '{{name}}' found on tag '{{tagName}}', but it is only allowed on: {{allowedTags}}",
                "unknownProp": "Unknown property '{{name}}' found",
                "unknownPropWithStandardName": "Unknown property '{{name}}' found, use '{{standardName}}' instead",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignore": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "requireDataLowercase": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "no-unsafe": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow usage of unsafe lifecycle methods",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unsafe.md",
              },
              "messages": {
                "unsafeMethod": "{{method}} is unsafe for use in async rendering. Update the component to use {{newMethod}} instead. {{details}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkAliases": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "no-unstable-nested-components": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Disallow creating unstable components inside components",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unstable-nested-components.md",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowAsProps": {
                      "type": "boolean",
                    },
                    "customValidators": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "propNamePattern": {
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "no-unused-class-component-methods": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow declaring unused methods of component class",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unused-class-component-methods.md",
              },
              "messages": {
                "unused": "Unused method or property "{{name}}"",
                "unusedWithClass": "Unused method or property "{{name}}" of class "{{className}}"",
              },
              "schema": [],
            },
          },
          "no-unused-prop-types": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow definitions of unused propTypes",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unused-prop-types.md",
              },
              "messages": {
                "unusedPropType": "'{{name}}' PropType is defined but prop is never used",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "customValidators": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "ignore": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "skipShapeProps": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "no-unused-state": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow definitions of unused state",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-unused-state.md",
              },
              "messages": {
                "unusedStateField": "Unused state field: '{{name}}'",
              },
              "schema": [],
            },
          },
          "no-will-update-set-state": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow usage of setState in componentWillUpdate",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/no-will-update-set-state.md",
              },
              "messages": {
                "noSetState": "Do not use setState in {{name}}",
              },
              "schema": [
                {
                  "enum": [
                    "disallow-in-func",
                  ],
                },
              ],
            },
          },
          "prefer-es6-class": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce ES5 or ES6 class for React Components",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prefer-es6-class.md",
              },
              "messages": {
                "shouldUseCreateClass": "Component should use createClass instead of es6 class",
                "shouldUseES6Class": "Component should use es6 class instead of createClass",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
              ],
            },
          },
          "prefer-exact-props": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Prefer exact proptype definitions",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prefer-exact-props.md",
              },
              "messages": {
                "flow": "Component flow props should be set with exact objects.",
                "propTypes": "Component propTypes should be exact by using {{exactPropWrappers}}.",
              },
              "schema": [],
            },
          },
          "prefer-read-only-props": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce that props are read-only",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prefer-read-only-props.md",
              },
              "fixable": "code",
              "messages": {
                "readOnlyProp": "Prop '{{name}}' should be read-only.",
              },
              "schema": [],
            },
          },
          "prefer-stateless-function": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce stateless components to be written as a pure function",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prefer-stateless-function.md",
              },
              "messages": {
                "componentShouldBePure": "Component should be written as a pure function",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignorePureComponents": {
                      "default": false,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "prop-types": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow missing props validation in a React component definition",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/prop-types.md",
              },
              "messages": {
                "missingPropType": "'{{name}}' is missing in props validation",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "customValidators": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "ignore": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "skipUndeclared": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "react-in-jsx-scope": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Disallow missing React when using JSX",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/react-in-jsx-scope.md",
              },
              "messages": {
                "notInScope": "'{{name}}' must be in scope when using JSX",
              },
              "schema": [],
            },
          },
          "require-default-props": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Enforce a defaultProps definition for every prop that is not a required prop",
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/require-default-props.md",
              },
              "messages": {
                "destructureInSignature": "Must destructure props in the function signature to initialize an optional prop.",
                "noDefaultPropsWithFunction": "Don’t use defaultProps with function components.",
                "noDefaultWithRequired": "propType "{{name}}" is required and should not have a defaultProps declaration.",
                "shouldAssignObjectDefault": "propType "{{name}}" is not required, but has no corresponding default argument value.",
                "shouldHaveDefault": "propType "{{name}}" is not required, but has no corresponding defaultProps declaration.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "classes": {
                      "enum": [
                        "defaultProps",
                        "ignore",
                      ],
                    },
                    "forbidDefaultForRequired": {
                      "type": "boolean",
                    },
                    "functions": {
                      "enum": [
                        "defaultArguments",
                        "defaultProps",
                        "ignore",
                      ],
                    },
                    "ignoreFunctionalComponents": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "require-optimization": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Enforce React components to have a shouldComponentUpdate method",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/require-optimization.md",
              },
              "messages": {
                "noShouldComponentUpdate": "Component is not optimized. Please add a shouldComponentUpdate method.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowDecorators": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "require-render-return": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Enforce ES5 or ES6 class for returning value in render function",
                "recommended": true,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/require-render-return.md",
              },
              "messages": {
                "noRenderReturn": "Your render method should have a return statement",
              },
              "schema": [],
            },
          },
          "self-closing-comp": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Disallow extra closing tags for components without children",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/self-closing-comp.md",
              },
              "fixable": "code",
              "messages": {
                "notSelfClosing": "Empty components are self-closing",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "component": {
                      "default": true,
                      "type": "boolean",
                    },
                    "html": {
                      "default": true,
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "sort-comp": {
            "create": [Function],
            "defaultConfig": {
              "groups": {
                "lifecycle": [
                  "displayName",
                  "propTypes",
                  "contextTypes",
                  "childContextTypes",
                  "mixins",
                  "statics",
                  "defaultProps",
                  "constructor",
                  "getDefaultProps",
                  "state",
                  "getInitialState",
                  "getChildContext",
                  "getDerivedStateFromProps",
                  "componentWillMount",
                  "UNSAFE_componentWillMount",
                  "componentDidMount",
                  "componentWillReceiveProps",
                  "UNSAFE_componentWillReceiveProps",
                  "shouldComponentUpdate",
                  "componentWillUpdate",
                  "UNSAFE_componentWillUpdate",
                  "getSnapshotBeforeUpdate",
                  "componentDidUpdate",
                  "componentDidCatch",
                  "componentWillUnmount",
                ],
              },
              "order": [
                "static-methods",
                "lifecycle",
                "everything-else",
                "render",
              ],
            },
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce component methods order",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/sort-comp.md",
              },
              "messages": {
                "unsortedProps": "{{propA}} should be placed {{position}} {{propB}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "groups": {
                      "patternProperties": {
                        "^.*$": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                      },
                      "type": "object",
                    },
                    "order": {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "sort-default-props": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce defaultProps declarations alphabetical sorting",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/sort-default-props.md",
              },
              "messages": {
                "propsNotSorted": "Default prop types declarations should be sorted alphabetically",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreCase": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "sort-prop-types": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce propTypes declarations alphabetical sorting",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/sort-prop-types.md",
              },
              "fixable": "code",
              "messages": {
                "callbackPropsLast": "Callback prop types must be listed after all other prop types",
                "propsNotSorted": "Prop types declarations should be sorted alphabetically",
                "requiredPropsFirst": "Required prop types must be listed before all other prop types",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "callbacksLast": {
                      "type": "boolean",
                    },
                    "checkTypes": {
                      "type": "boolean",
                    },
                    "ignoreCase": {
                      "type": "boolean",
                    },
                    "noSortAlphabetically": {
                      "type": "boolean",
                    },
                    "requiredFirst": {
                      "type": "boolean",
                    },
                    "sortShapeProp": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "state-in-constructor": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforce class component state initialization style",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/state-in-constructor.md",
              },
              "messages": {
                "stateInitClassProp": "State initialization should be in a class property",
                "stateInitConstructor": "State initialization should be in a constructor",
              },
              "schema": [
                {
                  "enum": [
                    "always",
                    "never",
                  ],
                },
              ],
            },
          },
          "static-property-placement": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Stylistic Issues",
                "description": "Enforces where React component static properties should be positioned.",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/static-property-placement.md",
              },
              "fixable": null,
              "messages": {
                "declareOutsideClass": "'{{name}}' should be declared outside the class body.",
                "notGetterClassFunc": "'{{name}}' should be declared as a static getter class function.",
                "notStaticClassProp": "'{{name}}' should be declared as a static class property.",
              },
              "schema": [
                {
                  "enum": [
                    "static public field",
                    "static getter",
                    "property assignment",
                  ],
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "childContextTypes": {
                      "enum": [
                        "static public field",
                        "static getter",
                        "property assignment",
                      ],
                    },
                    "contextType": {
                      "enum": [
                        "static public field",
                        "static getter",
                        "property assignment",
                      ],
                    },
                    "contextTypes": {
                      "enum": [
                        "static public field",
                        "static getter",
                        "property assignment",
                      ],
                    },
                    "defaultProps": {
                      "enum": [
                        "static public field",
                        "static getter",
                        "property assignment",
                      ],
                    },
                    "displayName": {
                      "enum": [
                        "static public field",
                        "static getter",
                        "property assignment",
                      ],
                    },
                    "propTypes": {
                      "enum": [
                        "static public field",
                        "static getter",
                        "property assignment",
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "style-prop-object": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Possible Errors",
                "description": "Enforce style prop value is an object",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/style-prop-object.md",
              },
              "messages": {
                "stylePropNotObject": "Style prop value must be an object",
              },
              "schema": [
                {
                  "properties": {
                    "allow": {
                      "additionalItems": false,
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
            },
          },
          "void-dom-elements-no-children": {
            "create": [Function],
            "meta": {
              "docs": {
                "category": "Best Practices",
                "description": "Disallow void DOM elements (e.g. \`<img />\`, \`<br />\`) from receiving children",
                "recommended": false,
                "url": "https://github.com/jsx-eslint/eslint-plugin-react/tree/master/docs/rules/void-dom-elements-no-children.md",
              },
              "messages": {
                "noChildrenInVoidEl": "Void DOM element <{{element}} /> cannot receive children.",
              },
              "schema": [],
            },
          },
        },
      },
    },
    "rules": {
      "react/display-name": 2,
      "react/jsx-key": 2,
      "react/jsx-no-comment-textnodes": 2,
      "react/jsx-no-duplicate-props": 2,
      "react/jsx-no-target-blank": 2,
      "react/jsx-no-undef": 2,
      "react/jsx-uses-react": 2,
      "react/jsx-uses-vars": 2,
      "react/no-children-prop": 2,
      "react/no-danger-with-children": 2,
      "react/no-deprecated": 2,
      "react/no-direct-mutation-state": 2,
      "react/no-find-dom-node": 2,
      "react/no-is-mounted": 2,
      "react/no-render-return-value": 2,
      "react/no-string-refs": 2,
      "react/no-unescaped-entities": 2,
      "react/no-unknown-property": 2,
      "react/no-unsafe": 0,
      "react/prop-types": 2,
      "react/react-in-jsx-scope": 2,
      "react/require-render-return": 2,
    },
  },
  {
    "rules": {
      "constructor-super": "error",
      "for-direction": "error",
      "getter-return": "error",
      "no-async-promise-executor": "error",
      "no-case-declarations": "error",
      "no-class-assign": "error",
      "no-compare-neg-zero": "error",
      "no-cond-assign": "error",
      "no-const-assign": "error",
      "no-constant-binary-expression": "error",
      "no-constant-condition": "error",
      "no-control-regex": "error",
      "no-debugger": "error",
      "no-delete-var": "error",
      "no-dupe-args": "error",
      "no-dupe-class-members": "error",
      "no-dupe-else-if": "error",
      "no-dupe-keys": "error",
      "no-duplicate-case": "error",
      "no-empty": "error",
      "no-empty-character-class": "error",
      "no-empty-pattern": "error",
      "no-empty-static-block": "error",
      "no-ex-assign": "error",
      "no-extra-boolean-cast": "error",
      "no-fallthrough": "error",
      "no-func-assign": "error",
      "no-global-assign": "error",
      "no-import-assign": "error",
      "no-invalid-regexp": "error",
      "no-irregular-whitespace": "error",
      "no-loss-of-precision": "error",
      "no-misleading-character-class": "error",
      "no-new-native-nonconstructor": "error",
      "no-nonoctal-decimal-escape": "error",
      "no-obj-calls": "error",
      "no-octal": "error",
      "no-prototype-builtins": "error",
      "no-redeclare": "error",
      "no-regex-spaces": "error",
      "no-self-assign": "error",
      "no-setter-return": "error",
      "no-shadow-restricted-names": "error",
      "no-sparse-arrays": "error",
      "no-this-before-super": "error",
      "no-undef": "error",
      "no-unexpected-multiline": "error",
      "no-unreachable": "error",
      "no-unsafe-finally": "error",
      "no-unsafe-negation": "error",
      "no-unsafe-optional-chaining": "error",
      "no-unused-labels": "error",
      "no-unused-private-class-members": "error",
      "no-unused-vars": "error",
      "no-useless-backreference": "error",
      "no-useless-catch": "error",
      "no-useless-escape": "error",
      "no-with": "error",
      "require-yield": "error",
      "use-isnan": "error",
      "valid-typeof": "error",
    },
  },
  {
    "name": "eslint-plugin-prettier/recommended",
    "plugins": {
      "prettier": {
        "configs": {
          "recommended": {
            "extends": [
              "prettier",
            ],
            "plugins": [
              "prettier",
            ],
            "rules": {
              "arrow-body-style": "off",
              "prefer-arrow-callback": "off",
              "prettier/prettier": "error",
            },
          },
        },
        "meta": {
          "name": "eslint-plugin-prettier",
          "version": "5.2.3",
        },
        "rules": {
          "prettier": {
            "create": [Function],
            "meta": {
              "docs": {
                "url": "https://github.com/prettier/eslint-plugin-prettier#options",
              },
              "fixable": "code",
              "messages": {
                "delete": "Delete \`{{ deleteText }}\`",
                "insert": "Insert \`{{ insertText }}\`",
                "replace": "Replace \`{{ deleteText }}\` with \`{{ insertText }}\`",
              },
              "schema": [
                {
                  "additionalProperties": true,
                  "properties": {},
                  "type": "object",
                },
                {
                  "additionalProperties": true,
                  "properties": {
                    "fileInfoOptions": {
                      "additionalProperties": true,
                      "properties": {},
                      "type": "object",
                    },
                    "usePrettierrc": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
        },
      },
    },
    "rules": {
      "@babel/object-curly-spacing": "off",
      "@babel/semi": "off",
      "@stylistic/array-bracket-newline": "off",
      "@stylistic/array-bracket-spacing": "off",
      "@stylistic/array-element-newline": "off",
      "@stylistic/arrow-parens": "off",
      "@stylistic/arrow-spacing": "off",
      "@stylistic/block-spacing": "off",
      "@stylistic/brace-style": "off",
      "@stylistic/comma-dangle": "off",
      "@stylistic/comma-spacing": "off",
      "@stylistic/comma-style": "off",
      "@stylistic/computed-property-spacing": "off",
      "@stylistic/dot-location": "off",
      "@stylistic/eol-last": "off",
      "@stylistic/func-call-spacing": "off",
      "@stylistic/function-call-argument-newline": "off",
      "@stylistic/function-call-spacing": "off",
      "@stylistic/function-paren-newline": "off",
      "@stylistic/generator-star-spacing": "off",
      "@stylistic/implicit-arrow-linebreak": "off",
      "@stylistic/indent": "off",
      "@stylistic/indent-binary-ops": "off",
      "@stylistic/js/array-bracket-newline": "off",
      "@stylistic/js/array-bracket-spacing": "off",
      "@stylistic/js/array-element-newline": "off",
      "@stylistic/js/arrow-parens": "off",
      "@stylistic/js/arrow-spacing": "off",
      "@stylistic/js/block-spacing": "off",
      "@stylistic/js/brace-style": "off",
      "@stylistic/js/comma-dangle": "off",
      "@stylistic/js/comma-spacing": "off",
      "@stylistic/js/comma-style": "off",
      "@stylistic/js/computed-property-spacing": "off",
      "@stylistic/js/dot-location": "off",
      "@stylistic/js/eol-last": "off",
      "@stylistic/js/func-call-spacing": "off",
      "@stylistic/js/function-call-argument-newline": "off",
      "@stylistic/js/function-call-spacing": "off",
      "@stylistic/js/function-paren-newline": "off",
      "@stylistic/js/generator-star-spacing": "off",
      "@stylistic/js/implicit-arrow-linebreak": "off",
      "@stylistic/js/indent": "off",
      "@stylistic/js/jsx-quotes": "off",
      "@stylistic/js/key-spacing": "off",
      "@stylistic/js/keyword-spacing": "off",
      "@stylistic/js/linebreak-style": "off",
      "@stylistic/js/lines-around-comment": 0,
      "@stylistic/js/max-len": 0,
      "@stylistic/js/max-statements-per-line": "off",
      "@stylistic/js/multiline-ternary": "off",
      "@stylistic/js/new-parens": "off",
      "@stylistic/js/newline-per-chained-call": "off",
      "@stylistic/js/no-confusing-arrow": 0,
      "@stylistic/js/no-extra-parens": "off",
      "@stylistic/js/no-extra-semi": "off",
      "@stylistic/js/no-floating-decimal": "off",
      "@stylistic/js/no-mixed-operators": 0,
      "@stylistic/js/no-mixed-spaces-and-tabs": "off",
      "@stylistic/js/no-multi-spaces": "off",
      "@stylistic/js/no-multiple-empty-lines": "off",
      "@stylistic/js/no-tabs": 0,
      "@stylistic/js/no-trailing-spaces": "off",
      "@stylistic/js/no-whitespace-before-property": "off",
      "@stylistic/js/nonblock-statement-body-position": "off",
      "@stylistic/js/object-curly-newline": "off",
      "@stylistic/js/object-curly-spacing": "off",
      "@stylistic/js/object-property-newline": "off",
      "@stylistic/js/one-var-declaration-per-line": "off",
      "@stylistic/js/operator-linebreak": "off",
      "@stylistic/js/padded-blocks": "off",
      "@stylistic/js/quote-props": "off",
      "@stylistic/js/quotes": 0,
      "@stylistic/js/rest-spread-spacing": "off",
      "@stylistic/js/semi": "off",
      "@stylistic/js/semi-spacing": "off",
      "@stylistic/js/semi-style": "off",
      "@stylistic/js/space-before-blocks": "off",
      "@stylistic/js/space-before-function-paren": "off",
      "@stylistic/js/space-in-parens": "off",
      "@stylistic/js/space-infix-ops": "off",
      "@stylistic/js/space-unary-ops": "off",
      "@stylistic/js/switch-colon-spacing": "off",
      "@stylistic/js/template-curly-spacing": "off",
      "@stylistic/js/template-tag-spacing": "off",
      "@stylistic/js/wrap-iife": "off",
      "@stylistic/js/wrap-regex": "off",
      "@stylistic/js/yield-star-spacing": "off",
      "@stylistic/jsx-child-element-spacing": "off",
      "@stylistic/jsx-closing-bracket-location": "off",
      "@stylistic/jsx-closing-tag-location": "off",
      "@stylistic/jsx-curly-newline": "off",
      "@stylistic/jsx-curly-spacing": "off",
      "@stylistic/jsx-equals-spacing": "off",
      "@stylistic/jsx-first-prop-new-line": "off",
      "@stylistic/jsx-indent": "off",
      "@stylistic/jsx-indent-props": "off",
      "@stylistic/jsx-max-props-per-line": "off",
      "@stylistic/jsx-newline": "off",
      "@stylistic/jsx-one-expression-per-line": "off",
      "@stylistic/jsx-props-no-multi-spaces": "off",
      "@stylistic/jsx-quotes": "off",
      "@stylistic/jsx-tag-spacing": "off",
      "@stylistic/jsx-wrap-multilines": "off",
      "@stylistic/jsx/jsx-child-element-spacing": "off",
      "@stylistic/jsx/jsx-closing-bracket-location": "off",
      "@stylistic/jsx/jsx-closing-tag-location": "off",
      "@stylistic/jsx/jsx-curly-newline": "off",
      "@stylistic/jsx/jsx-curly-spacing": "off",
      "@stylistic/jsx/jsx-equals-spacing": "off",
      "@stylistic/jsx/jsx-first-prop-new-line": "off",
      "@stylistic/jsx/jsx-indent": "off",
      "@stylistic/jsx/jsx-indent-props": "off",
      "@stylistic/jsx/jsx-max-props-per-line": "off",
      "@stylistic/key-spacing": "off",
      "@stylistic/keyword-spacing": "off",
      "@stylistic/linebreak-style": "off",
      "@stylistic/lines-around-comment": 0,
      "@stylistic/max-len": 0,
      "@stylistic/max-statements-per-line": "off",
      "@stylistic/member-delimiter-style": "off",
      "@stylistic/multiline-ternary": "off",
      "@stylistic/new-parens": "off",
      "@stylistic/newline-per-chained-call": "off",
      "@stylistic/no-confusing-arrow": 0,
      "@stylistic/no-extra-parens": "off",
      "@stylistic/no-extra-semi": "off",
      "@stylistic/no-floating-decimal": "off",
      "@stylistic/no-mixed-operators": 0,
      "@stylistic/no-mixed-spaces-and-tabs": "off",
      "@stylistic/no-multi-spaces": "off",
      "@stylistic/no-multiple-empty-lines": "off",
      "@stylistic/no-tabs": 0,
      "@stylistic/no-trailing-spaces": "off",
      "@stylistic/no-whitespace-before-property": "off",
      "@stylistic/nonblock-statement-body-position": "off",
      "@stylistic/object-curly-newline": "off",
      "@stylistic/object-curly-spacing": "off",
      "@stylistic/object-property-newline": "off",
      "@stylistic/one-var-declaration-per-line": "off",
      "@stylistic/operator-linebreak": "off",
      "@stylistic/padded-blocks": "off",
      "@stylistic/quote-props": "off",
      "@stylistic/quotes": 0,
      "@stylistic/rest-spread-spacing": "off",
      "@stylistic/semi": "off",
      "@stylistic/semi-spacing": "off",
      "@stylistic/semi-style": "off",
      "@stylistic/space-before-blocks": "off",
      "@stylistic/space-before-function-paren": "off",
      "@stylistic/space-in-parens": "off",
      "@stylistic/space-infix-ops": "off",
      "@stylistic/space-unary-ops": "off",
      "@stylistic/switch-colon-spacing": "off",
      "@stylistic/template-curly-spacing": "off",
      "@stylistic/template-tag-spacing": "off",
      "@stylistic/ts/block-spacing": "off",
      "@stylistic/ts/brace-style": "off",
      "@stylistic/ts/comma-dangle": "off",
      "@stylistic/ts/comma-spacing": "off",
      "@stylistic/ts/func-call-spacing": "off",
      "@stylistic/ts/function-call-spacing": "off",
      "@stylistic/ts/indent": "off",
      "@stylistic/ts/key-spacing": "off",
      "@stylistic/ts/keyword-spacing": "off",
      "@stylistic/ts/lines-around-comment": 0,
      "@stylistic/ts/member-delimiter-style": "off",
      "@stylistic/ts/no-extra-parens": "off",
      "@stylistic/ts/no-extra-semi": "off",
      "@stylistic/ts/object-curly-spacing": "off",
      "@stylistic/ts/quotes": 0,
      "@stylistic/ts/semi": "off",
      "@stylistic/ts/space-before-blocks": "off",
      "@stylistic/ts/space-before-function-paren": "off",
      "@stylistic/ts/space-infix-ops": "off",
      "@stylistic/ts/type-annotation-spacing": "off",
      "@stylistic/type-annotation-spacing": "off",
      "@stylistic/type-generic-spacing": "off",
      "@stylistic/type-named-tuple-spacing": "off",
      "@stylistic/wrap-iife": "off",
      "@stylistic/wrap-regex": "off",
      "@stylistic/yield-star-spacing": "off",
      "@typescript-eslint/block-spacing": "off",
      "@typescript-eslint/brace-style": "off",
      "@typescript-eslint/comma-dangle": "off",
      "@typescript-eslint/comma-spacing": "off",
      "@typescript-eslint/func-call-spacing": "off",
      "@typescript-eslint/indent": "off",
      "@typescript-eslint/key-spacing": "off",
      "@typescript-eslint/keyword-spacing": "off",
      "@typescript-eslint/lines-around-comment": 0,
      "@typescript-eslint/member-delimiter-style": "off",
      "@typescript-eslint/no-extra-parens": "off",
      "@typescript-eslint/no-extra-semi": "off",
      "@typescript-eslint/object-curly-spacing": "off",
      "@typescript-eslint/quotes": 0,
      "@typescript-eslint/semi": "off",
      "@typescript-eslint/space-before-blocks": "off",
      "@typescript-eslint/space-before-function-paren": "off",
      "@typescript-eslint/space-infix-ops": "off",
      "@typescript-eslint/type-annotation-spacing": "off",
      "array-bracket-newline": "off",
      "array-bracket-spacing": "off",
      "array-element-newline": "off",
      "arrow-body-style": "off",
      "arrow-parens": "off",
      "arrow-spacing": "off",
      "babel/object-curly-spacing": "off",
      "babel/quotes": 0,
      "babel/semi": "off",
      "block-spacing": "off",
      "brace-style": "off",
      "comma-dangle": "off",
      "comma-spacing": "off",
      "comma-style": "off",
      "computed-property-spacing": "off",
      "curly": 0,
      "dot-location": "off",
      "eol-last": "off",
      "flowtype/boolean-style": "off",
      "flowtype/delimiter-dangle": "off",
      "flowtype/generic-spacing": "off",
      "flowtype/object-type-curly-spacing": "off",
      "flowtype/object-type-delimiter": "off",
      "flowtype/quotes": "off",
      "flowtype/semi": "off",
      "flowtype/space-after-type-colon": "off",
      "flowtype/space-before-generic-bracket": "off",
      "flowtype/space-before-type-colon": "off",
      "flowtype/union-intersection-spacing": "off",
      "func-call-spacing": "off",
      "function-call-argument-newline": "off",
      "function-paren-newline": "off",
      "generator-star": "off",
      "generator-star-spacing": "off",
      "implicit-arrow-linebreak": "off",
      "indent": "off",
      "indent-legacy": "off",
      "jsx-quotes": "off",
      "key-spacing": "off",
      "keyword-spacing": "off",
      "linebreak-style": "off",
      "lines-around-comment": 0,
      "max-len": 0,
      "max-statements-per-line": "off",
      "multiline-ternary": "off",
      "new-parens": "off",
      "newline-per-chained-call": "off",
      "no-arrow-condition": "off",
      "no-comma-dangle": "off",
      "no-confusing-arrow": 0,
      "no-extra-parens": "off",
      "no-extra-semi": "off",
      "no-floating-decimal": "off",
      "no-mixed-operators": 0,
      "no-mixed-spaces-and-tabs": "off",
      "no-multi-spaces": "off",
      "no-multiple-empty-lines": "off",
      "no-reserved-keys": "off",
      "no-space-before-semi": "off",
      "no-spaced-func": "off",
      "no-tabs": 0,
      "no-trailing-spaces": "off",
      "no-unexpected-multiline": 0,
      "no-whitespace-before-property": "off",
      "no-wrap-func": "off",
      "nonblock-statement-body-position": "off",
      "object-curly-newline": "off",
      "object-curly-spacing": "off",
      "object-property-newline": "off",
      "one-var-declaration-per-line": "off",
      "operator-linebreak": "off",
      "padded-blocks": "off",
      "prefer-arrow-callback": "off",
      "prettier/prettier": "error",
      "quote-props": "off",
      "quotes": 0,
      "react/jsx-child-element-spacing": "off",
      "react/jsx-closing-bracket-location": "off",
      "react/jsx-closing-tag-location": "off",
      "react/jsx-curly-newline": "off",
      "react/jsx-curly-spacing": "off",
      "react/jsx-equals-spacing": "off",
      "react/jsx-first-prop-new-line": "off",
      "react/jsx-indent": "off",
      "react/jsx-indent-props": "off",
      "react/jsx-max-props-per-line": "off",
      "react/jsx-newline": "off",
      "react/jsx-one-expression-per-line": "off",
      "react/jsx-props-no-multi-spaces": "off",
      "react/jsx-space-before-closing": "off",
      "react/jsx-tag-spacing": "off",
      "react/jsx-wrap-multilines": "off",
      "rest-spread-spacing": "off",
      "semi": "off",
      "semi-spacing": "off",
      "semi-style": "off",
      "space-after-function-name": "off",
      "space-after-keywords": "off",
      "space-before-blocks": "off",
      "space-before-function-paren": "off",
      "space-before-function-parentheses": "off",
      "space-before-keywords": "off",
      "space-in-brackets": "off",
      "space-in-parens": "off",
      "space-infix-ops": "off",
      "space-return-throw-case": "off",
      "space-unary-ops": "off",
      "space-unary-word-ops": "off",
      "standard/array-bracket-even-spacing": "off",
      "standard/computed-property-even-spacing": "off",
      "standard/object-curly-even-spacing": "off",
      "switch-colon-spacing": "off",
      "template-curly-spacing": "off",
      "template-tag-spacing": "off",
      "unicorn/empty-brace-spaces": "off",
      "unicorn/no-nested-ternary": "off",
      "unicorn/number-literal-case": "off",
      "unicorn/template-indent": 0,
      "vue/array-bracket-newline": "off",
      "vue/array-bracket-spacing": "off",
      "vue/array-element-newline": "off",
      "vue/arrow-spacing": "off",
      "vue/block-spacing": "off",
      "vue/block-tag-newline": "off",
      "vue/brace-style": "off",
      "vue/comma-dangle": "off",
      "vue/comma-spacing": "off",
      "vue/comma-style": "off",
      "vue/dot-location": "off",
      "vue/func-call-spacing": "off",
      "vue/html-closing-bracket-newline": "off",
      "vue/html-closing-bracket-spacing": "off",
      "vue/html-end-tags": "off",
      "vue/html-indent": "off",
      "vue/html-quotes": "off",
      "vue/html-self-closing": 0,
      "vue/key-spacing": "off",
      "vue/keyword-spacing": "off",
      "vue/max-attributes-per-line": "off",
      "vue/max-len": 0,
      "vue/multiline-html-element-content-newline": "off",
      "vue/multiline-ternary": "off",
      "vue/mustache-interpolation-spacing": "off",
      "vue/no-extra-parens": "off",
      "vue/no-multi-spaces": "off",
      "vue/no-spaces-around-equal-signs-in-attribute": "off",
      "vue/object-curly-newline": "off",
      "vue/object-curly-spacing": "off",
      "vue/object-property-newline": "off",
      "vue/operator-linebreak": "off",
      "vue/quote-props": "off",
      "vue/script-indent": "off",
      "vue/singleline-html-element-content-newline": "off",
      "vue/space-in-parens": "off",
      "vue/space-infix-ops": "off",
      "vue/space-unary-ops": "off",
      "vue/template-curly-spacing": "off",
      "wrap-iife": "off",
      "wrap-regex": "off",
      "yield-star-spacing": "off",
    },
  },
  {
    "languageOptions": {
      "parser": {
        "meta": {
          "name": "typescript-eslint/parser",
          "version": "8.27.0",
        },
        "parseForESLint": [Function],
      },
      "sourceType": "module",
    },
    "name": "typescript-eslint/base",
    "plugins": {
      "@typescript-eslint": {
        "configs": {
          "all": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended",
            ],
            "rules": {
              "@typescript-eslint/adjacent-overload-signatures": "error",
              "@typescript-eslint/array-type": "error",
              "@typescript-eslint/await-thenable": "error",
              "@typescript-eslint/ban-ts-comment": "error",
              "@typescript-eslint/ban-tslint-comment": "error",
              "@typescript-eslint/class-literal-property-style": "error",
              "@typescript-eslint/class-methods-use-this": "error",
              "@typescript-eslint/consistent-generic-constructors": "error",
              "@typescript-eslint/consistent-indexed-object-style": "error",
              "@typescript-eslint/consistent-return": "error",
              "@typescript-eslint/consistent-type-assertions": "error",
              "@typescript-eslint/consistent-type-definitions": "error",
              "@typescript-eslint/consistent-type-exports": "error",
              "@typescript-eslint/consistent-type-imports": "error",
              "@typescript-eslint/default-param-last": "error",
              "@typescript-eslint/dot-notation": "error",
              "@typescript-eslint/explicit-function-return-type": "error",
              "@typescript-eslint/explicit-member-accessibility": "error",
              "@typescript-eslint/explicit-module-boundary-types": "error",
              "@typescript-eslint/init-declarations": "error",
              "@typescript-eslint/max-params": "error",
              "@typescript-eslint/member-ordering": "error",
              "@typescript-eslint/method-signature-style": "error",
              "@typescript-eslint/naming-convention": "error",
              "@typescript-eslint/no-array-constructor": "error",
              "@typescript-eslint/no-array-delete": "error",
              "@typescript-eslint/no-base-to-string": "error",
              "@typescript-eslint/no-confusing-non-null-assertion": "error",
              "@typescript-eslint/no-confusing-void-expression": "error",
              "@typescript-eslint/no-deprecated": "error",
              "@typescript-eslint/no-dupe-class-members": "error",
              "@typescript-eslint/no-duplicate-enum-values": "error",
              "@typescript-eslint/no-duplicate-type-constituents": "error",
              "@typescript-eslint/no-dynamic-delete": "error",
              "@typescript-eslint/no-empty-function": "error",
              "@typescript-eslint/no-empty-object-type": "error",
              "@typescript-eslint/no-explicit-any": "error",
              "@typescript-eslint/no-extra-non-null-assertion": "error",
              "@typescript-eslint/no-extraneous-class": "error",
              "@typescript-eslint/no-floating-promises": "error",
              "@typescript-eslint/no-for-in-array": "error",
              "@typescript-eslint/no-implied-eval": "error",
              "@typescript-eslint/no-import-type-side-effects": "error",
              "@typescript-eslint/no-inferrable-types": "error",
              "@typescript-eslint/no-invalid-this": "error",
              "@typescript-eslint/no-invalid-void-type": "error",
              "@typescript-eslint/no-loop-func": "error",
              "@typescript-eslint/no-magic-numbers": "error",
              "@typescript-eslint/no-meaningless-void-operator": "error",
              "@typescript-eslint/no-misused-new": "error",
              "@typescript-eslint/no-misused-promises": "error",
              "@typescript-eslint/no-misused-spread": "error",
              "@typescript-eslint/no-mixed-enums": "error",
              "@typescript-eslint/no-namespace": "error",
              "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
              "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
              "@typescript-eslint/no-non-null-assertion": "error",
              "@typescript-eslint/no-redeclare": "error",
              "@typescript-eslint/no-redundant-type-constituents": "error",
              "@typescript-eslint/no-require-imports": "error",
              "@typescript-eslint/no-restricted-imports": "error",
              "@typescript-eslint/no-restricted-types": "error",
              "@typescript-eslint/no-shadow": "error",
              "@typescript-eslint/no-this-alias": "error",
              "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
              "@typescript-eslint/no-unnecessary-condition": "error",
              "@typescript-eslint/no-unnecessary-parameter-property-assignment": "error",
              "@typescript-eslint/no-unnecessary-qualifier": "error",
              "@typescript-eslint/no-unnecessary-template-expression": "error",
              "@typescript-eslint/no-unnecessary-type-arguments": "error",
              "@typescript-eslint/no-unnecessary-type-assertion": "error",
              "@typescript-eslint/no-unnecessary-type-constraint": "error",
              "@typescript-eslint/no-unnecessary-type-parameters": "error",
              "@typescript-eslint/no-unsafe-argument": "error",
              "@typescript-eslint/no-unsafe-assignment": "error",
              "@typescript-eslint/no-unsafe-call": "error",
              "@typescript-eslint/no-unsafe-declaration-merging": "error",
              "@typescript-eslint/no-unsafe-enum-comparison": "error",
              "@typescript-eslint/no-unsafe-function-type": "error",
              "@typescript-eslint/no-unsafe-member-access": "error",
              "@typescript-eslint/no-unsafe-return": "error",
              "@typescript-eslint/no-unsafe-type-assertion": "error",
              "@typescript-eslint/no-unsafe-unary-minus": "error",
              "@typescript-eslint/no-unused-expressions": "error",
              "@typescript-eslint/no-unused-vars": "error",
              "@typescript-eslint/no-use-before-define": "error",
              "@typescript-eslint/no-useless-constructor": "error",
              "@typescript-eslint/no-useless-empty-export": "error",
              "@typescript-eslint/no-wrapper-object-types": "error",
              "@typescript-eslint/non-nullable-type-assertion-style": "error",
              "@typescript-eslint/only-throw-error": "error",
              "@typescript-eslint/parameter-properties": "error",
              "@typescript-eslint/prefer-as-const": "error",
              "@typescript-eslint/prefer-destructuring": "error",
              "@typescript-eslint/prefer-enum-initializers": "error",
              "@typescript-eslint/prefer-find": "error",
              "@typescript-eslint/prefer-for-of": "error",
              "@typescript-eslint/prefer-function-type": "error",
              "@typescript-eslint/prefer-includes": "error",
              "@typescript-eslint/prefer-literal-enum-member": "error",
              "@typescript-eslint/prefer-namespace-keyword": "error",
              "@typescript-eslint/prefer-nullish-coalescing": "error",
              "@typescript-eslint/prefer-optional-chain": "error",
              "@typescript-eslint/prefer-promise-reject-errors": "error",
              "@typescript-eslint/prefer-readonly": "error",
              "@typescript-eslint/prefer-readonly-parameter-types": "error",
              "@typescript-eslint/prefer-reduce-type-parameter": "error",
              "@typescript-eslint/prefer-regexp-exec": "error",
              "@typescript-eslint/prefer-return-this-type": "error",
              "@typescript-eslint/prefer-string-starts-ends-with": "error",
              "@typescript-eslint/promise-function-async": "error",
              "@typescript-eslint/related-getter-setter-pairs": "error",
              "@typescript-eslint/require-array-sort-compare": "error",
              "@typescript-eslint/require-await": "error",
              "@typescript-eslint/restrict-plus-operands": "error",
              "@typescript-eslint/restrict-template-expressions": "error",
              "@typescript-eslint/return-await": "error",
              "@typescript-eslint/strict-boolean-expressions": "error",
              "@typescript-eslint/switch-exhaustiveness-check": "error",
              "@typescript-eslint/triple-slash-reference": "error",
              "@typescript-eslint/typedef": "error",
              "@typescript-eslint/unbound-method": "error",
              "@typescript-eslint/unified-signatures": "error",
              "@typescript-eslint/use-unknown-in-catch-callback-variable": "error",
              "class-methods-use-this": "off",
              "consistent-return": "off",
              "default-param-last": "off",
              "dot-notation": "off",
              "init-declarations": "off",
              "max-params": "off",
              "no-array-constructor": "off",
              "no-dupe-class-members": "off",
              "no-empty-function": "off",
              "no-implied-eval": "off",
              "no-invalid-this": "off",
              "no-loop-func": "off",
              "no-magic-numbers": "off",
              "no-redeclare": "off",
              "no-restricted-imports": "off",
              "no-return-await": "off",
              "no-shadow": "off",
              "no-throw-literal": "off",
              "no-unused-expressions": "off",
              "no-unused-vars": "off",
              "no-use-before-define": "off",
              "no-useless-constructor": "off",
              "prefer-destructuring": "off",
              "prefer-promise-reject-errors": "off",
              "require-await": "off",
            },
          },
          "base": {
            "parser": "@typescript-eslint/parser",
            "parserOptions": {
              "sourceType": "module",
            },
            "plugins": [
              "@typescript-eslint",
            ],
          },
          "disable-type-checked": {
            "parserOptions": {
              "program": null,
              "project": false,
              "projectService": false,
            },
            "rules": {
              "@typescript-eslint/await-thenable": "off",
              "@typescript-eslint/consistent-return": "off",
              "@typescript-eslint/consistent-type-exports": "off",
              "@typescript-eslint/dot-notation": "off",
              "@typescript-eslint/naming-convention": "off",
              "@typescript-eslint/no-array-delete": "off",
              "@typescript-eslint/no-base-to-string": "off",
              "@typescript-eslint/no-confusing-void-expression": "off",
              "@typescript-eslint/no-deprecated": "off",
              "@typescript-eslint/no-duplicate-type-constituents": "off",
              "@typescript-eslint/no-floating-promises": "off",
              "@typescript-eslint/no-for-in-array": "off",
              "@typescript-eslint/no-implied-eval": "off",
              "@typescript-eslint/no-meaningless-void-operator": "off",
              "@typescript-eslint/no-misused-promises": "off",
              "@typescript-eslint/no-misused-spread": "off",
              "@typescript-eslint/no-mixed-enums": "off",
              "@typescript-eslint/no-redundant-type-constituents": "off",
              "@typescript-eslint/no-unnecessary-boolean-literal-compare": "off",
              "@typescript-eslint/no-unnecessary-condition": "off",
              "@typescript-eslint/no-unnecessary-qualifier": "off",
              "@typescript-eslint/no-unnecessary-template-expression": "off",
              "@typescript-eslint/no-unnecessary-type-arguments": "off",
              "@typescript-eslint/no-unnecessary-type-assertion": "off",
              "@typescript-eslint/no-unnecessary-type-parameters": "off",
              "@typescript-eslint/no-unsafe-argument": "off",
              "@typescript-eslint/no-unsafe-assignment": "off",
              "@typescript-eslint/no-unsafe-call": "off",
              "@typescript-eslint/no-unsafe-enum-comparison": "off",
              "@typescript-eslint/no-unsafe-member-access": "off",
              "@typescript-eslint/no-unsafe-return": "off",
              "@typescript-eslint/no-unsafe-type-assertion": "off",
              "@typescript-eslint/no-unsafe-unary-minus": "off",
              "@typescript-eslint/non-nullable-type-assertion-style": "off",
              "@typescript-eslint/only-throw-error": "off",
              "@typescript-eslint/prefer-destructuring": "off",
              "@typescript-eslint/prefer-find": "off",
              "@typescript-eslint/prefer-includes": "off",
              "@typescript-eslint/prefer-nullish-coalescing": "off",
              "@typescript-eslint/prefer-optional-chain": "off",
              "@typescript-eslint/prefer-promise-reject-errors": "off",
              "@typescript-eslint/prefer-readonly": "off",
              "@typescript-eslint/prefer-readonly-parameter-types": "off",
              "@typescript-eslint/prefer-reduce-type-parameter": "off",
              "@typescript-eslint/prefer-regexp-exec": "off",
              "@typescript-eslint/prefer-return-this-type": "off",
              "@typescript-eslint/prefer-string-starts-ends-with": "off",
              "@typescript-eslint/promise-function-async": "off",
              "@typescript-eslint/related-getter-setter-pairs": "off",
              "@typescript-eslint/require-array-sort-compare": "off",
              "@typescript-eslint/require-await": "off",
              "@typescript-eslint/restrict-plus-operands": "off",
              "@typescript-eslint/restrict-template-expressions": "off",
              "@typescript-eslint/return-await": "off",
              "@typescript-eslint/strict-boolean-expressions": "off",
              "@typescript-eslint/switch-exhaustiveness-check": "off",
              "@typescript-eslint/unbound-method": "off",
              "@typescript-eslint/use-unknown-in-catch-callback-variable": "off",
            },
          },
          "eslint-recommended": {
            "overrides": [
              {
                "files": [
                  "*.ts",
                  "*.tsx",
                  "*.mts",
                  "*.cts",
                ],
                "rules": {
                  "constructor-super": "off",
                  "getter-return": "off",
                  "no-class-assign": "off",
                  "no-const-assign": "off",
                  "no-dupe-args": "off",
                  "no-dupe-class-members": "off",
                  "no-dupe-keys": "off",
                  "no-func-assign": "off",
                  "no-import-assign": "off",
                  "no-new-native-nonconstructor": "off",
                  "no-new-symbol": "off",
                  "no-obj-calls": "off",
                  "no-redeclare": "off",
                  "no-setter-return": "off",
                  "no-this-before-super": "off",
                  "no-undef": "off",
                  "no-unreachable": "off",
                  "no-unsafe-negation": "off",
                  "no-var": "error",
                  "prefer-const": "error",
                  "prefer-rest-params": "error",
                  "prefer-spread": "error",
                },
              },
            ],
          },
          "recommended": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended",
            ],
            "rules": {
              "@typescript-eslint/ban-ts-comment": "error",
              "@typescript-eslint/no-array-constructor": "error",
              "@typescript-eslint/no-duplicate-enum-values": "error",
              "@typescript-eslint/no-empty-object-type": "error",
              "@typescript-eslint/no-explicit-any": "error",
              "@typescript-eslint/no-extra-non-null-assertion": "error",
              "@typescript-eslint/no-misused-new": "error",
              "@typescript-eslint/no-namespace": "error",
              "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
              "@typescript-eslint/no-require-imports": "error",
              "@typescript-eslint/no-this-alias": "error",
              "@typescript-eslint/no-unnecessary-type-constraint": "error",
              "@typescript-eslint/no-unsafe-declaration-merging": "error",
              "@typescript-eslint/no-unsafe-function-type": "error",
              "@typescript-eslint/no-unused-expressions": "error",
              "@typescript-eslint/no-unused-vars": "error",
              "@typescript-eslint/no-wrapper-object-types": "error",
              "@typescript-eslint/prefer-as-const": "error",
              "@typescript-eslint/prefer-namespace-keyword": "error",
              "@typescript-eslint/triple-slash-reference": "error",
              "no-array-constructor": "off",
              "no-unused-expressions": "off",
              "no-unused-vars": "off",
            },
          },
          "recommended-requiring-type-checking": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended",
            ],
            "rules": {
              "@typescript-eslint/await-thenable": "error",
              "@typescript-eslint/ban-ts-comment": "error",
              "@typescript-eslint/no-array-constructor": "error",
              "@typescript-eslint/no-array-delete": "error",
              "@typescript-eslint/no-base-to-string": "error",
              "@typescript-eslint/no-duplicate-enum-values": "error",
              "@typescript-eslint/no-duplicate-type-constituents": "error",
              "@typescript-eslint/no-empty-object-type": "error",
              "@typescript-eslint/no-explicit-any": "error",
              "@typescript-eslint/no-extra-non-null-assertion": "error",
              "@typescript-eslint/no-floating-promises": "error",
              "@typescript-eslint/no-for-in-array": "error",
              "@typescript-eslint/no-implied-eval": "error",
              "@typescript-eslint/no-misused-new": "error",
              "@typescript-eslint/no-misused-promises": "error",
              "@typescript-eslint/no-namespace": "error",
              "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
              "@typescript-eslint/no-redundant-type-constituents": "error",
              "@typescript-eslint/no-require-imports": "error",
              "@typescript-eslint/no-this-alias": "error",
              "@typescript-eslint/no-unnecessary-type-assertion": "error",
              "@typescript-eslint/no-unnecessary-type-constraint": "error",
              "@typescript-eslint/no-unsafe-argument": "error",
              "@typescript-eslint/no-unsafe-assignment": "error",
              "@typescript-eslint/no-unsafe-call": "error",
              "@typescript-eslint/no-unsafe-declaration-merging": "error",
              "@typescript-eslint/no-unsafe-enum-comparison": "error",
              "@typescript-eslint/no-unsafe-function-type": "error",
              "@typescript-eslint/no-unsafe-member-access": "error",
              "@typescript-eslint/no-unsafe-return": "error",
              "@typescript-eslint/no-unsafe-unary-minus": "error",
              "@typescript-eslint/no-unused-expressions": "error",
              "@typescript-eslint/no-unused-vars": "error",
              "@typescript-eslint/no-wrapper-object-types": "error",
              "@typescript-eslint/only-throw-error": "error",
              "@typescript-eslint/prefer-as-const": "error",
              "@typescript-eslint/prefer-namespace-keyword": "error",
              "@typescript-eslint/prefer-promise-reject-errors": "error",
              "@typescript-eslint/require-await": "error",
              "@typescript-eslint/restrict-plus-operands": "error",
              "@typescript-eslint/restrict-template-expressions": "error",
              "@typescript-eslint/triple-slash-reference": "error",
              "@typescript-eslint/unbound-method": "error",
              "no-array-constructor": "off",
              "no-implied-eval": "off",
              "no-throw-literal": "off",
              "no-unused-expressions": "off",
              "no-unused-vars": "off",
              "prefer-promise-reject-errors": "off",
              "require-await": "off",
            },
          },
          "recommended-type-checked": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended",
            ],
            "rules": {
              "@typescript-eslint/await-thenable": "error",
              "@typescript-eslint/ban-ts-comment": "error",
              "@typescript-eslint/no-array-constructor": "error",
              "@typescript-eslint/no-array-delete": "error",
              "@typescript-eslint/no-base-to-string": "error",
              "@typescript-eslint/no-duplicate-enum-values": "error",
              "@typescript-eslint/no-duplicate-type-constituents": "error",
              "@typescript-eslint/no-empty-object-type": "error",
              "@typescript-eslint/no-explicit-any": "error",
              "@typescript-eslint/no-extra-non-null-assertion": "error",
              "@typescript-eslint/no-floating-promises": "error",
              "@typescript-eslint/no-for-in-array": "error",
              "@typescript-eslint/no-implied-eval": "error",
              "@typescript-eslint/no-misused-new": "error",
              "@typescript-eslint/no-misused-promises": "error",
              "@typescript-eslint/no-namespace": "error",
              "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
              "@typescript-eslint/no-redundant-type-constituents": "error",
              "@typescript-eslint/no-require-imports": "error",
              "@typescript-eslint/no-this-alias": "error",
              "@typescript-eslint/no-unnecessary-type-assertion": "error",
              "@typescript-eslint/no-unnecessary-type-constraint": "error",
              "@typescript-eslint/no-unsafe-argument": "error",
              "@typescript-eslint/no-unsafe-assignment": "error",
              "@typescript-eslint/no-unsafe-call": "error",
              "@typescript-eslint/no-unsafe-declaration-merging": "error",
              "@typescript-eslint/no-unsafe-enum-comparison": "error",
              "@typescript-eslint/no-unsafe-function-type": "error",
              "@typescript-eslint/no-unsafe-member-access": "error",
              "@typescript-eslint/no-unsafe-return": "error",
              "@typescript-eslint/no-unsafe-unary-minus": "error",
              "@typescript-eslint/no-unused-expressions": "error",
              "@typescript-eslint/no-unused-vars": "error",
              "@typescript-eslint/no-wrapper-object-types": "error",
              "@typescript-eslint/only-throw-error": "error",
              "@typescript-eslint/prefer-as-const": "error",
              "@typescript-eslint/prefer-namespace-keyword": "error",
              "@typescript-eslint/prefer-promise-reject-errors": "error",
              "@typescript-eslint/require-await": "error",
              "@typescript-eslint/restrict-plus-operands": "error",
              "@typescript-eslint/restrict-template-expressions": "error",
              "@typescript-eslint/triple-slash-reference": "error",
              "@typescript-eslint/unbound-method": "error",
              "no-array-constructor": "off",
              "no-implied-eval": "off",
              "no-throw-literal": "off",
              "no-unused-expressions": "off",
              "no-unused-vars": "off",
              "prefer-promise-reject-errors": "off",
              "require-await": "off",
            },
          },
          "recommended-type-checked-only": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended",
            ],
            "rules": {
              "@typescript-eslint/await-thenable": "error",
              "@typescript-eslint/no-array-delete": "error",
              "@typescript-eslint/no-base-to-string": "error",
              "@typescript-eslint/no-duplicate-type-constituents": "error",
              "@typescript-eslint/no-floating-promises": "error",
              "@typescript-eslint/no-for-in-array": "error",
              "@typescript-eslint/no-implied-eval": "error",
              "@typescript-eslint/no-misused-promises": "error",
              "@typescript-eslint/no-redundant-type-constituents": "error",
              "@typescript-eslint/no-unnecessary-type-assertion": "error",
              "@typescript-eslint/no-unsafe-argument": "error",
              "@typescript-eslint/no-unsafe-assignment": "error",
              "@typescript-eslint/no-unsafe-call": "error",
              "@typescript-eslint/no-unsafe-enum-comparison": "error",
              "@typescript-eslint/no-unsafe-member-access": "error",
              "@typescript-eslint/no-unsafe-return": "error",
              "@typescript-eslint/no-unsafe-unary-minus": "error",
              "@typescript-eslint/only-throw-error": "error",
              "@typescript-eslint/prefer-promise-reject-errors": "error",
              "@typescript-eslint/require-await": "error",
              "@typescript-eslint/restrict-plus-operands": "error",
              "@typescript-eslint/restrict-template-expressions": "error",
              "@typescript-eslint/unbound-method": "error",
              "no-implied-eval": "off",
              "no-throw-literal": "off",
              "prefer-promise-reject-errors": "off",
              "require-await": "off",
            },
          },
          "strict": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended",
            ],
            "rules": {
              "@typescript-eslint/ban-ts-comment": [
                "error",
                {
                  "minimumDescriptionLength": 10,
                },
              ],
              "@typescript-eslint/no-array-constructor": "error",
              "@typescript-eslint/no-duplicate-enum-values": "error",
              "@typescript-eslint/no-dynamic-delete": "error",
              "@typescript-eslint/no-empty-object-type": "error",
              "@typescript-eslint/no-explicit-any": "error",
              "@typescript-eslint/no-extra-non-null-assertion": "error",
              "@typescript-eslint/no-extraneous-class": "error",
              "@typescript-eslint/no-invalid-void-type": "error",
              "@typescript-eslint/no-misused-new": "error",
              "@typescript-eslint/no-namespace": "error",
              "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
              "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
              "@typescript-eslint/no-non-null-assertion": "error",
              "@typescript-eslint/no-require-imports": "error",
              "@typescript-eslint/no-this-alias": "error",
              "@typescript-eslint/no-unnecessary-type-constraint": "error",
              "@typescript-eslint/no-unsafe-declaration-merging": "error",
              "@typescript-eslint/no-unsafe-function-type": "error",
              "@typescript-eslint/no-unused-expressions": "error",
              "@typescript-eslint/no-unused-vars": "error",
              "@typescript-eslint/no-useless-constructor": "error",
              "@typescript-eslint/no-wrapper-object-types": "error",
              "@typescript-eslint/prefer-as-const": "error",
              "@typescript-eslint/prefer-literal-enum-member": "error",
              "@typescript-eslint/prefer-namespace-keyword": "error",
              "@typescript-eslint/triple-slash-reference": "error",
              "@typescript-eslint/unified-signatures": "error",
              "no-array-constructor": "off",
              "no-unused-expressions": "off",
              "no-unused-vars": "off",
              "no-useless-constructor": "off",
            },
          },
          "strict-type-checked": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended",
            ],
            "rules": {
              "@typescript-eslint/await-thenable": "error",
              "@typescript-eslint/ban-ts-comment": [
                "error",
                {
                  "minimumDescriptionLength": 10,
                },
              ],
              "@typescript-eslint/no-array-constructor": "error",
              "@typescript-eslint/no-array-delete": "error",
              "@typescript-eslint/no-base-to-string": "error",
              "@typescript-eslint/no-confusing-void-expression": "error",
              "@typescript-eslint/no-deprecated": "error",
              "@typescript-eslint/no-duplicate-enum-values": "error",
              "@typescript-eslint/no-duplicate-type-constituents": "error",
              "@typescript-eslint/no-dynamic-delete": "error",
              "@typescript-eslint/no-empty-object-type": "error",
              "@typescript-eslint/no-explicit-any": "error",
              "@typescript-eslint/no-extra-non-null-assertion": "error",
              "@typescript-eslint/no-extraneous-class": "error",
              "@typescript-eslint/no-floating-promises": "error",
              "@typescript-eslint/no-for-in-array": "error",
              "@typescript-eslint/no-implied-eval": "error",
              "@typescript-eslint/no-invalid-void-type": "error",
              "@typescript-eslint/no-meaningless-void-operator": "error",
              "@typescript-eslint/no-misused-new": "error",
              "@typescript-eslint/no-misused-promises": "error",
              "@typescript-eslint/no-misused-spread": "error",
              "@typescript-eslint/no-mixed-enums": "error",
              "@typescript-eslint/no-namespace": "error",
              "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
              "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
              "@typescript-eslint/no-non-null-assertion": "error",
              "@typescript-eslint/no-redundant-type-constituents": "error",
              "@typescript-eslint/no-require-imports": "error",
              "@typescript-eslint/no-this-alias": "error",
              "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
              "@typescript-eslint/no-unnecessary-condition": "error",
              "@typescript-eslint/no-unnecessary-template-expression": "error",
              "@typescript-eslint/no-unnecessary-type-arguments": "error",
              "@typescript-eslint/no-unnecessary-type-assertion": "error",
              "@typescript-eslint/no-unnecessary-type-constraint": "error",
              "@typescript-eslint/no-unnecessary-type-parameters": "error",
              "@typescript-eslint/no-unsafe-argument": "error",
              "@typescript-eslint/no-unsafe-assignment": "error",
              "@typescript-eslint/no-unsafe-call": "error",
              "@typescript-eslint/no-unsafe-declaration-merging": "error",
              "@typescript-eslint/no-unsafe-enum-comparison": "error",
              "@typescript-eslint/no-unsafe-function-type": "error",
              "@typescript-eslint/no-unsafe-member-access": "error",
              "@typescript-eslint/no-unsafe-return": "error",
              "@typescript-eslint/no-unsafe-unary-minus": "error",
              "@typescript-eslint/no-unused-expressions": "error",
              "@typescript-eslint/no-unused-vars": "error",
              "@typescript-eslint/no-useless-constructor": "error",
              "@typescript-eslint/no-wrapper-object-types": "error",
              "@typescript-eslint/only-throw-error": "error",
              "@typescript-eslint/prefer-as-const": "error",
              "@typescript-eslint/prefer-literal-enum-member": "error",
              "@typescript-eslint/prefer-namespace-keyword": "error",
              "@typescript-eslint/prefer-promise-reject-errors": "error",
              "@typescript-eslint/prefer-reduce-type-parameter": "error",
              "@typescript-eslint/prefer-return-this-type": "error",
              "@typescript-eslint/related-getter-setter-pairs": "error",
              "@typescript-eslint/require-await": "error",
              "@typescript-eslint/restrict-plus-operands": [
                "error",
                {
                  "allowAny": false,
                  "allowBoolean": false,
                  "allowNullish": false,
                  "allowNumberAndString": false,
                  "allowRegExp": false,
                },
              ],
              "@typescript-eslint/restrict-template-expressions": [
                "error",
                {
                  "allowAny": false,
                  "allowBoolean": false,
                  "allowNever": false,
                  "allowNullish": false,
                  "allowNumber": false,
                  "allowRegExp": false,
                },
              ],
              "@typescript-eslint/return-await": [
                "error",
                "error-handling-correctness-only",
              ],
              "@typescript-eslint/triple-slash-reference": "error",
              "@typescript-eslint/unbound-method": "error",
              "@typescript-eslint/unified-signatures": "error",
              "@typescript-eslint/use-unknown-in-catch-callback-variable": "error",
              "no-array-constructor": "off",
              "no-implied-eval": "off",
              "no-return-await": "off",
              "no-throw-literal": "off",
              "no-unused-expressions": "off",
              "no-unused-vars": "off",
              "no-useless-constructor": "off",
              "prefer-promise-reject-errors": "off",
              "require-await": "off",
            },
          },
          "strict-type-checked-only": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended",
            ],
            "rules": {
              "@typescript-eslint/await-thenable": "error",
              "@typescript-eslint/no-array-delete": "error",
              "@typescript-eslint/no-base-to-string": "error",
              "@typescript-eslint/no-confusing-void-expression": "error",
              "@typescript-eslint/no-deprecated": "error",
              "@typescript-eslint/no-duplicate-type-constituents": "error",
              "@typescript-eslint/no-floating-promises": "error",
              "@typescript-eslint/no-for-in-array": "error",
              "@typescript-eslint/no-implied-eval": "error",
              "@typescript-eslint/no-meaningless-void-operator": "error",
              "@typescript-eslint/no-misused-promises": "error",
              "@typescript-eslint/no-misused-spread": "error",
              "@typescript-eslint/no-mixed-enums": "error",
              "@typescript-eslint/no-redundant-type-constituents": "error",
              "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
              "@typescript-eslint/no-unnecessary-condition": "error",
              "@typescript-eslint/no-unnecessary-template-expression": "error",
              "@typescript-eslint/no-unnecessary-type-arguments": "error",
              "@typescript-eslint/no-unnecessary-type-assertion": "error",
              "@typescript-eslint/no-unnecessary-type-parameters": "error",
              "@typescript-eslint/no-unsafe-argument": "error",
              "@typescript-eslint/no-unsafe-assignment": "error",
              "@typescript-eslint/no-unsafe-call": "error",
              "@typescript-eslint/no-unsafe-enum-comparison": "error",
              "@typescript-eslint/no-unsafe-member-access": "error",
              "@typescript-eslint/no-unsafe-return": "error",
              "@typescript-eslint/no-unsafe-unary-minus": "error",
              "@typescript-eslint/only-throw-error": "error",
              "@typescript-eslint/prefer-promise-reject-errors": "error",
              "@typescript-eslint/prefer-reduce-type-parameter": "error",
              "@typescript-eslint/prefer-return-this-type": "error",
              "@typescript-eslint/related-getter-setter-pairs": "error",
              "@typescript-eslint/require-await": "error",
              "@typescript-eslint/restrict-plus-operands": [
                "error",
                {
                  "allowAny": false,
                  "allowBoolean": false,
                  "allowNullish": false,
                  "allowNumberAndString": false,
                  "allowRegExp": false,
                },
              ],
              "@typescript-eslint/restrict-template-expressions": [
                "error",
                {
                  "allowAny": false,
                  "allowBoolean": false,
                  "allowNever": false,
                  "allowNullish": false,
                  "allowNumber": false,
                  "allowRegExp": false,
                },
              ],
              "@typescript-eslint/return-await": [
                "error",
                "error-handling-correctness-only",
              ],
              "@typescript-eslint/unbound-method": "error",
              "@typescript-eslint/use-unknown-in-catch-callback-variable": "error",
              "no-implied-eval": "off",
              "no-return-await": "off",
              "no-throw-literal": "off",
              "prefer-promise-reject-errors": "off",
              "require-await": "off",
            },
          },
          "stylistic": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended",
            ],
            "rules": {
              "@typescript-eslint/adjacent-overload-signatures": "error",
              "@typescript-eslint/array-type": "error",
              "@typescript-eslint/ban-tslint-comment": "error",
              "@typescript-eslint/class-literal-property-style": "error",
              "@typescript-eslint/consistent-generic-constructors": "error",
              "@typescript-eslint/consistent-indexed-object-style": "error",
              "@typescript-eslint/consistent-type-assertions": "error",
              "@typescript-eslint/consistent-type-definitions": "error",
              "@typescript-eslint/no-confusing-non-null-assertion": "error",
              "@typescript-eslint/no-empty-function": "error",
              "@typescript-eslint/no-inferrable-types": "error",
              "@typescript-eslint/prefer-for-of": "error",
              "@typescript-eslint/prefer-function-type": "error",
              "no-empty-function": "off",
            },
          },
          "stylistic-type-checked": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended",
            ],
            "rules": {
              "@typescript-eslint/adjacent-overload-signatures": "error",
              "@typescript-eslint/array-type": "error",
              "@typescript-eslint/ban-tslint-comment": "error",
              "@typescript-eslint/class-literal-property-style": "error",
              "@typescript-eslint/consistent-generic-constructors": "error",
              "@typescript-eslint/consistent-indexed-object-style": "error",
              "@typescript-eslint/consistent-type-assertions": "error",
              "@typescript-eslint/consistent-type-definitions": "error",
              "@typescript-eslint/dot-notation": "error",
              "@typescript-eslint/no-confusing-non-null-assertion": "error",
              "@typescript-eslint/no-empty-function": "error",
              "@typescript-eslint/no-inferrable-types": "error",
              "@typescript-eslint/non-nullable-type-assertion-style": "error",
              "@typescript-eslint/prefer-find": "error",
              "@typescript-eslint/prefer-for-of": "error",
              "@typescript-eslint/prefer-function-type": "error",
              "@typescript-eslint/prefer-includes": "error",
              "@typescript-eslint/prefer-nullish-coalescing": "error",
              "@typescript-eslint/prefer-optional-chain": "error",
              "@typescript-eslint/prefer-regexp-exec": "error",
              "@typescript-eslint/prefer-string-starts-ends-with": "error",
              "dot-notation": "off",
              "no-empty-function": "off",
            },
          },
          "stylistic-type-checked-only": {
            "extends": [
              "./configs/base",
              "./configs/eslint-recommended",
            ],
            "rules": {
              "@typescript-eslint/dot-notation": "error",
              "@typescript-eslint/non-nullable-type-assertion-style": "error",
              "@typescript-eslint/prefer-find": "error",
              "@typescript-eslint/prefer-includes": "error",
              "@typescript-eslint/prefer-nullish-coalescing": "error",
              "@typescript-eslint/prefer-optional-chain": "error",
              "@typescript-eslint/prefer-regexp-exec": "error",
              "@typescript-eslint/prefer-string-starts-ends-with": "error",
              "dot-notation": "off",
            },
          },
        },
        "meta": {
          "name": "@typescript-eslint/eslint-plugin",
          "version": "8.27.0",
        },
        "rules": {
          "adjacent-overload-signatures": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Require that function overload signatures be consecutive",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/adjacent-overload-signatures",
              },
              "messages": {
                "adjacentSignature": "All {{name}} signatures should be adjacent.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "array-type": {
            "create": [Function],
            "defaultOptions": [
              {
                "default": "array",
              },
            ],
            "meta": {
              "docs": {
                "description": "Require consistently using either \`T[]\` or \`Array<T>\` for arrays",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/array-type",
              },
              "fixable": "code",
              "messages": {
                "errorStringArray": "Array type using '{{className}}<{{type}}>' is forbidden. Use '{{readonlyPrefix}}{{type}}[]' instead.",
                "errorStringArrayReadonly": "Array type using '{{className}}<{{type}}>' is forbidden. Use '{{readonlyPrefix}}{{type}}' instead.",
                "errorStringArraySimple": "Array type using '{{className}}<{{type}}>' is forbidden for simple types. Use '{{readonlyPrefix}}{{type}}[]' instead.",
                "errorStringArraySimpleReadonly": "Array type using '{{className}}<{{type}}>' is forbidden for simple types. Use '{{readonlyPrefix}}{{type}}' instead.",
                "errorStringGeneric": "Array type using '{{readonlyPrefix}}{{type}}[]' is forbidden. Use '{{className}}<{{type}}>' instead.",
                "errorStringGenericSimple": "Array type using '{{readonlyPrefix}}{{type}}[]' is forbidden for non-simple types. Use '{{className}}<{{type}}>' instead.",
              },
              "schema": [
                {
                  "$defs": {
                    "arrayOption": {
                      "enum": [
                        "array",
                        "generic",
                        "array-simple",
                      ],
                      "type": "string",
                    },
                  },
                  "additionalProperties": false,
                  "properties": {
                    "default": {
                      "$ref": "#/items/0/$defs/arrayOption",
                      "description": "The array type expected for mutable cases.",
                    },
                    "readonly": {
                      "$ref": "#/items/0/$defs/arrayOption",
                      "description": "The array type expected for readonly cases. If omitted, the value for \`default\` will be used.",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "await-thenable": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow awaiting a value that is not a Thenable",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/await-thenable",
              },
              "hasSuggestions": true,
              "messages": {
                "await": "Unexpected \`await\` of a non-Promise (non-"Thenable") value.",
                "awaitUsingOfNonAsyncDisposable": "Unexpected \`await using\` of a value that is not async disposable.",
                "convertToOrdinaryFor": "Convert to an ordinary \`for...of\` loop.",
                "forAwaitOfNonAsyncIterable": "Unexpected \`for await...of\` of a value that is not async iterable.",
                "removeAwait": "Remove unnecessary \`await\`.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "ban-ts-comment": {
            "create": [Function],
            "defaultOptions": [
              {
                "minimumDescriptionLength": 3,
                "ts-check": false,
                "ts-expect-error": "allow-with-description",
                "ts-ignore": true,
                "ts-nocheck": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow \`@ts-<directive>\` comments or require descriptions after directives",
                "recommended": {
                  "recommended": true,
                  "strict": [
                    {
                      "minimumDescriptionLength": 10,
                    },
                  ],
                },
                "url": "https://typescript-eslint.io/rules/ban-ts-comment",
              },
              "hasSuggestions": true,
              "messages": {
                "replaceTsIgnoreWithTsExpectError": "Replace "@ts-ignore" with "@ts-expect-error".",
                "tsDirectiveComment": "Do not use "@ts-{{directive}}" because it alters compilation errors.",
                "tsDirectiveCommentDescriptionNotMatchPattern": "The description for the "@ts-{{directive}}" directive must match the {{format}} format.",
                "tsDirectiveCommentRequiresDescription": "Include a description after the "@ts-{{directive}}" directive to explain why the @ts-{{directive}} is necessary. The description must be {{minimumDescriptionLength}} characters or longer.",
                "tsIgnoreInsteadOfExpectError": "Use "@ts-expect-error" instead of "@ts-ignore", as "@ts-ignore" will do nothing if the following line is error-free.",
              },
              "schema": [
                {
                  "$defs": {
                    "directiveConfigSchema": {
                      "oneOf": [
                        {
                          "default": true,
                          "type": "boolean",
                        },
                        {
                          "enum": [
                            "allow-with-description",
                          ],
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "descriptionFormat": {
                              "type": "string",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "additionalProperties": false,
                  "properties": {
                    "minimumDescriptionLength": {
                      "default": 3,
                      "description": "A minimum character length for descriptions when \`allow-with-description\` is enabled.",
                      "type": "number",
                    },
                    "ts-check": {
                      "$ref": "#/items/0/$defs/directiveConfigSchema",
                    },
                    "ts-expect-error": {
                      "$ref": "#/items/0/$defs/directiveConfigSchema",
                    },
                    "ts-ignore": {
                      "$ref": "#/items/0/$defs/directiveConfigSchema",
                    },
                    "ts-nocheck": {
                      "$ref": "#/items/0/$defs/directiveConfigSchema",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "ban-tslint-comment": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow \`// tslint:<rule-flag>\` comments",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/ban-tslint-comment",
              },
              "fixable": "code",
              "messages": {
                "commentDetected": "tslint comment detected: "{{ text }}"",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "class-literal-property-style": {
            "create": [Function],
            "defaultOptions": [
              "fields",
            ],
            "meta": {
              "docs": {
                "description": "Enforce that literals on classes are exposed in a consistent style",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/class-literal-property-style",
              },
              "hasSuggestions": true,
              "messages": {
                "preferFieldStyle": "Literals should be exposed using readonly fields.",
                "preferFieldStyleSuggestion": "Replace the literals with readonly fields.",
                "preferGetterStyle": "Literals should be exposed using getters.",
                "preferGetterStyleSuggestion": "Replace the literals with getters.",
              },
              "schema": [
                {
                  "description": "Which literal class member syntax to prefer.",
                  "enum": [
                    "fields",
                    "getters",
                  ],
                  "type": "string",
                },
              ],
              "type": "problem",
            },
          },
          "class-methods-use-this": {
            "create": [Function],
            "defaultOptions": [
              {
                "enforceForClassFields": true,
                "exceptMethods": [],
                "ignoreClassesThatImplementAnInterface": false,
                "ignoreOverrideMethods": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce that class methods utilize \`this\`",
                "extendsBaseRule": true,
                "requiresTypeChecking": false,
                "url": "https://typescript-eslint.io/rules/class-methods-use-this",
              },
              "messages": {
                "missingThis": "Expected 'this' to be used by class {{name}}.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "enforceForClassFields": {
                      "default": true,
                      "description": "Enforces that functions used as instance field initializers utilize \`this\`.",
                      "type": "boolean",
                    },
                    "exceptMethods": {
                      "description": "Allows specified method names to be ignored with this rule.",
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "ignoreClassesThatImplementAnInterface": {
                      "description": "Whether to ignore class members that are defined within a class that \`implements\` a type.",
                      "oneOf": [
                        {
                          "description": "Ignore all classes that implement an interface",
                          "type": "boolean",
                        },
                        {
                          "description": "Ignore only the public fields of classes that implement an interface",
                          "enum": [
                            "public-fields",
                          ],
                          "type": "string",
                        },
                      ],
                    },
                    "ignoreOverrideMethods": {
                      "description": "Whether to ignore members marked with the \`override\` modifier.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "consistent-generic-constructors": {
            "create": [Function],
            "defaultOptions": [
              "constructor",
            ],
            "meta": {
              "docs": {
                "description": "Enforce specifying generic type arguments on type annotation or constructor name of a constructor call",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/consistent-generic-constructors",
              },
              "fixable": "code",
              "messages": {
                "preferConstructor": "The generic type arguments should be specified as part of the constructor type arguments.",
                "preferTypeAnnotation": "The generic type arguments should be specified as part of the type annotation.",
              },
              "schema": [
                {
                  "description": "Which constructor call syntax to prefer.",
                  "enum": [
                    "type-annotation",
                    "constructor",
                  ],
                  "type": "string",
                },
              ],
              "type": "suggestion",
            },
          },
          "consistent-indexed-object-style": {
            "create": [Function],
            "defaultOptions": [
              "record",
            ],
            "meta": {
              "docs": {
                "description": "Require or disallow the \`Record\` type",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/consistent-indexed-object-style",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "preferIndexSignature": "An index signature is preferred over a record.",
                "preferIndexSignatureSuggestion": "Change into an index signature instead of a record.",
                "preferRecord": "A record is preferred over an index signature.",
              },
              "schema": [
                {
                  "description": "Which indexed object syntax to prefer.",
                  "enum": [
                    "record",
                    "index-signature",
                  ],
                  "type": "string",
                },
              ],
              "type": "suggestion",
            },
          },
          "consistent-return": {
            "create": [Function],
            "defaultOptions": [
              {
                "treatUndefinedAsUnspecified": false,
              },
            ],
            "meta": {
              "defaultOptions": [
                {
                  "treatUndefinedAsUnspecified": false,
                },
              ],
              "docs": {
                "description": "Require \`return\` statements to either always or never specify values",
                "extendsBaseRule": true,
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/consistent-return",
              },
              "hasSuggestions": undefined,
              "messages": {
                "missingReturn": "Expected to return a value at the end of {{name}}.",
                "missingReturnValue": "{{name}} expected a return value.",
                "unexpectedReturnValue": "{{name}} expected no return value.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "treatUndefinedAsUnspecified": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "consistent-type-assertions": {
            "create": [Function],
            "defaultOptions": [
              {
                "arrayLiteralTypeAssertions": "allow",
                "assertionStyle": "as",
                "objectLiteralTypeAssertions": "allow",
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce consistent usage of type assertions",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/consistent-type-assertions",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "angle-bracket": "Use '<{{cast}}>' instead of 'as {{cast}}'.",
                "as": "Use 'as {{cast}}' instead of '<{{cast}}>'.",
                "never": "Do not use any type assertions.",
                "replaceArrayTypeAssertionWithAnnotation": "Use const x: {{cast}} = [ ... ] instead.",
                "replaceArrayTypeAssertionWithSatisfies": "Use const x = [ ... ] satisfies {{cast}} instead.",
                "replaceObjectTypeAssertionWithAnnotation": "Use const x: {{cast}} = { ... } instead.",
                "replaceObjectTypeAssertionWithSatisfies": "Use const x = { ... } satisfies {{cast}} instead.",
                "unexpectedArrayTypeAssertion": "Always prefer const x: T[] = [ ... ].",
                "unexpectedObjectTypeAssertion": "Always prefer const x: T = { ... }.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "assertionStyle": {
                          "description": "The expected assertion style to enforce.",
                          "enum": [
                            "never",
                          ],
                          "type": "string",
                        },
                      },
                      "required": [
                        "assertionStyle",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "arrayLiteralTypeAssertions": {
                          "description": "Whether to always prefer type declarations for array literals used as variable initializers, rather than type assertions.",
                          "enum": [
                            "allow",
                            "allow-as-parameter",
                            "never",
                          ],
                          "type": "string",
                        },
                        "assertionStyle": {
                          "description": "The expected assertion style to enforce.",
                          "enum": [
                            "as",
                            "angle-bracket",
                          ],
                          "type": "string",
                        },
                        "objectLiteralTypeAssertions": {
                          "description": "Whether to always prefer type declarations for object literals used as variable initializers, rather than type assertions.",
                          "enum": [
                            "allow",
                            "allow-as-parameter",
                            "never",
                          ],
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "suggestion",
            },
          },
          "consistent-type-definitions": {
            "create": [Function],
            "defaultOptions": [
              "interface",
            ],
            "meta": {
              "docs": {
                "description": "Enforce type definitions to consistently use either \`interface\` or \`type\`",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/consistent-type-definitions",
              },
              "fixable": "code",
              "messages": {
                "interfaceOverType": "Use an \`interface\` instead of a \`type\`.",
                "typeOverInterface": "Use a \`type\` instead of an \`interface\`.",
              },
              "schema": [
                {
                  "description": "Which type definition syntax to prefer.",
                  "enum": [
                    "interface",
                    "type",
                  ],
                  "type": "string",
                },
              ],
              "type": "suggestion",
            },
          },
          "consistent-type-exports": {
            "create": [Function],
            "defaultOptions": [
              {
                "fixMixedExportsWithInlineTypeSpecifier": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce consistent usage of type exports",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/consistent-type-exports",
              },
              "fixable": "code",
              "messages": {
                "multipleExportsAreTypes": "Type exports {{exportNames}} are not values and should be exported using \`export type\`.",
                "singleExportIsType": "Type export {{exportNames}} is not a value and should be exported using \`export type\`.",
                "typeOverValue": "All exports in the declaration are only used as types. Use \`export type\`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "fixMixedExportsWithInlineTypeSpecifier": {
                      "description": "Whether the rule will autofix "mixed" export cases using TS inline type specifiers.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "consistent-type-imports": {
            "create": [Function],
            "defaultOptions": [
              {
                "disallowTypeAnnotations": true,
                "fixStyle": "separate-type-imports",
                "prefer": "type-imports",
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce consistent usage of type imports",
                "url": "https://typescript-eslint.io/rules/consistent-type-imports",
              },
              "fixable": "code",
              "messages": {
                "avoidImportType": "Use an \`import\` instead of an \`import type\`.",
                "noImportTypeAnnotations": "\`import()\` type annotations are forbidden.",
                "someImportsAreOnlyTypes": "Imports {{typeImports}} are only used as type.",
                "typeOverValue": "All imports in the declaration are only used as types. Use \`import type\`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "disallowTypeAnnotations": {
                      "description": "Whether to disallow type imports in type annotations (\`import()\`).",
                      "type": "boolean",
                    },
                    "fixStyle": {
                      "description": "The expected type modifier to be added when an import is detected as used only in the type position.",
                      "enum": [
                        "separate-type-imports",
                        "inline-type-imports",
                      ],
                      "type": "string",
                    },
                    "prefer": {
                      "description": "The expected import kind for type-only imports.",
                      "enum": [
                        "type-imports",
                        "no-type-imports",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "default-param-last": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce default parameters to be last",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/default-param-last",
              },
              "messages": {
                "shouldBeLast": "Default parameters should be last.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "dot-notation": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowIndexSignaturePropertyAccess": false,
                "allowKeywords": true,
                "allowPattern": "",
                "allowPrivateClassPropertyAccess": false,
                "allowProtectedClassPropertyAccess": false,
              },
            ],
            "meta": {
              "defaultOptions": [
                {
                  "allowIndexSignaturePropertyAccess": false,
                  "allowKeywords": true,
                  "allowPattern": "",
                  "allowPrivateClassPropertyAccess": false,
                  "allowProtectedClassPropertyAccess": false,
                },
              ],
              "docs": {
                "description": "Enforce dot notation whenever possible",
                "extendsBaseRule": true,
                "recommended": "stylistic",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/dot-notation",
              },
              "fixable": "code",
              "hasSuggestions": undefined,
              "messages": {
                "useBrackets": ".{{key}} is a syntax error.",
                "useDot": "[{{key}}] is better written in dot notation.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowIndexSignaturePropertyAccess": {
                      "default": false,
                      "description": "Whether to allow accessing properties matching an index signature with array notation.",
                      "type": "boolean",
                    },
                    "allowKeywords": {
                      "default": true,
                      "description": "Whether to allow keywords such as ["class"]\`.",
                      "type": "boolean",
                    },
                    "allowPattern": {
                      "default": "",
                      "description": "Regular expression of names to allow.",
                      "type": "string",
                    },
                    "allowPrivateClassPropertyAccess": {
                      "default": false,
                      "description": "Whether to allow accessing class members marked as \`private\` with array notation.",
                      "type": "boolean",
                    },
                    "allowProtectedClassPropertyAccess": {
                      "default": false,
                      "description": "Whether to allow accessing class members marked as \`protected\` with array notation.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "explicit-function-return-type": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowConciseArrowFunctionExpressionsStartingWithVoid": false,
                "allowDirectConstAssertionInArrowFunctions": true,
                "allowExpressions": false,
                "allowFunctionsWithoutTypeParameters": false,
                "allowHigherOrderFunctions": true,
                "allowIIFEs": false,
                "allowTypedFunctionExpressions": true,
                "allowedNames": [],
              },
            ],
            "meta": {
              "docs": {
                "description": "Require explicit return types on functions and class methods",
                "url": "https://typescript-eslint.io/rules/explicit-function-return-type",
              },
              "messages": {
                "missingReturnType": "Missing return type on function.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowConciseArrowFunctionExpressionsStartingWithVoid": {
                      "description": "Whether to allow arrow functions that start with the \`void\` keyword.",
                      "type": "boolean",
                    },
                    "allowDirectConstAssertionInArrowFunctions": {
                      "description": "Whether to ignore arrow functions immediately returning a \`as const\` value.",
                      "type": "boolean",
                    },
                    "allowExpressions": {
                      "description": "Whether to ignore function expressions (functions which are not part of a declaration).",
                      "type": "boolean",
                    },
                    "allowFunctionsWithoutTypeParameters": {
                      "description": "Whether to ignore functions that don't have generic type parameters.",
                      "type": "boolean",
                    },
                    "allowHigherOrderFunctions": {
                      "description": "Whether to ignore functions immediately returning another function expression.",
                      "type": "boolean",
                    },
                    "allowIIFEs": {
                      "description": "Whether to ignore immediately invoked function expressions (IIFEs).",
                      "type": "boolean",
                    },
                    "allowTypedFunctionExpressions": {
                      "description": "Whether to ignore type annotations on the variable of function expressions.",
                      "type": "boolean",
                    },
                    "allowedNames": {
                      "description": "An array of function/method names that will not have their arguments or return values checked.",
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "explicit-member-accessibility": {
            "create": [Function],
            "defaultOptions": [
              {
                "accessibility": "explicit",
              },
            ],
            "meta": {
              "docs": {
                "description": "Require explicit accessibility modifiers on class properties and methods",
                "url": "https://typescript-eslint.io/rules/explicit-member-accessibility",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "addExplicitAccessibility": "Add '{{ type }}' accessibility modifier",
                "missingAccessibility": "Missing accessibility modifier on {{type}} {{name}}.",
                "unwantedPublicAccessibility": "Public accessibility modifier on {{type}} {{name}}.",
              },
              "schema": [
                {
                  "$defs": {
                    "accessibilityLevel": {
                      "oneOf": [
                        {
                          "description": "Always require an accessor.",
                          "enum": [
                            "explicit",
                          ],
                          "type": "string",
                        },
                        {
                          "description": "Require an accessor except when public.",
                          "enum": [
                            "no-public",
                          ],
                          "type": "string",
                        },
                        {
                          "description": "Never check whether there is an accessor.",
                          "enum": [
                            "off",
                          ],
                          "type": "string",
                        },
                      ],
                    },
                  },
                  "additionalProperties": false,
                  "properties": {
                    "accessibility": {
                      "$ref": "#/items/0/$defs/accessibilityLevel",
                      "description": "Which accessibility modifier is required to exist or not exist.",
                    },
                    "ignoredMethodNames": {
                      "description": "Specific method names that may be ignored.",
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "overrides": {
                      "additionalProperties": false,
                      "description": "Changes to required accessibility modifiers for specific kinds of class members.",
                      "properties": {
                        "accessors": {
                          "$ref": "#/items/0/$defs/accessibilityLevel",
                        },
                        "constructors": {
                          "$ref": "#/items/0/$defs/accessibilityLevel",
                        },
                        "methods": {
                          "$ref": "#/items/0/$defs/accessibilityLevel",
                        },
                        "parameterProperties": {
                          "$ref": "#/items/0/$defs/accessibilityLevel",
                        },
                        "properties": {
                          "$ref": "#/items/0/$defs/accessibilityLevel",
                        },
                      },
                      "type": "object",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "explicit-module-boundary-types": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowArgumentsExplicitlyTypedAsAny": false,
                "allowDirectConstAssertionInArrowFunctions": true,
                "allowHigherOrderFunctions": true,
                "allowOverloadFunctions": false,
                "allowTypedFunctionExpressions": true,
                "allowedNames": [],
              },
            ],
            "meta": {
              "docs": {
                "description": "Require explicit return and argument types on exported functions' and classes' public class methods",
                "url": "https://typescript-eslint.io/rules/explicit-module-boundary-types",
              },
              "messages": {
                "anyTypedArg": "Argument '{{name}}' should be typed with a non-any type.",
                "anyTypedArgUnnamed": "{{type}} argument should be typed with a non-any type.",
                "missingArgType": "Argument '{{name}}' should be typed.",
                "missingArgTypeUnnamed": "{{type}} argument should be typed.",
                "missingReturnType": "Missing return type on function.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowArgumentsExplicitlyTypedAsAny": {
                      "description": "Whether to ignore arguments that are explicitly typed as \`any\`.",
                      "type": "boolean",
                    },
                    "allowDirectConstAssertionInArrowFunctions": {
                      "description": "Whether to ignore return type annotations on body-less arrow functions that return an \`as const\` type assertion.
You must still type the parameters of the function.",
                      "type": "boolean",
                    },
                    "allowHigherOrderFunctions": {
                      "description": "Whether to ignore return type annotations on functions immediately returning another function expression.
You must still type the parameters of the function.",
                      "type": "boolean",
                    },
                    "allowOverloadFunctions": {
                      "description": "Whether to ignore return type annotations on functions with overload signatures.",
                      "type": "boolean",
                    },
                    "allowTypedFunctionExpressions": {
                      "description": "Whether to ignore type annotations on the variable of a function expression.",
                      "type": "boolean",
                    },
                    "allowedNames": {
                      "description": "An array of function/method names that will not have their arguments or return values checked.",
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "init-declarations": {
            "create": [Function],
            "defaultOptions": [
              "always",
            ],
            "meta": {
              "docs": {
                "description": "Require or disallow initialization in variable declarations",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/init-declarations",
              },
              "hasSuggestions": undefined,
              "messages": {
                "initialized": "Variable '{{idName}}' should be initialized on declaration.",
                "notInitialized": "Variable '{{idName}}' should not be initialized on declaration.",
              },
              "schema": {
                "anyOf": [
                  {
                    "items": [
                      {
                        "enum": [
                          "always",
                        ],
                      },
                    ],
                    "maxItems": 1,
                    "minItems": 0,
                    "type": "array",
                  },
                  {
                    "items": [
                      {
                        "enum": [
                          "never",
                        ],
                      },
                      {
                        "additionalProperties": false,
                        "properties": {
                          "ignoreForLoopInit": {
                            "type": "boolean",
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "maxItems": 2,
                    "minItems": 0,
                    "type": "array",
                  },
                ],
              },
              "type": "suggestion",
            },
          },
          "max-params": {
            "create": [Function],
            "defaultOptions": [
              {
                "countVoidThis": false,
                "max": 3,
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce a maximum number of parameters in function definitions",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/max-params",
              },
              "messages": {
                "exceed": "{{name}} has too many parameters ({{count}}). Maximum allowed is {{max}}.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "countVoidThis": {
                      "description": "Whether to count a \`this\` declaration when the type is \`void\`.",
                      "type": "boolean",
                    },
                    "max": {
                      "description": "A maximum number of parameters in function definitions.",
                      "minimum": 0,
                      "type": "integer",
                    },
                    "maximum": {
                      "description": "(deprecated) A maximum number of parameters in function definitions.",
                      "minimum": 0,
                      "type": "integer",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "member-ordering": {
            "create": [Function],
            "defaultOptions": [
              {
                "default": {
                  "memberTypes": [
                    "signature",
                    "call-signature",
                    "public-static-field",
                    "protected-static-field",
                    "private-static-field",
                    "#private-static-field",
                    "public-decorated-field",
                    "protected-decorated-field",
                    "private-decorated-field",
                    "public-instance-field",
                    "protected-instance-field",
                    "private-instance-field",
                    "#private-instance-field",
                    "public-abstract-field",
                    "protected-abstract-field",
                    "public-field",
                    "protected-field",
                    "private-field",
                    "#private-field",
                    "static-field",
                    "instance-field",
                    "abstract-field",
                    "decorated-field",
                    "field",
                    "static-initialization",
                    "public-constructor",
                    "protected-constructor",
                    "private-constructor",
                    "constructor",
                    "public-static-accessor",
                    "protected-static-accessor",
                    "private-static-accessor",
                    "#private-static-accessor",
                    "public-decorated-accessor",
                    "protected-decorated-accessor",
                    "private-decorated-accessor",
                    "public-instance-accessor",
                    "protected-instance-accessor",
                    "private-instance-accessor",
                    "#private-instance-accessor",
                    "public-abstract-accessor",
                    "protected-abstract-accessor",
                    "public-accessor",
                    "protected-accessor",
                    "private-accessor",
                    "#private-accessor",
                    "static-accessor",
                    "instance-accessor",
                    "abstract-accessor",
                    "decorated-accessor",
                    "accessor",
                    "public-static-get",
                    "protected-static-get",
                    "private-static-get",
                    "#private-static-get",
                    "public-decorated-get",
                    "protected-decorated-get",
                    "private-decorated-get",
                    "public-instance-get",
                    "protected-instance-get",
                    "private-instance-get",
                    "#private-instance-get",
                    "public-abstract-get",
                    "protected-abstract-get",
                    "public-get",
                    "protected-get",
                    "private-get",
                    "#private-get",
                    "static-get",
                    "instance-get",
                    "abstract-get",
                    "decorated-get",
                    "get",
                    "public-static-set",
                    "protected-static-set",
                    "private-static-set",
                    "#private-static-set",
                    "public-decorated-set",
                    "protected-decorated-set",
                    "private-decorated-set",
                    "public-instance-set",
                    "protected-instance-set",
                    "private-instance-set",
                    "#private-instance-set",
                    "public-abstract-set",
                    "protected-abstract-set",
                    "public-set",
                    "protected-set",
                    "private-set",
                    "#private-set",
                    "static-set",
                    "instance-set",
                    "abstract-set",
                    "decorated-set",
                    "set",
                    "public-static-method",
                    "protected-static-method",
                    "private-static-method",
                    "#private-static-method",
                    "public-decorated-method",
                    "protected-decorated-method",
                    "private-decorated-method",
                    "public-instance-method",
                    "protected-instance-method",
                    "private-instance-method",
                    "#private-instance-method",
                    "public-abstract-method",
                    "protected-abstract-method",
                    "public-method",
                    "protected-method",
                    "private-method",
                    "#private-method",
                    "static-method",
                    "instance-method",
                    "abstract-method",
                    "decorated-method",
                    "method",
                  ],
                },
              },
            ],
            "meta": {
              "docs": {
                "description": "Require a consistent member declaration order",
                "url": "https://typescript-eslint.io/rules/member-ordering",
              },
              "messages": {
                "incorrectGroupOrder": "Member {{name}} should be declared before all {{rank}} definitions.",
                "incorrectOrder": "Member {{member}} should be declared before member {{beforeMember}}.",
                "incorrectRequiredMembersOrder": "Member {{member}} should be declared after all {{optionalOrRequired}} members.",
              },
              "schema": [
                {
                  "$defs": {
                    "allItems": {
                      "enum": [
                        "readonly-signature",
                        "signature",
                        "readonly-field",
                        "public-readonly-field",
                        "public-decorated-readonly-field",
                        "decorated-readonly-field",
                        "static-readonly-field",
                        "public-static-readonly-field",
                        "instance-readonly-field",
                        "public-instance-readonly-field",
                        "abstract-readonly-field",
                        "public-abstract-readonly-field",
                        "protected-readonly-field",
                        "protected-decorated-readonly-field",
                        "protected-static-readonly-field",
                        "protected-instance-readonly-field",
                        "protected-abstract-readonly-field",
                        "private-readonly-field",
                        "private-decorated-readonly-field",
                        "private-static-readonly-field",
                        "private-instance-readonly-field",
                        "#private-readonly-field",
                        "#private-static-readonly-field",
                        "#private-instance-readonly-field",
                        "field",
                        "public-field",
                        "public-decorated-field",
                        "decorated-field",
                        "static-field",
                        "public-static-field",
                        "instance-field",
                        "public-instance-field",
                        "abstract-field",
                        "public-abstract-field",
                        "protected-field",
                        "protected-decorated-field",
                        "protected-static-field",
                        "protected-instance-field",
                        "protected-abstract-field",
                        "private-field",
                        "private-decorated-field",
                        "private-static-field",
                        "private-instance-field",
                        "#private-field",
                        "#private-static-field",
                        "#private-instance-field",
                        "method",
                        "public-method",
                        "public-decorated-method",
                        "decorated-method",
                        "static-method",
                        "public-static-method",
                        "instance-method",
                        "public-instance-method",
                        "abstract-method",
                        "public-abstract-method",
                        "protected-method",
                        "protected-decorated-method",
                        "protected-static-method",
                        "protected-instance-method",
                        "protected-abstract-method",
                        "private-method",
                        "private-decorated-method",
                        "private-static-method",
                        "private-instance-method",
                        "#private-method",
                        "#private-static-method",
                        "#private-instance-method",
                        "call-signature",
                        "constructor",
                        "public-constructor",
                        "protected-constructor",
                        "private-constructor",
                        "accessor",
                        "public-accessor",
                        "public-decorated-accessor",
                        "decorated-accessor",
                        "static-accessor",
                        "public-static-accessor",
                        "instance-accessor",
                        "public-instance-accessor",
                        "abstract-accessor",
                        "public-abstract-accessor",
                        "protected-accessor",
                        "protected-decorated-accessor",
                        "protected-static-accessor",
                        "protected-instance-accessor",
                        "protected-abstract-accessor",
                        "private-accessor",
                        "private-decorated-accessor",
                        "private-static-accessor",
                        "private-instance-accessor",
                        "#private-accessor",
                        "#private-static-accessor",
                        "#private-instance-accessor",
                        "get",
                        "public-get",
                        "public-decorated-get",
                        "decorated-get",
                        "static-get",
                        "public-static-get",
                        "instance-get",
                        "public-instance-get",
                        "abstract-get",
                        "public-abstract-get",
                        "protected-get",
                        "protected-decorated-get",
                        "protected-static-get",
                        "protected-instance-get",
                        "protected-abstract-get",
                        "private-get",
                        "private-decorated-get",
                        "private-static-get",
                        "private-instance-get",
                        "#private-get",
                        "#private-static-get",
                        "#private-instance-get",
                        "set",
                        "public-set",
                        "public-decorated-set",
                        "decorated-set",
                        "static-set",
                        "public-static-set",
                        "instance-set",
                        "public-instance-set",
                        "abstract-set",
                        "public-abstract-set",
                        "protected-set",
                        "protected-decorated-set",
                        "protected-static-set",
                        "protected-instance-set",
                        "protected-abstract-set",
                        "private-set",
                        "private-decorated-set",
                        "private-static-set",
                        "private-instance-set",
                        "#private-set",
                        "#private-static-set",
                        "#private-instance-set",
                        "static-initialization",
                        "static-static-initialization",
                        "public-static-static-initialization",
                        "instance-static-initialization",
                        "public-instance-static-initialization",
                        "abstract-static-initialization",
                        "public-abstract-static-initialization",
                        "protected-static-static-initialization",
                        "protected-instance-static-initialization",
                        "protected-abstract-static-initialization",
                        "private-static-static-initialization",
                        "private-instance-static-initialization",
                        "#private-static-static-initialization",
                        "#private-instance-static-initialization",
                      ],
                      "type": "string",
                    },
                    "baseConfig": {
                      "oneOf": [
                        {
                          "enum": [
                            "never",
                          ],
                          "type": "string",
                        },
                        {
                          "items": {
                            "oneOf": [
                              {
                                "$ref": "#/items/0/$defs/allItems",
                              },
                              {
                                "items": {
                                  "$ref": "#/items/0/$defs/allItems",
                                },
                                "type": "array",
                              },
                            ],
                          },
                          "type": "array",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "memberTypes": {
                              "oneOf": [
                                {
                                  "items": {
                                    "oneOf": [
                                      {
                                        "$ref": "#/items/0/$defs/allItems",
                                      },
                                      {
                                        "items": {
                                          "$ref": "#/items/0/$defs/allItems",
                                        },
                                        "type": "array",
                                      },
                                    ],
                                  },
                                  "type": "array",
                                },
                                {
                                  "enum": [
                                    "never",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                            "optionalityOrder": {
                              "$ref": "#/items/0/$defs/optionalityOrderOptions",
                            },
                            "order": {
                              "$ref": "#/items/0/$defs/orderOptions",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                    "optionalityOrderOptions": {
                      "enum": [
                        "optional-first",
                        "required-first",
                      ],
                      "type": "string",
                    },
                    "orderOptions": {
                      "enum": [
                        "alphabetically",
                        "alphabetically-case-insensitive",
                        "as-written",
                        "natural",
                        "natural-case-insensitive",
                      ],
                      "type": "string",
                    },
                    "typeItems": {
                      "enum": [
                        "readonly-signature",
                        "signature",
                        "readonly-field",
                        "field",
                        "method",
                        "constructor",
                      ],
                      "type": "string",
                    },
                    "typesConfig": {
                      "oneOf": [
                        {
                          "enum": [
                            "never",
                          ],
                          "type": "string",
                        },
                        {
                          "items": {
                            "oneOf": [
                              {
                                "$ref": "#/items/0/$defs/typeItems",
                              },
                              {
                                "items": {
                                  "$ref": "#/items/0/$defs/typeItems",
                                },
                                "type": "array",
                              },
                            ],
                          },
                          "type": "array",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "memberTypes": {
                              "oneOf": [
                                {
                                  "items": {
                                    "oneOf": [
                                      {
                                        "$ref": "#/items/0/$defs/typeItems",
                                      },
                                      {
                                        "items": {
                                          "$ref": "#/items/0/$defs/typeItems",
                                        },
                                        "type": "array",
                                      },
                                    ],
                                  },
                                  "type": "array",
                                },
                                {
                                  "enum": [
                                    "never",
                                  ],
                                  "type": "string",
                                },
                              ],
                            },
                            "optionalityOrder": {
                              "$ref": "#/items/0/$defs/optionalityOrderOptions",
                            },
                            "order": {
                              "$ref": "#/items/0/$defs/orderOptions",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "additionalProperties": false,
                  "properties": {
                    "classExpressions": {
                      "$ref": "#/items/0/$defs/baseConfig",
                    },
                    "classes": {
                      "$ref": "#/items/0/$defs/baseConfig",
                    },
                    "default": {
                      "$ref": "#/items/0/$defs/baseConfig",
                    },
                    "interfaces": {
                      "$ref": "#/items/0/$defs/typesConfig",
                    },
                    "typeLiterals": {
                      "$ref": "#/items/0/$defs/typesConfig",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "method-signature-style": {
            "create": [Function],
            "defaultOptions": [
              "property",
            ],
            "meta": {
              "docs": {
                "description": "Enforce using a particular method signature syntax",
                "url": "https://typescript-eslint.io/rules/method-signature-style",
              },
              "fixable": "code",
              "messages": {
                "errorMethod": "Shorthand method signature is forbidden. Use a function property instead.",
                "errorProperty": "Function property signature is forbidden. Use a method shorthand instead.",
              },
              "schema": [
                {
                  "enum": [
                    "property",
                    "method",
                  ],
                  "type": "string",
                },
              ],
              "type": "suggestion",
            },
          },
          "naming-convention": {
            "create": [Function],
            "defaultOptions": [
              {
                "format": [
                  "camelCase",
                ],
                "leadingUnderscore": "allow",
                "selector": "default",
                "trailingUnderscore": "allow",
              },
              {
                "format": [
                  "camelCase",
                  "PascalCase",
                ],
                "selector": "import",
              },
              {
                "format": [
                  "camelCase",
                  "UPPER_CASE",
                ],
                "leadingUnderscore": "allow",
                "selector": "variable",
                "trailingUnderscore": "allow",
              },
              {
                "format": [
                  "PascalCase",
                ],
                "selector": "typeLike",
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce naming conventions for everything across a codebase",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/naming-convention",
              },
              "messages": {
                "doesNotMatchFormat": "{{type}} name \`{{name}}\` must match one of the following formats: {{formats}}",
                "doesNotMatchFormatTrimmed": "{{type}} name \`{{name}}\` trimmed as \`{{processedName}}\` must match one of the following formats: {{formats}}",
                "missingAffix": "{{type}} name \`{{name}}\` must have one of the following {{position}}es: {{affixes}}",
                "missingUnderscore": "{{type}} name \`{{name}}\` must have {{count}} {{position}} underscore(s).",
                "satisfyCustom": "{{type}} name \`{{name}}\` must {{regexMatch}} the RegExp: {{regex}}",
                "unexpectedUnderscore": "{{type}} name \`{{name}}\` must not have a {{position}} underscore.",
              },
              "schema": {
                "$defs": {
                  "formatOptionsConfig": {
                    "oneOf": [
                      {
                        "additionalItems": false,
                        "items": {
                          "$ref": "#/$defs/predefinedFormats",
                        },
                        "type": "array",
                      },
                      {
                        "type": "null",
                      },
                    ],
                  },
                  "matchRegexConfig": {
                    "additionalProperties": false,
                    "properties": {
                      "match": {
                        "type": "boolean",
                      },
                      "regex": {
                        "type": "string",
                      },
                    },
                    "required": [
                      "match",
                      "regex",
                    ],
                    "type": "object",
                  },
                  "predefinedFormats": {
                    "enum": [
                      "camelCase",
                      "strictCamelCase",
                      "PascalCase",
                      "StrictPascalCase",
                      "snake_case",
                      "UPPER_CASE",
                    ],
                    "type": "string",
                  },
                  "prefixSuffixConfig": {
                    "additionalItems": false,
                    "items": {
                      "minLength": 1,
                      "type": "string",
                    },
                    "type": "array",
                  },
                  "typeModifiers": {
                    "enum": [
                      "boolean",
                      "string",
                      "number",
                      "function",
                      "array",
                    ],
                    "type": "string",
                  },
                  "underscoreOptions": {
                    "enum": [
                      "forbid",
                      "allow",
                      "require",
                      "requireDouble",
                      "allowDouble",
                      "allowSingleOrDouble",
                    ],
                    "type": "string",
                  },
                },
                "additionalItems": false,
                "items": {
                  "oneOf": [
                    {
                      "additionalProperties": false,
                      "description": "Multiple selectors in one config",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "const",
                              "readonly",
                              "static",
                              "public",
                              "protected",
                              "private",
                              "#private",
                              "abstract",
                              "destructured",
                              "global",
                              "exported",
                              "unused",
                              "requiresQuotes",
                              "override",
                              "async",
                              "default",
                              "namespace",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "default",
                              "variableLike",
                              "memberLike",
                              "typeLike",
                              "method",
                              "property",
                              "accessor",
                              "variable",
                              "function",
                              "parameter",
                              "parameterProperty",
                              "classicAccessor",
                              "enumMember",
                              "classMethod",
                              "objectLiteralMethod",
                              "typeMethod",
                              "classProperty",
                              "objectLiteralProperty",
                              "typeProperty",
                              "autoAccessor",
                              "class",
                              "interface",
                              "typeAlias",
                              "enum",
                              "typeParameter",
                              "import",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers",
                          },
                          "type": "array",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'default'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "const",
                              "readonly",
                              "static",
                              "public",
                              "protected",
                              "private",
                              "#private",
                              "abstract",
                              "destructured",
                              "global",
                              "exported",
                              "unused",
                              "requiresQuotes",
                              "override",
                              "async",
                              "default",
                              "namespace",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "default",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'variableLike'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "unused",
                              "async",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "variableLike",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'variable'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "const",
                              "destructured",
                              "exported",
                              "global",
                              "unused",
                              "async",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "variable",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers",
                          },
                          "type": "array",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'function'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "exported",
                              "global",
                              "unused",
                              "async",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "function",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'parameter'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "destructured",
                              "unused",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "parameter",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers",
                          },
                          "type": "array",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'memberLike'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "abstract",
                              "private",
                              "#private",
                              "protected",
                              "public",
                              "readonly",
                              "requiresQuotes",
                              "static",
                              "override",
                              "async",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "memberLike",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'classProperty'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "abstract",
                              "private",
                              "#private",
                              "protected",
                              "public",
                              "readonly",
                              "requiresQuotes",
                              "static",
                              "override",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "classProperty",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers",
                          },
                          "type": "array",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'objectLiteralProperty'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "public",
                              "requiresQuotes",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "objectLiteralProperty",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers",
                          },
                          "type": "array",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'typeProperty'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "public",
                              "readonly",
                              "requiresQuotes",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "typeProperty",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers",
                          },
                          "type": "array",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'parameterProperty'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "private",
                              "protected",
                              "public",
                              "readonly",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "parameterProperty",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers",
                          },
                          "type": "array",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'property'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "abstract",
                              "private",
                              "#private",
                              "protected",
                              "public",
                              "readonly",
                              "requiresQuotes",
                              "static",
                              "override",
                              "async",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "property",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers",
                          },
                          "type": "array",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'classMethod'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "abstract",
                              "private",
                              "#private",
                              "protected",
                              "public",
                              "requiresQuotes",
                              "static",
                              "override",
                              "async",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "classMethod",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'objectLiteralMethod'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "public",
                              "requiresQuotes",
                              "async",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "objectLiteralMethod",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'typeMethod'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "public",
                              "requiresQuotes",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "typeMethod",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'method'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "abstract",
                              "private",
                              "#private",
                              "protected",
                              "public",
                              "requiresQuotes",
                              "static",
                              "override",
                              "async",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "method",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'classicAccessor'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "abstract",
                              "private",
                              "protected",
                              "public",
                              "requiresQuotes",
                              "static",
                              "override",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "classicAccessor",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers",
                          },
                          "type": "array",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'autoAccessor'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "abstract",
                              "private",
                              "protected",
                              "public",
                              "requiresQuotes",
                              "static",
                              "override",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "autoAccessor",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers",
                          },
                          "type": "array",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'accessor'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "abstract",
                              "private",
                              "protected",
                              "public",
                              "requiresQuotes",
                              "static",
                              "override",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "accessor",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "types": {
                          "additionalItems": false,
                          "items": {
                            "$ref": "#/$defs/typeModifiers",
                          },
                          "type": "array",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'enumMember'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "requiresQuotes",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "enumMember",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'typeLike'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "abstract",
                              "exported",
                              "unused",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "typeLike",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'class'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "abstract",
                              "exported",
                              "unused",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "class",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'interface'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "exported",
                              "unused",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "interface",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'typeAlias'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "exported",
                              "unused",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "typeAlias",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'enum'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "exported",
                              "unused",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "enum",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'typeParameter'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "unused",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "typeParameter",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "description": "Selector 'import'",
                      "properties": {
                        "custom": {
                          "$ref": "#/$defs/matchRegexConfig",
                        },
                        "failureMessage": {
                          "type": "string",
                        },
                        "filter": {
                          "oneOf": [
                            {
                              "minLength": 1,
                              "type": "string",
                            },
                            {
                              "$ref": "#/$defs/matchRegexConfig",
                            },
                          ],
                        },
                        "format": {
                          "$ref": "#/$defs/formatOptionsConfig",
                        },
                        "leadingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                        "modifiers": {
                          "additionalItems": false,
                          "items": {
                            "enum": [
                              "default",
                              "namespace",
                            ],
                            "type": "string",
                          },
                          "type": "array",
                        },
                        "prefix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "selector": {
                          "enum": [
                            "import",
                          ],
                          "type": "string",
                        },
                        "suffix": {
                          "$ref": "#/$defs/prefixSuffixConfig",
                        },
                        "trailingUnderscore": {
                          "$ref": "#/$defs/underscoreOptions",
                        },
                      },
                      "required": [
                        "selector",
                        "format",
                      ],
                      "type": "object",
                    },
                  ],
                },
                "type": "array",
              },
              "type": "suggestion",
            },
          },
          "no-array-constructor": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow generic \`Array\` constructors",
                "extendsBaseRule": true,
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-array-constructor",
              },
              "fixable": "code",
              "messages": {
                "useLiteral": "The array literal notation [] is preferable.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-array-delete": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow using the \`delete\` operator on array values",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-array-delete",
              },
              "hasSuggestions": true,
              "messages": {
                "noArrayDelete": "Using the \`delete\` operator with an array expression is unsafe.",
                "useSplice": "Use \`array.splice()\` instead.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-base-to-string": {
            "create": [Function],
            "defaultOptions": [
              {
                "ignoredTypeNames": [
                  "Error",
                  "RegExp",
                  "URL",
                  "URLSearchParams",
                ],
              },
            ],
            "meta": {
              "docs": {
                "description": "Require \`.toString()\` and \`.toLocaleString()\` to only be called on objects which provide useful information when stringified",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-base-to-string",
              },
              "messages": {
                "baseArrayJoin": "Using \`join()\` for {{name}} {{certainty}} use Object's default stringification format ('[object Object]') when stringified.",
                "baseToString": "'{{name}}' {{certainty}} use Object's default stringification format ('[object Object]') when stringified.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoredTypeNames": {
                      "description": "Stringified regular expressions of type names to ignore.",
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-confusing-non-null-assertion": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow non-null assertion in locations that may be confusing",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/no-confusing-non-null-assertion",
              },
              "hasSuggestions": true,
              "messages": {
                "confusingAssign": "Confusing combination of non-null assertion and assignment like \`a! = b\`, which looks very similar to \`a != b\`.",
                "confusingEqual": "Confusing combination of non-null assertion and equality test like \`a! == b\`, which looks very similar to \`a !== b\`.",
                "confusingOperator": "Confusing combination of non-null assertion and \`{{operator}}\` operator like \`a! {{operator}} b\`, which might be misinterpreted as \`!(a {{operator}} b)\`.",
                "notNeedInAssign": "Remove unnecessary non-null assertion (!) in assignment left-hand side.",
                "notNeedInEqualTest": "Remove unnecessary non-null assertion (!) in equality test.",
                "notNeedInOperator": "Remove possibly unnecessary non-null assertion (!) in the left operand of the \`{{operator}}\` operator.",
                "wrapUpLeft": "Wrap the left-hand side in parentheses to avoid confusion with "{{operator}}" operator.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-confusing-void-expression": {
            "create": [Function],
            "defaultOptions": [
              {
                "ignoreArrowShorthand": false,
                "ignoreVoidOperator": false,
                "ignoreVoidReturningFunctions": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Require expressions of type void to appear in statement position",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-confusing-void-expression",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "invalidVoidExpr": "Placing a void expression inside another expression is forbidden. Move it to its own statement instead.",
                "invalidVoidExprArrow": "Returning a void expression from an arrow function shorthand is forbidden. Please add braces to the arrow function.",
                "invalidVoidExprArrowWrapVoid": "Void expressions returned from an arrow function shorthand must be marked explicitly with the \`void\` operator.",
                "invalidVoidExprReturn": "Returning a void expression from a function is forbidden. Please move it before the \`return\` statement.",
                "invalidVoidExprReturnLast": "Returning a void expression from a function is forbidden. Please remove the \`return\` statement.",
                "invalidVoidExprReturnWrapVoid": "Void expressions returned from a function must be marked explicitly with the \`void\` operator.",
                "invalidVoidExprWrapVoid": "Void expressions used inside another expression must be moved to its own statement or marked explicitly with the \`void\` operator.",
                "voidExprWrapVoid": "Mark with an explicit \`void\` operator.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreArrowShorthand": {
                      "description": "Whether to ignore "shorthand" \`() =>\` arrow functions: those without \`{ ... }\` braces.",
                      "type": "boolean",
                    },
                    "ignoreVoidOperator": {
                      "description": "Whether to ignore returns that start with the \`void\` operator.",
                      "type": "boolean",
                    },
                    "ignoreVoidReturningFunctions": {
                      "description": "Whether to ignore returns from functions with explicit \`void\` return types and functions with contextual \`void\` return types.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-deprecated": {
            "create": [Function],
            "defaultOptions": [
              {
                "allow": [],
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow using code marked as \`@deprecated\`",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-deprecated",
              },
              "messages": {
                "deprecated": "\`{{name}}\` is deprecated.",
                "deprecatedWithReason": "\`{{name}}\` is deprecated. {{reason}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "description": "Type specifiers that can be allowed.",
                      "items": {
                        "oneOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "file",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                              "path": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "from",
                              "name",
                            ],
                            "type": "object",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "lib",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                            },
                            "required": [
                              "from",
                              "name",
                            ],
                            "type": "object",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "package",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                              "package": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "from",
                              "name",
                              "package",
                            ],
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-dupe-class-members": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow duplicate class members",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/no-dupe-class-members",
              },
              "hasSuggestions": undefined,
              "messages": {
                "unexpected": "Duplicate name '{{name}}'.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-duplicate-enum-values": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow duplicate enum member values",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-duplicate-enum-values",
              },
              "hasSuggestions": false,
              "messages": {
                "duplicateValue": "Duplicate enum member value {{value}}.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-duplicate-type-constituents": {
            "create": [Function],
            "defaultOptions": [
              {
                "ignoreIntersections": false,
                "ignoreUnions": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow duplicate constituents of union or intersection types",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-duplicate-type-constituents",
              },
              "fixable": "code",
              "messages": {
                "duplicate": "{{type}} type constituent is duplicated with {{previous}}.",
                "unnecessary": "Explicit undefined is unnecessary on an optional parameter.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreIntersections": {
                      "description": "Whether to ignore \`&\` intersections.",
                      "type": "boolean",
                    },
                    "ignoreUnions": {
                      "description": "Whether to ignore \`|\` unions.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-dynamic-delete": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow using the \`delete\` operator on computed key expressions",
                "recommended": "strict",
                "url": "https://typescript-eslint.io/rules/no-dynamic-delete",
              },
              "fixable": "code",
              "messages": {
                "dynamicDelete": "Do not delete dynamically computed property keys.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-empty-function": {
            "create": [Function],
            "defaultOptions": [
              {
                "allow": [],
              },
            ],
            "meta": {
              "defaultOptions": [
                {
                  "allow": [],
                },
              ],
              "docs": {
                "description": "Disallow empty functions",
                "extendsBaseRule": true,
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/no-empty-function",
              },
              "hasSuggestions": undefined,
              "messages": {
                "unexpected": "Unexpected empty {{name}}.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "description": "Locations and kinds of functions that are allowed to be empty.",
                      "items": {
                        "enum": [
                          "functions",
                          "arrowFunctions",
                          "generatorFunctions",
                          "methods",
                          "generatorMethods",
                          "getters",
                          "setters",
                          "constructors",
                          "private-constructors",
                          "protected-constructors",
                          "asyncFunctions",
                          "asyncMethods",
                          "decoratedFunctions",
                          "overrideMethods",
                        ],
                        "type": "string",
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-empty-interface": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowSingleExtends": false,
              },
            ],
            "meta": {
              "deprecated": {
                "deprecatedSince": "8.0.0",
                "replacedBy": [
                  {
                    "rule": {
                      "name": "@typescript-eslint/no-empty-object-type",
                      "url": "https://typescript-eslint.io/rules/no-empty-object-type",
                    },
                  },
                ],
                "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8977",
              },
              "docs": {
                "description": "Disallow the declaration of empty interfaces",
                "url": "https://typescript-eslint.io/rules/no-empty-interface",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "noEmpty": "An empty interface is equivalent to \`{}\`.",
                "noEmptyWithSuper": "An interface declaring no members is equivalent to its supertype.",
              },
              "replacedBy": [
                "@typescript-eslint/no-empty-object-type",
              ],
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowSingleExtends": {
                      "description": "Whether to allow empty interfaces that extend a single other interface.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-empty-object-type": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowInterfaces": "never",
                "allowObjectTypes": "never",
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow accidentally using the "empty object" type",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-empty-object-type",
              },
              "hasSuggestions": true,
              "messages": {
                "noEmptyInterface": "An empty interface declaration allows any non-nullish value, including literals like \`0\` and \`""\`.
- If that's what you want, disable this lint rule with an inline comment or configure the '{{ option }}' rule option.
- If you want a type meaning "any object", you probably want \`object\` instead.
- If you want a type meaning "any value", you probably want \`unknown\` instead.",
                "noEmptyInterfaceWithSuper": "An interface declaring no members is equivalent to its supertype.",
                "noEmptyObject": "The \`{}\` ("empty object") type allows any non-nullish value, including literals like \`0\` and \`""\`.
- If that's what you want, disable this lint rule with an inline comment or configure the '{{ option }}' rule option.
- If you want a type meaning "any object", you probably want \`object\` instead.
- If you want a type meaning "any value", you probably want \`unknown\` instead.",
                "replaceEmptyInterface": "Replace empty interface with \`{{replacement}}\`.",
                "replaceEmptyInterfaceWithSuper": "Replace empty interface with a type alias.",
                "replaceEmptyObjectType": "Replace \`{}\` with \`{{replacement}}\`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowInterfaces": {
                      "description": "Whether to allow empty interfaces.",
                      "enum": [
                        "always",
                        "never",
                        "with-single-extends",
                      ],
                      "type": "string",
                    },
                    "allowObjectTypes": {
                      "description": "Whether to allow empty object type literals.",
                      "enum": [
                        "always",
                        "never",
                      ],
                      "type": "string",
                    },
                    "allowWithName": {
                      "description": "A stringified regular expression to allow interfaces and object type aliases with the configured name.",
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-explicit-any": {
            "create": [Function],
            "defaultOptions": [
              {
                "fixToUnknown": false,
                "ignoreRestArgs": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow the \`any\` type",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-explicit-any",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "suggestNever": "Use \`never\` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",
                "suggestUnknown": "Use \`unknown\` instead, this will force you to explicitly, and safely assert the type is correct.",
                "unexpectedAny": "Unexpected any. Specify a different type.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "fixToUnknown": {
                      "description": "Whether to enable auto-fixing in which the \`any\` type is converted to the \`unknown\` type.",
                      "type": "boolean",
                    },
                    "ignoreRestArgs": {
                      "description": "Whether to ignore rest parameter arrays.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-extra-non-null-assertion": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow extra non-null assertions",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-extra-non-null-assertion",
              },
              "fixable": "code",
              "messages": {
                "noExtraNonNullAssertion": "Forbidden extra non-null assertion.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-extraneous-class": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowConstructorOnly": false,
                "allowEmpty": false,
                "allowStaticOnly": false,
                "allowWithDecorator": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow classes used as namespaces",
                "recommended": "strict",
                "url": "https://typescript-eslint.io/rules/no-extraneous-class",
              },
              "messages": {
                "empty": "Unexpected empty class.",
                "onlyConstructor": "Unexpected class with only a constructor.",
                "onlyStatic": "Unexpected class with only static properties.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowConstructorOnly": {
                      "description": "Whether to allow extraneous classes that contain only a constructor.",
                      "type": "boolean",
                    },
                    "allowEmpty": {
                      "description": "Whether to allow extraneous classes that have no body (i.e. are empty).",
                      "type": "boolean",
                    },
                    "allowStaticOnly": {
                      "description": "Whether to allow extraneous classes that only contain static members.",
                      "type": "boolean",
                    },
                    "allowWithDecorator": {
                      "description": "Whether to allow extraneous classes that include a decorator.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-floating-promises": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowForKnownSafeCalls": [],
                "allowForKnownSafePromises": [],
                "checkThenables": false,
                "ignoreIIFE": false,
                "ignoreVoid": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Require Promise-like statements to be handled appropriately",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-floating-promises",
              },
              "hasSuggestions": true,
              "messages": {
                "floating": "Promises must be awaited, end with a call to .catch, or end with a call to .then with a rejection handler.",
                "floatingFixAwait": "Add await operator.",
                "floatingFixVoid": "Add void operator to ignore.",
                "floatingPromiseArray": "An array of Promises may be unintentional. Consider handling the promises' fulfillment or rejection with Promise.all or similar.",
                "floatingPromiseArrayVoid": "An array of Promises may be unintentional. Consider handling the promises' fulfillment or rejection with Promise.all or similar, or explicitly marking the expression as ignored with the \`void\` operator.",
                "floatingUselessRejectionHandler": "Promises must be awaited, end with a call to .catch, or end with a call to .then with a rejection handler. A rejection handler that is not a function will be ignored.",
                "floatingUselessRejectionHandlerVoid": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the \`void\` operator. A rejection handler that is not a function will be ignored.",
                "floatingVoid": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the \`void\` operator.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowForKnownSafeCalls": {
                      "description": "Type specifiers of functions whose calls are safe to float.",
                      "items": {
                        "oneOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "file",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                              "path": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "from",
                              "name",
                            ],
                            "type": "object",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "lib",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                            },
                            "required": [
                              "from",
                              "name",
                            ],
                            "type": "object",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "package",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                              "package": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "from",
                              "name",
                              "package",
                            ],
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                    "allowForKnownSafePromises": {
                      "description": "Type specifiers that are known to be safe to float.",
                      "items": {
                        "oneOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "file",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                              "path": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "from",
                              "name",
                            ],
                            "type": "object",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "lib",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                            },
                            "required": [
                              "from",
                              "name",
                            ],
                            "type": "object",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "package",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                              "package": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "from",
                              "name",
                              "package",
                            ],
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                    "checkThenables": {
                      "description": "Whether to check all "Thenable"s, not just the built-in Promise type.",
                      "type": "boolean",
                    },
                    "ignoreIIFE": {
                      "description": "Whether to ignore async IIFEs (Immediately Invoked Function Expressions).",
                      "type": "boolean",
                    },
                    "ignoreVoid": {
                      "description": "Whether to ignore \`void\` expressions.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-for-in-array": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow iterating over an array with a for-in loop",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-for-in-array",
              },
              "messages": {
                "forInViolation": "For-in loops over arrays skips holes, returns indices as strings, and may visit the prototype chain or other enumerable properties. Use a more robust iteration method such as for-of or array.forEach instead.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-implied-eval": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow the use of \`eval()\`-like functions",
                "extendsBaseRule": true,
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-implied-eval",
              },
              "messages": {
                "noFunctionConstructor": "Implied eval. Do not use the Function constructor to create functions.",
                "noImpliedEvalError": "Implied eval. Consider passing a function.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-import-type-side-effects": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce the use of top-level import type qualifier when an import only has specifiers with inline type qualifiers",
                "url": "https://typescript-eslint.io/rules/no-import-type-side-effects",
              },
              "fixable": "code",
              "messages": {
                "useTopLevelQualifier": "TypeScript will only remove the inline type specifiers which will leave behind a side effect import at runtime. Convert this to a top-level type qualifier to properly remove the entire import.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-inferrable-types": {
            "create": [Function],
            "defaultOptions": [
              {
                "ignoreParameters": false,
                "ignoreProperties": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow explicit type declarations for variables or parameters initialized to a number, string, or boolean",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/no-inferrable-types",
              },
              "fixable": "code",
              "messages": {
                "noInferrableType": "Type {{type}} trivially inferred from a {{type}} literal, remove type annotation.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreParameters": {
                      "description": "Whether to ignore function parameters.",
                      "type": "boolean",
                    },
                    "ignoreProperties": {
                      "description": "Whether to ignore class properties.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-invalid-this": {
            "create": [Function],
            "defaultOptions": [
              {
                "capIsConstructor": true,
              },
            ],
            "meta": {
              "defaultOptions": [
                {
                  "capIsConstructor": true,
                },
              ],
              "docs": {
                "description": "Disallow \`this\` keywords outside of classes or class-like objects",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/no-invalid-this",
              },
              "hasSuggestions": undefined,
              "messages": {
                "unexpectedThis": "Unexpected 'this'.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "capIsConstructor": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-invalid-void-type": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowAsThisParameter": false,
                "allowInGenericTypeArguments": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow \`void\` type outside of generic or return types",
                "recommended": "strict",
                "url": "https://typescript-eslint.io/rules/no-invalid-void-type",
              },
              "messages": {
                "invalidVoidForGeneric": "{{ generic }} may not have void as a type argument.",
                "invalidVoidNotReturn": "void is only valid as a return type.",
                "invalidVoidNotReturnOrGeneric": "void is only valid as a return type or generic type argument.",
                "invalidVoidNotReturnOrThisParam": "void is only valid as return type or type of \`this\` parameter.",
                "invalidVoidNotReturnOrThisParamOrGeneric": "void is only valid as a return type or generic type argument or the type of a \`this\` parameter.",
                "invalidVoidUnionConstituent": "void is not valid as a constituent in a union type",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowAsThisParameter": {
                      "description": "Whether a \`this\` parameter of a function may be \`void\`.",
                      "type": "boolean",
                    },
                    "allowInGenericTypeArguments": {
                      "description": "Whether \`void\` can be used as a valid value for generic type parameters.",
                      "oneOf": [
                        {
                          "description": "Whether \`void\` can be used as a valid value for all generic type parameters.",
                          "type": "boolean",
                        },
                        {
                          "description": "Allowlist of types that may accept \`void\` as a generic type parameter.",
                          "items": {
                            "type": "string",
                          },
                          "minItems": 1,
                          "type": "array",
                        },
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-loop-func": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow function declarations that contain unsafe references inside loop statements",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/no-loop-func",
              },
              "hasSuggestions": undefined,
              "messages": {
                "unsafeRefs": "Function declared in a loop contains unsafe references to variable(s) {{ varNames }}.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-loss-of-precision": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "deprecated": {
                "deprecatedSince": "8.0.0",
                "replacedBy": [
                  {
                    "rule": {
                      "name": "no-loss-of-precision",
                      "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision",
                    },
                  },
                ],
                "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8832",
              },
              "docs": {
                "description": "Disallow literal numbers that lose precision",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/no-loss-of-precision",
              },
              "hasSuggestions": undefined,
              "messages": {
                "noLossOfPrecision": "This number literal will lose precision at runtime.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-magic-numbers": {
            "create": [Function],
            "defaultOptions": [
              {
                "detectObjects": false,
                "enforceConst": false,
                "ignore": [],
                "ignoreArrayIndexes": false,
                "ignoreEnums": false,
                "ignoreNumericLiteralTypes": false,
                "ignoreReadonlyClassProperties": false,
                "ignoreTypeIndexes": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow magic numbers",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/no-magic-numbers",
              },
              "messages": {
                "noMagic": "No magic number: {{raw}}.",
                "useConst": "Number constants declarations must use 'const'.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "detectObjects": {
                      "default": false,
                      "type": "boolean",
                    },
                    "enforceConst": {
                      "default": false,
                      "type": "boolean",
                    },
                    "ignore": {
                      "items": {
                        "anyOf": [
                          {
                            "type": "number",
                          },
                          {
                            "pattern": "^[+-]?(?:0|[1-9][0-9]*)n$",
                            "type": "string",
                          },
                        ],
                      },
                      "type": "array",
                      "uniqueItems": true,
                    },
                    "ignoreArrayIndexes": {
                      "default": false,
                      "type": "boolean",
                    },
                    "ignoreClassFieldInitialValues": {
                      "default": false,
                      "type": "boolean",
                    },
                    "ignoreDefaultValues": {
                      "default": false,
                      "type": "boolean",
                    },
                    "ignoreEnums": {
                      "description": "Whether enums used in TypeScript are considered okay.",
                      "type": "boolean",
                    },
                    "ignoreNumericLiteralTypes": {
                      "description": "Whether numbers used in TypeScript numeric literal types are considered okay.",
                      "type": "boolean",
                    },
                    "ignoreReadonlyClassProperties": {
                      "description": "Whether \`readonly\` class properties are considered okay.",
                      "type": "boolean",
                    },
                    "ignoreTypeIndexes": {
                      "description": "Whether numbers used to index types are okay.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-meaningless-void-operator": {
            "create": [Function],
            "defaultOptions": [
              {
                "checkNever": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow the \`void\` operator except when used to discard a value",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-meaningless-void-operator",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "meaninglessVoidOperator": "void operator shouldn't be used on {{type}}; it should convey that a return value is being ignored",
                "removeVoid": "Remove 'void'",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "checkNever": {
                      "default": false,
                      "description": "Whether to suggest removing \`void\` when the argument has type \`never\`.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-misused-new": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce valid definition of \`new\` and \`constructor\`",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-misused-new",
              },
              "messages": {
                "errorMessageClass": "Class cannot have method named \`new\`.",
                "errorMessageInterface": "Interfaces cannot be constructed, only classes.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-misused-promises": {
            "create": [Function],
            "defaultOptions": [
              {
                "checksConditionals": true,
                "checksSpreads": true,
                "checksVoidReturn": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow Promises in places not designed to handle them",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-misused-promises",
              },
              "messages": {
                "conditional": "Expected non-Promise value in a boolean conditional.",
                "predicate": "Expected a non-Promise value to be returned.",
                "spread": "Expected a non-Promise value to be spreaded in an object.",
                "voidReturnArgument": "Promise returned in function argument where a void return was expected.",
                "voidReturnAttribute": "Promise-returning function provided to attribute where a void return was expected.",
                "voidReturnInheritedMethod": "Promise-returning method provided where a void return was expected by extended/implemented type '{{ heritageTypeName }}'.",
                "voidReturnProperty": "Promise-returning function provided to property where a void return was expected.",
                "voidReturnReturnValue": "Promise-returning function provided to return value where a void return was expected.",
                "voidReturnVariable": "Promise-returning function provided to variable where a void return was expected.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "checksConditionals": {
                      "description": "Whether to warn when a Promise is provided to conditional statements.",
                      "type": "boolean",
                    },
                    "checksSpreads": {
                      "description": "Whether to warn when \`...\` spreading a \`Promise\`.",
                      "type": "boolean",
                    },
                    "checksVoidReturn": {
                      "description": "Whether to warn when a Promise is returned from a function typed as returning \`void\`.",
                      "oneOf": [
                        {
                          "description": "Whether to disable checking all asynchronous functions.",
                          "type": "boolean",
                        },
                        {
                          "additionalProperties": false,
                          "description": "Which forms of functions may have checking disabled.",
                          "properties": {
                            "arguments": {
                              "description": "Disables checking an asynchronous function passed as argument where the parameter type expects a function that returns \`void\`.",
                              "type": "boolean",
                            },
                            "attributes": {
                              "description": "Disables checking an asynchronous function passed as a JSX attribute expected to be a function that returns \`void\`.",
                              "type": "boolean",
                            },
                            "inheritedMethods": {
                              "description": "Disables checking an asynchronous method in a type that extends or implements another type expecting that method to return \`void\`.",
                              "type": "boolean",
                            },
                            "properties": {
                              "description": "Disables checking an asynchronous function passed as an object property expected to be a function that returns \`void\`.",
                              "type": "boolean",
                            },
                            "returns": {
                              "description": "Disables checking an asynchronous function returned in a function whose return type is a function that returns \`void\`.",
                              "type": "boolean",
                            },
                            "variables": {
                              "description": "Disables checking an asynchronous function used as a variable whose return type is a function that returns \`void\`.",
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-misused-spread": {
            "create": [Function],
            "defaultOptions": [
              {
                "allow": [],
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow using the spread operator when it might cause unexpected behavior",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-misused-spread",
              },
              "hasSuggestions": true,
              "messages": {
                "addAwait": "Add await operator.",
                "noArraySpreadInObject": "Using the spread operator on an array in an object will result in a list of indices.",
                "noClassDeclarationSpreadInObject": "Using the spread operator on class declarations will spread only their static properties, and will lose their class prototype.",
                "noClassInstanceSpreadInObject": "Using the spread operator on class instances will lose their class prototype.",
                "noFunctionSpreadInObject": "Using the spread operator on a function without additional properties can cause unexpected behavior. Did you forget to call the function?",
                "noIterableSpreadInObject": "Using the spread operator on an Iterable in an object can cause unexpected behavior.",
                "noMapSpreadInObject": "Using the spread operator on a Map in an object will result in an empty object. Did you mean to use \`Object.fromEntries(map)\` instead?",
                "noPromiseSpreadInObject": "Using the spread operator on Promise in an object can cause unexpected behavior. Did you forget to await the promise?",
                "noStringSpread": "Using the spread operator on a string can mishandle special characters, as can \`.split("")\`.
- \`...\` produces Unicode code points, which will decompose complex emojis into individual emojis
- .split("") produces UTF-16 code units, which breaks rich characters in many languages
Consider using \`Intl.Segmenter\` for locale-aware string decomposition.
Otherwise, if you don't need to preserve emojis or other non-Ascii characters, disable this lint rule on this line or configure the 'allow' rule option.",
                "replaceMapSpreadInObject": "Replace map spread in object with \`Object.fromEntries()\`",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "description": "An array of type specifiers that are known to be safe to spread.",
                      "items": {
                        "oneOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "file",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                              "path": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "from",
                              "name",
                            ],
                            "type": "object",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "lib",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                            },
                            "required": [
                              "from",
                              "name",
                            ],
                            "type": "object",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "package",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                              "package": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "from",
                              "name",
                              "package",
                            ],
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-mixed-enums": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow enums from having both number and string members",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-mixed-enums",
              },
              "messages": {
                "mixed": "Mixing number and string enums can be confusing.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-namespace": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowDeclarations": false,
                "allowDefinitionFiles": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow TypeScript namespaces",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-namespace",
              },
              "messages": {
                "moduleSyntaxIsPreferred": "ES2015 module syntax is preferred over namespaces.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowDeclarations": {
                      "description": "Whether to allow \`declare\` with custom TypeScript namespaces.",
                      "type": "boolean",
                    },
                    "allowDefinitionFiles": {
                      "description": "Whether to allow \`declare\` with custom TypeScript namespaces inside definition files.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-non-null-asserted-nullish-coalescing": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow non-null assertions in the left operand of a nullish coalescing operator",
                "recommended": "strict",
                "url": "https://typescript-eslint.io/rules/no-non-null-asserted-nullish-coalescing",
              },
              "hasSuggestions": true,
              "messages": {
                "noNonNullAssertedNullishCoalescing": "The nullish coalescing operator is designed to handle undefined and null - using a non-null assertion is not needed.",
                "suggestRemovingNonNull": "Remove the non-null assertion.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-non-null-asserted-optional-chain": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow non-null assertions after an optional chain expression",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-non-null-asserted-optional-chain",
              },
              "hasSuggestions": true,
              "messages": {
                "noNonNullOptionalChain": "Optional chain expressions can return undefined by design - using a non-null assertion is unsafe and wrong.",
                "suggestRemovingNonNull": "You should remove the non-null assertion.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-non-null-assertion": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow non-null assertions using the \`!\` postfix operator",
                "recommended": "strict",
                "url": "https://typescript-eslint.io/rules/no-non-null-assertion",
              },
              "hasSuggestions": true,
              "messages": {
                "noNonNull": "Forbidden non-null assertion.",
                "suggestOptionalChain": "Consider using the optional chain operator \`?.\` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-redeclare": {
            "create": [Function],
            "defaultOptions": [
              {
                "builtinGlobals": true,
                "ignoreDeclarationMerge": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow variable redeclaration",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/no-redeclare",
              },
              "messages": {
                "redeclared": "'{{id}}' is already defined.",
                "redeclaredAsBuiltin": "'{{id}}' is already defined as a built-in global variable.",
                "redeclaredBySyntax": "'{{id}}' is already defined by a variable declaration.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "builtinGlobals": {
                      "description": "Whether to report shadowing of built-in global variables.",
                      "type": "boolean",
                    },
                    "ignoreDeclarationMerge": {
                      "description": "Whether to ignore declaration merges between certain TypeScript declaration types.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-redundant-type-constituents": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow members of unions and intersections that do nothing or override type information",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-redundant-type-constituents",
              },
              "messages": {
                "errorTypeOverrides": "'{{typeName}}' is an 'error' type that acts as 'any' and overrides all other types in this {{container}} type.",
                "literalOverridden": "{{literal}} is overridden by {{primitive}} in this union type.",
                "overridden": "'{{typeName}}' is overridden by other types in this {{container}} type.",
                "overrides": "'{{typeName}}' overrides all other types in this {{container}} type.",
                "primitiveOverridden": "{{primitive}} is overridden by the {{literal}} in this intersection type.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-require-imports": {
            "create": [Function],
            "defaultOptions": [
              {
                "allow": [],
                "allowAsImport": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow invocation of \`require()\`",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-require-imports",
              },
              "messages": {
                "noRequireImports": "A \`require()\` style import is forbidden.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "description": "Patterns of import paths to allow requiring from.",
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "allowAsImport": {
                      "description": "Allows \`require\` statements in import declarations.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-restricted-imports": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow specified modules when loaded by \`import\`",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/no-restricted-imports",
              },
              "fixable": undefined,
              "messages": {
                "allowedImportName": "'{{importName}}' import from '{{importSource}}' is restricted because only '{{allowedImportNames}}' import(s) is/are allowed.",
                "allowedImportNamePattern": "'{{importName}}' import from '{{importSource}}' is restricted because only imports that match the pattern '{{allowedImportNamePattern}}' are allowed from '{{importSource}}'.",
                "allowedImportNamePatternWithCustomMessage": "'{{importName}}' import from '{{importSource}}' is restricted because only imports that match the pattern '{{allowedImportNamePattern}}' are allowed from '{{importSource}}'. {{customMessage}}",
                "allowedImportNameWithCustomMessage": "'{{importName}}' import from '{{importSource}}' is restricted because only '{{allowedImportNames}}' import(s) is/are allowed. {{customMessage}}",
                "everything": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted.",
                "everythingWithAllowImportNames": "* import is invalid because only '{{allowedImportNames}}' from '{{importSource}}' is/are allowed.",
                "everythingWithAllowImportNamesAndCustomMessage": "* import is invalid because only '{{allowedImportNames}}' from '{{importSource}}' is/are allowed. {{customMessage}}",
                "everythingWithAllowedImportNamePattern": "* import is invalid because only imports that match the pattern '{{allowedImportNamePattern}}' from '{{importSource}}' are allowed.",
                "everythingWithAllowedImportNamePatternWithCustomMessage": "* import is invalid because only imports that match the pattern '{{allowedImportNamePattern}}' from '{{importSource}}' are allowed. {{customMessage}}",
                "everythingWithCustomMessage": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted. {{customMessage}}",
                "importName": "'{{importName}}' import from '{{importSource}}' is restricted.",
                "importNameWithCustomMessage": "'{{importName}}' import from '{{importSource}}' is restricted. {{customMessage}}",
                "path": "'{{importSource}}' import is restricted from being used.",
                "pathWithCustomMessage": "'{{importSource}}' import is restricted from being used. {{customMessage}}",
                "patternAndEverything": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted from being used by a pattern.",
                "patternAndEverythingWithCustomMessage": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted from being used by a pattern. {{customMessage}}",
                "patternAndEverythingWithRegexImportName": "* import is invalid because import name matching '{{importNames}}' pattern from '{{importSource}}' is restricted from being used.",
                "patternAndEverythingWithRegexImportNameAndCustomMessage": "* import is invalid because import name matching '{{importNames}}' pattern from '{{importSource}}' is restricted from being used. {{customMessage}}",
                "patternAndImportName": "'{{importName}}' import from '{{importSource}}' is restricted from being used by a pattern.",
                "patternAndImportNameWithCustomMessage": "'{{importName}}' import from '{{importSource}}' is restricted from being used by a pattern. {{customMessage}}",
                "patternWithCustomMessage": "'{{importSource}}' import is restricted from being used by a pattern. {{customMessage}}",
                "patterns": "'{{importSource}}' import is restricted from being used by a pattern.",
              },
              "schema": {
                "anyOf": [
                  {
                    "items": {
                      "anyOf": [
                        {
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "properties": {
                            "allowImportNames": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "allowTypeImports": {
                              "description": "Whether to allow type-only imports for a path.",
                              "type": "boolean",
                            },
                            "importNames": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                            "message": {
                              "minLength": 1,
                              "type": "string",
                            },
                            "name": {
                              "type": "string",
                            },
                          },
                          "required": [
                            "name",
                          ],
                          "type": "object",
                        },
                      ],
                    },
                    "type": "array",
                    "uniqueItems": true,
                  },
                  {
                    "additionalItems": false,
                    "items": [
                      {
                        "additionalProperties": false,
                        "properties": {
                          "paths": {
                            "items": {
                              "anyOf": [
                                {
                                  "type": "string",
                                },
                                {
                                  "additionalProperties": false,
                                  "properties": {
                                    "allowImportNames": {
                                      "items": {
                                        "type": "string",
                                      },
                                      "type": "array",
                                    },
                                    "allowTypeImports": {
                                      "description": "Whether to allow type-only imports for a path.",
                                      "type": "boolean",
                                    },
                                    "importNames": {
                                      "items": {
                                        "type": "string",
                                      },
                                      "type": "array",
                                    },
                                    "message": {
                                      "minLength": 1,
                                      "type": "string",
                                    },
                                    "name": {
                                      "type": "string",
                                    },
                                  },
                                  "required": [
                                    "name",
                                  ],
                                  "type": "object",
                                },
                              ],
                            },
                            "type": "array",
                            "uniqueItems": true,
                          },
                          "patterns": {
                            "anyOf": [
                              {
                                "items": {
                                  "type": "string",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                              {
                                "items": {
                                  "additionalProperties": false,
                                  "properties": {
                                    "allowImportNamePattern": {
                                      "type": "string",
                                    },
                                    "allowImportNames": {
                                      "items": {
                                        "type": "string",
                                      },
                                      "minItems": 1,
                                      "type": "array",
                                      "uniqueItems": true,
                                    },
                                    "allowTypeImports": {
                                      "description": "Whether to allow type-only imports for a path.",
                                      "type": "boolean",
                                    },
                                    "caseSensitive": {
                                      "type": "boolean",
                                    },
                                    "group": {
                                      "items": {
                                        "type": "string",
                                      },
                                      "minItems": 1,
                                      "type": "array",
                                      "uniqueItems": true,
                                    },
                                    "importNamePattern": {
                                      "type": "string",
                                    },
                                    "importNames": {
                                      "items": {
                                        "type": "string",
                                      },
                                      "minItems": 1,
                                      "type": "array",
                                      "uniqueItems": true,
                                    },
                                    "message": {
                                      "minLength": 1,
                                      "type": "string",
                                    },
                                    "regex": {
                                      "type": "string",
                                    },
                                  },
                                  "required": undefined,
                                  "type": "object",
                                },
                                "type": "array",
                                "uniqueItems": true,
                              },
                            ],
                          },
                        },
                        "type": "object",
                      },
                    ],
                    "type": "array",
                  },
                ],
              },
              "type": "suggestion",
            },
          },
          "no-restricted-types": {
            "create": [Function],
            "defaultOptions": [
              {},
            ],
            "meta": {
              "docs": {
                "description": "Disallow certain types",
                "url": "https://typescript-eslint.io/rules/no-restricted-types",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "bannedTypeMessage": "Don't use \`{{name}}\` as a type.{{customMessage}}",
                "bannedTypeReplacement": "Replace \`{{name}}\` with \`{{replacement}}\`.",
              },
              "schema": [
                {
                  "$defs": {
                    "banConfig": {
                      "oneOf": [
                        {
                          "description": "Bans the type with the default message.",
                          "enum": [
                            true,
                          ],
                          "type": "boolean",
                        },
                        {
                          "description": "Bans the type with a custom message.",
                          "type": "string",
                        },
                        {
                          "additionalProperties": false,
                          "description": "Bans a type.",
                          "properties": {
                            "fixWith": {
                              "description": "Type to autofix replace with. Note that autofixers can be applied automatically - so you need to be careful with this option.",
                              "type": "string",
                            },
                            "message": {
                              "description": "Custom error message.",
                              "type": "string",
                            },
                            "suggest": {
                              "description": "Types to suggest replacing with.",
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                          },
                          "type": "object",
                        },
                      ],
                    },
                  },
                  "additionalProperties": false,
                  "properties": {
                    "types": {
                      "additionalProperties": {
                        "$ref": "#/items/0/$defs/banConfig",
                      },
                      "description": "An object whose keys are the types you want to ban, and the values are error messages.",
                      "type": "object",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-shadow": {
            "create": [Function],
            "defaultOptions": [
              {
                "allow": [],
                "builtinGlobals": false,
                "hoist": "functions-and-types",
                "ignoreFunctionTypeParameterNameValueShadow": true,
                "ignoreOnInitialization": false,
                "ignoreTypeValueShadow": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow variable declarations from shadowing variables declared in the outer scope",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/no-shadow",
              },
              "messages": {
                "noShadow": "'{{name}}' is already declared in the upper scope on line {{shadowedLine}} column {{shadowedColumn}}.",
                "noShadowGlobal": "'{{name}}' is already a global variable.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "description": "Identifier names for which shadowing is allowed.",
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "builtinGlobals": {
                      "description": "Whether to report shadowing of built-in global variables.",
                      "type": "boolean",
                    },
                    "hoist": {
                      "description": "Whether to report shadowing before outer functions or variables are defined.",
                      "enum": [
                        "all",
                        "functions",
                        "functions-and-types",
                        "never",
                        "types",
                      ],
                      "type": "string",
                    },
                    "ignoreFunctionTypeParameterNameValueShadow": {
                      "description": "Whether to ignore function parameters named the same as a variable.",
                      "type": "boolean",
                    },
                    "ignoreOnInitialization": {
                      "description": "Whether to ignore the variable initializers when the shadowed variable is presumably still unitialized.",
                      "type": "boolean",
                    },
                    "ignoreTypeValueShadow": {
                      "description": "Whether to ignore types named the same as a variable.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-this-alias": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowDestructuring": true,
                "allowedNames": [],
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow aliasing \`this\`",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-this-alias",
              },
              "messages": {
                "thisAssignment": "Unexpected aliasing of 'this' to local variable.",
                "thisDestructure": "Unexpected aliasing of members of 'this' to local variables.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowDestructuring": {
                      "description": "Whether to ignore destructurings, such as \`const { props, state } = this\`.",
                      "type": "boolean",
                    },
                    "allowedNames": {
                      "description": "Names to ignore, such as ["self"] for \`const self = this;\`.",
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-type-alias": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowAliases": "never",
                "allowCallbacks": "never",
                "allowConditionalTypes": "never",
                "allowConstructors": "never",
                "allowGenerics": "never",
                "allowLiterals": "never",
                "allowMappedTypes": "never",
                "allowTupleTypes": "never",
              },
            ],
            "meta": {
              "deprecated": {
                "deprecatedSince": "6.0.0",
                "replacedBy": [
                  {
                    "rule": {
                      "name": "@typescript-eslint/consistent-type-definitions",
                      "url": "https://typescript-eslint.io/rules/consistent-type-definitions",
                    },
                  },
                ],
                "url": "https://github.com/typescript-eslint/typescript-eslint/pull/6229",
              },
              "docs": {
                "description": "Disallow type aliases",
                "url": "https://typescript-eslint.io/rules/no-type-alias",
              },
              "messages": {
                "noCompositionAlias": "{{typeName}} in {{compositionType}} types are not allowed.",
                "noTypeAlias": "Type {{alias}} are not allowed.",
              },
              "schema": [
                {
                  "$defs": {
                    "expandedOptions": {
                      "enum": [
                        "always",
                        "never",
                        "in-unions",
                        "in-intersections",
                        "in-unions-and-intersections",
                      ],
                      "type": "string",
                    },
                    "simpleOptions": {
                      "enum": [
                        "always",
                        "never",
                      ],
                      "type": "string",
                    },
                  },
                  "additionalProperties": false,
                  "properties": {
                    "allowAliases": {
                      "$ref": "#/items/0/$defs/expandedOptions",
                      "description": "Whether to allow direct one-to-one type aliases.",
                    },
                    "allowCallbacks": {
                      "$ref": "#/items/0/$defs/simpleOptions",
                      "description": "Whether to allow type aliases for callbacks.",
                    },
                    "allowConditionalTypes": {
                      "$ref": "#/items/0/$defs/simpleOptions",
                      "description": "Whether to allow type aliases for conditional types.",
                    },
                    "allowConstructors": {
                      "$ref": "#/items/0/$defs/simpleOptions",
                      "description": "Whether to allow type aliases with constructors.",
                    },
                    "allowGenerics": {
                      "$ref": "#/items/0/$defs/simpleOptions",
                      "description": "Whether to allow type aliases with generic types.",
                    },
                    "allowLiterals": {
                      "$ref": "#/items/0/$defs/expandedOptions",
                      "description": "Whether to allow type aliases with object literal types.",
                    },
                    "allowMappedTypes": {
                      "$ref": "#/items/0/$defs/expandedOptions",
                      "description": "Whether to allow type aliases with mapped types.",
                    },
                    "allowTupleTypes": {
                      "$ref": "#/items/0/$defs/expandedOptions",
                      "description": "Whether to allow type aliases with tuple types.",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-unnecessary-boolean-literal-compare": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowComparingNullableBooleansToFalse": true,
                "allowComparingNullableBooleansToTrue": true,
                "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow unnecessary equality comparisons against boolean literals",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unnecessary-boolean-literal-compare",
              },
              "fixable": "code",
              "messages": {
                "comparingNullableToFalse": "This expression unnecessarily compares a nullable boolean value to false instead of using the ?? operator to provide a default.",
                "comparingNullableToTrueDirect": "This expression unnecessarily compares a nullable boolean value to true instead of using it directly.",
                "comparingNullableToTrueNegated": "This expression unnecessarily compares a nullable boolean value to true instead of negating it.",
                "direct": "This expression unnecessarily compares a boolean value to a boolean instead of using it directly.",
                "negated": "This expression unnecessarily compares a boolean value to a boolean instead of negating it.",
                "noStrictNullCheck": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowComparingNullableBooleansToFalse": {
                      "description": "Whether to allow comparisons between nullable boolean variables and \`false\`.",
                      "type": "boolean",
                    },
                    "allowComparingNullableBooleansToTrue": {
                      "description": "Whether to allow comparisons between nullable boolean variables and \`true\`.",
                      "type": "boolean",
                    },
                    "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
                      "description": "Unless this is set to \`true\`, the rule will error on every file whose \`tsconfig.json\` does _not_ have the \`strictNullChecks\` compiler option (or \`strict\`) set to \`true\`.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-unnecessary-condition": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowConstantLoopConditions": "never",
                "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": false,
                "checkTypePredicates": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow conditionals where the type is always truthy or always falsy",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unnecessary-condition",
              },
              "fixable": "code",
              "messages": {
                "alwaysFalsy": "Unnecessary conditional, value is always falsy.",
                "alwaysFalsyFunc": "This callback should return a conditional, but return is always falsy.",
                "alwaysNullish": "Unnecessary conditional, left-hand side of \`??\` operator is always \`null\` or \`undefined\`.",
                "alwaysTruthy": "Unnecessary conditional, value is always truthy.",
                "alwaysTruthyFunc": "This callback should return a conditional, but return is always truthy.",
                "comparisonBetweenLiteralTypes": "Unnecessary conditional, comparison is always {{trueOrFalse}}, since \`{{left}} {{operator}} {{right}}\` is {{trueOrFalse}}.",
                "never": "Unnecessary conditional, value is \`never\`.",
                "neverNullish": "Unnecessary conditional, expected left-hand side of \`??\` operator to be possibly null or undefined.",
                "neverOptionalChain": "Unnecessary optional chain on a non-nullish value.",
                "noOverlapBooleanExpression": "Unnecessary conditional, the types have no overlap.",
                "noStrictNullCheck": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
                "typeGuardAlreadyIsType": "Unnecessary conditional, expression already has the type being checked by the {{typeGuardOrAssertionFunction}}.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowConstantLoopConditions": {
                      "description": "Whether to ignore constant loop conditions, such as \`while (true)\`.",
                      "oneOf": [
                        {
                          "type": "boolean",
                        },
                        {
                          "enum": [
                            "always",
                            "never",
                            "only-allowed-literals",
                          ],
                          "type": "string",
                        },
                      ],
                    },
                    "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
                      "description": "Whether to not error when running with a tsconfig that has strictNullChecks turned.",
                      "type": "boolean",
                    },
                    "checkTypePredicates": {
                      "description": "Whether to check the asserted argument of a type predicate function for unnecessary conditions",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-unnecessary-parameter-property-assignment": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow unnecessary assignment of constructor property parameter",
                "url": "https://typescript-eslint.io/rules/no-unnecessary-parameter-property-assignment",
              },
              "messages": {
                "unnecessaryAssign": "This assignment is unnecessary since it is already assigned by a parameter property.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-unnecessary-qualifier": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow unnecessary namespace qualifiers",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unnecessary-qualifier",
              },
              "fixable": "code",
              "messages": {
                "unnecessaryQualifier": "Qualifier is unnecessary since '{{ name }}' is in scope.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-unnecessary-template-expression": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow unnecessary template expressions",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unnecessary-template-expression",
              },
              "fixable": "code",
              "messages": {
                "noUnnecessaryTemplateExpression": "Template literal expression is unnecessary and can be simplified.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-unnecessary-type-arguments": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow type arguments that are equal to the default",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unnecessary-type-arguments",
              },
              "fixable": "code",
              "messages": {
                "unnecessaryTypeParameter": "This is the default value for this type parameter, so it can be omitted.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-unnecessary-type-assertion": {
            "create": [Function],
            "defaultOptions": [
              {},
            ],
            "meta": {
              "docs": {
                "description": "Disallow type assertions that do not change the type of an expression",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unnecessary-type-assertion",
              },
              "fixable": "code",
              "messages": {
                "contextuallyUnnecessary": "This assertion is unnecessary since the receiver accepts the original type of the expression.",
                "unnecessaryAssertion": "This assertion is unnecessary since it does not change the type of the expression.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "typesToIgnore": {
                      "description": "A list of type names to ignore.",
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-unnecessary-type-constraint": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow unnecessary constraints on generic types",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-unnecessary-type-constraint",
              },
              "hasSuggestions": true,
              "messages": {
                "removeUnnecessaryConstraint": "Remove the unnecessary \`{{constraint}}\` constraint.",
                "unnecessaryConstraint": "Constraining the generic type \`{{name}}\` to \`{{constraint}}\` does nothing and is unnecessary.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-unnecessary-type-parameters": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow type parameters that aren't used multiple times",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unnecessary-type-parameters",
              },
              "hasSuggestions": true,
              "messages": {
                "replaceUsagesWithConstraint": "Replace all usages of type parameter with its constraint.",
                "sole": "Type parameter {{name}} is {{uses}} in the {{descriptor}} signature.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-unsafe-argument": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow calling a function with a value with type \`any\`",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unsafe-argument",
              },
              "messages": {
                "unsafeArgument": "Unsafe argument of type {{sender}} assigned to a parameter of type {{receiver}}.",
                "unsafeArraySpread": "Unsafe spread of an {{sender}} array type.",
                "unsafeSpread": "Unsafe spread of an {{sender}} type.",
                "unsafeTupleSpread": "Unsafe spread of a tuple type. The argument is {{sender}} and is assigned to a parameter of type {{receiver}}.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-unsafe-assignment": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow assigning a value with type \`any\` to variables and properties",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unsafe-assignment",
              },
              "messages": {
                "anyAssignment": "Unsafe assignment of an {{sender}} value.",
                "anyAssignmentThis": "Unsafe assignment of an {{sender}} value. \`this\` is typed as \`any\`.
You can try to fix this by turning on the \`noImplicitThis\` compiler option, or adding a \`this\` parameter to the function.",
                "unsafeArrayPattern": "Unsafe array destructuring of an {{sender}} array value.",
                "unsafeArrayPatternFromTuple": "Unsafe array destructuring of a tuple element with an {{sender}} value.",
                "unsafeArraySpread": "Unsafe spread of an {{sender}} value in an array.",
                "unsafeAssignment": "Unsafe assignment of type {{sender}} to a variable of type {{receiver}}.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-unsafe-call": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow calling a value with type \`any\`",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unsafe-call",
              },
              "messages": {
                "unsafeCall": "Unsafe call of a(n) {{type}} typed value.",
                "unsafeCallThis": "Unsafe call of a(n) {{type}} typed value. \`this\` is typed as {{type}}.
You can try to fix this by turning on the \`noImplicitThis\` compiler option, or adding a \`this\` parameter to the function.",
                "unsafeNew": "Unsafe construction of a(n) {{type}} typed value.",
                "unsafeTemplateTag": "Unsafe use of a(n) {{type}} typed template tag.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-unsafe-declaration-merging": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow unsafe declaration merging",
                "recommended": "recommended",
                "requiresTypeChecking": false,
                "url": "https://typescript-eslint.io/rules/no-unsafe-declaration-merging",
              },
              "messages": {
                "unsafeMerging": "Unsafe declaration merging between classes and interfaces.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-unsafe-enum-comparison": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow comparing an enum value with a non-enum value",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unsafe-enum-comparison",
              },
              "hasSuggestions": true,
              "messages": {
                "mismatchedCase": "The case statement does not have a shared enum type with the switch predicate.",
                "mismatchedCondition": "The two values in this comparison do not have a shared enum type.",
                "replaceValueWithEnum": "Replace with an enum value comparison.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-unsafe-function-type": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow using the unsafe built-in Function type",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-unsafe-function-type",
              },
              "fixable": "code",
              "messages": {
                "bannedFunctionType": "The \`Function\` type accepts any function-like value.
Prefer explicitly defining any function parameters and return type.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-unsafe-member-access": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow member access on a value with type \`any\`",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unsafe-member-access",
              },
              "messages": {
                "unsafeComputedMemberAccess": "Computed name {{property}} resolves to an {{type}} value.",
                "unsafeMemberExpression": "Unsafe member access {{property}} on an {{type}} value.",
                "unsafeThisMemberExpression": "Unsafe member access {{property}} on an \`any\` value. \`this\` is typed as \`any\`.
You can try to fix this by turning on the \`noImplicitThis\` compiler option, or adding a \`this\` parameter to the function.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-unsafe-return": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow returning a value with type \`any\` from a function",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unsafe-return",
              },
              "messages": {
                "unsafeReturn": "Unsafe return of a value of type {{type}}.",
                "unsafeReturnAssignment": "Unsafe return of type \`{{sender}}\` from function with return type \`{{receiver}}\`.",
                "unsafeReturnThis": "Unsafe return of a value of type \`{{type}}\`. \`this\` is typed as \`any\`.
You can try to fix this by turning on the \`noImplicitThis\` compiler option, or adding a \`this\` parameter to the function.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-unsafe-type-assertion": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow type assertions that narrow a type",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unsafe-type-assertion",
              },
              "messages": {
                "unsafeOfAnyTypeAssertion": "Unsafe assertion from {{type}} detected: consider using type guards or a safer assertion.",
                "unsafeToAnyTypeAssertion": "Unsafe assertion to {{type}} detected: consider using a more specific type to ensure safety.",
                "unsafeToUnconstrainedTypeAssertion": "Unsafe type assertion: '{{type}}' could be instantiated with an arbitrary type which could be unrelated to the original type.",
                "unsafeTypeAssertion": "Unsafe type assertion: type '{{type}}' is more narrow than the original type.",
                "unsafeTypeAssertionAssignableToConstraint": "Unsafe type assertion: the original type is assignable to the constraint of type '{{type}}', but '{{type}}' could be instantiated with a different subtype of its constraint.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-unsafe-unary-minus": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Require unary negation to take a number",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/no-unsafe-unary-minus",
              },
              "messages": {
                "unaryMinus": "Argument of unary negation should be assignable to number | bigint but is {{type}} instead.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-unused-expressions": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowShortCircuit": false,
                "allowTaggedTemplates": false,
                "allowTernary": false,
              },
            ],
            "meta": {
              "defaultOptions": [
                {
                  "allowShortCircuit": false,
                  "allowTaggedTemplates": false,
                  "allowTernary": false,
                },
              ],
              "docs": {
                "description": "Disallow unused expressions",
                "extendsBaseRule": true,
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-unused-expressions",
              },
              "hasSuggestions": undefined,
              "messages": {
                "unusedExpression": "Expected an assignment or function call and instead saw an expression.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowShortCircuit": {
                      "type": "boolean",
                    },
                    "allowTaggedTemplates": {
                      "type": "boolean",
                    },
                    "allowTernary": {
                      "type": "boolean",
                    },
                    "enforceForJSX": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "no-unused-vars": {
            "create": [Function],
            "defaultOptions": [
              {},
            ],
            "meta": {
              "docs": {
                "description": "Disallow unused variables",
                "extendsBaseRule": true,
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-unused-vars",
              },
              "messages": {
                "unusedVar": "'{{varName}}' is {{action}} but never used{{additional}}.",
                "usedIgnoredVar": "'{{varName}}' is marked as ignored but is used{{additional}}.",
                "usedOnlyAsType": "'{{varName}}' is {{action}} but only used as a type{{additional}}.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "enum": [
                        "all",
                        "local",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "args": {
                          "description": "Whether to check all, some, or no arguments.",
                          "enum": [
                            "all",
                            "after-used",
                            "none",
                          ],
                          "type": "string",
                        },
                        "argsIgnorePattern": {
                          "description": "Regular expressions of argument names to not check for usage.",
                          "type": "string",
                        },
                        "caughtErrors": {
                          "description": "Whether to check catch block arguments.",
                          "enum": [
                            "all",
                            "none",
                          ],
                          "type": "string",
                        },
                        "caughtErrorsIgnorePattern": {
                          "description": "Regular expressions of catch block argument names to not check for usage.",
                          "type": "string",
                        },
                        "destructuredArrayIgnorePattern": {
                          "description": "Regular expressions of destructured array variable names to not check for usage.",
                          "type": "string",
                        },
                        "ignoreClassWithStaticInitBlock": {
                          "description": "Whether to ignore classes with at least one static initialization block.",
                          "type": "boolean",
                        },
                        "ignoreRestSiblings": {
                          "description": "Whether to ignore sibling properties in \`...\` destructurings.",
                          "type": "boolean",
                        },
                        "reportUsedIgnorePattern": {
                          "description": "Whether to report variables that match any of the valid ignore pattern options if they have been used.",
                          "type": "boolean",
                        },
                        "vars": {
                          "description": "Whether to check all variables or only locally-declared variables.",
                          "enum": [
                            "all",
                            "local",
                          ],
                          "type": "string",
                        },
                        "varsIgnorePattern": {
                          "description": "Regular expressions of variable names to not check for usage.",
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "problem",
            },
          },
          "no-use-before-define": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowNamedExports": false,
                "classes": true,
                "enums": true,
                "functions": true,
                "ignoreTypeReferences": true,
                "typedefs": true,
                "variables": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow the use of variables before they are defined",
                "extendsBaseRule": true,
                "url": "https://typescript-eslint.io/rules/no-use-before-define",
              },
              "messages": {
                "noUseBeforeDefine": "'{{name}}' was used before it was defined.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "enum": [
                        "nofunc",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "allowNamedExports": {
                          "description": "Whether to ignore named exports.",
                          "type": "boolean",
                        },
                        "classes": {
                          "description": "Whether to ignore references to class declarations.",
                          "type": "boolean",
                        },
                        "enums": {
                          "description": "Whether to check references to enums.",
                          "type": "boolean",
                        },
                        "functions": {
                          "description": "Whether to ignore references to function declarations.",
                          "type": "boolean",
                        },
                        "ignoreTypeReferences": {
                          "description": "Whether to ignore type references, such as in type annotations and assertions.",
                          "type": "boolean",
                        },
                        "typedefs": {
                          "description": "Whether to check references to types.",
                          "type": "boolean",
                        },
                        "variables": {
                          "description": "Whether to ignore references to variables.",
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "problem",
            },
          },
          "no-useless-constructor": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow unnecessary constructors",
                "extendsBaseRule": true,
                "recommended": "strict",
                "url": "https://typescript-eslint.io/rules/no-useless-constructor",
              },
              "hasSuggestions": true,
              "messages": {
                "noUselessConstructor": "Useless constructor.",
                "removeConstructor": "Remove the constructor.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-useless-empty-export": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow empty exports that don't change anything in a module file",
                "url": "https://typescript-eslint.io/rules/no-useless-empty-export",
              },
              "fixable": "code",
              "hasSuggestions": false,
              "messages": {
                "uselessExport": "Empty export does nothing and can be removed.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "no-var-requires": {
            "create": [Function],
            "defaultOptions": [
              {
                "allow": [],
              },
            ],
            "meta": {
              "deprecated": {
                "deprecatedSince": "8.0.0",
                "replacedBy": [
                  {
                    "rule": {
                      "name": "@typescript-eslint/no-require-imports",
                      "url": "https://typescript-eslint.io/rules/no-require-imports",
                    },
                  },
                ],
                "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334",
              },
              "docs": {
                "description": "Disallow \`require\` statements except in import statements",
                "url": "https://typescript-eslint.io/rules/no-var-requires",
              },
              "messages": {
                "noVarReqs": "Require statement not part of import statement.",
              },
              "replacedBy": [
                "@typescript-eslint/no-require-imports",
              ],
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "description": "Patterns of import paths to allow requiring from.",
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "no-wrapper-object-types": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow using confusing built-in primitive class wrappers",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/no-wrapper-object-types",
              },
              "fixable": "code",
              "messages": {
                "bannedClassType": "Prefer using the primitive \`{{preferred}}\` as a type name, rather than the upper-cased \`{{typeName}}\`.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "non-nullable-type-assertion-style": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce non-null assertions over explicit type assertions",
                "recommended": "stylistic",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/non-nullable-type-assertion-style",
              },
              "fixable": "code",
              "messages": {
                "preferNonNullAssertion": "Use a ! assertion to more succinctly remove null and undefined from the type.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "only-throw-error": {
            "create": [Function],
            "defaultOptions": [
              {
                "allow": [],
                "allowThrowingAny": true,
                "allowThrowingUnknown": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow throwing non-\`Error\` values as exceptions",
                "extendsBaseRule": "no-throw-literal",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/only-throw-error",
              },
              "messages": {
                "object": "Expected an error object to be thrown.",
                "undef": "Do not throw undefined.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "description": "Type specifiers that can be thrown.",
                      "items": {
                        "oneOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "file",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                              "path": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "from",
                              "name",
                            ],
                            "type": "object",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "lib",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                            },
                            "required": [
                              "from",
                              "name",
                            ],
                            "type": "object",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "package",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                              "package": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "from",
                              "name",
                              "package",
                            ],
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                    "allowThrowingAny": {
                      "description": "Whether to always allow throwing values typed as \`any\`.",
                      "type": "boolean",
                    },
                    "allowThrowingUnknown": {
                      "description": "Whether to always allow throwing values typed as \`unknown\`.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "parameter-properties": {
            "create": [Function],
            "defaultOptions": [
              {
                "allow": [],
                "prefer": "class-property",
              },
            ],
            "meta": {
              "docs": {
                "description": "Require or disallow parameter properties in class constructors",
                "url": "https://typescript-eslint.io/rules/parameter-properties",
              },
              "messages": {
                "preferClassProperty": "Property {{parameter}} should be declared as a class property.",
                "preferParameterProperty": "Property {{parameter}} should be declared as a parameter property.",
              },
              "schema": [
                {
                  "$defs": {
                    "modifier": {
                      "enum": [
                        "readonly",
                        "private",
                        "protected",
                        "public",
                        "private readonly",
                        "protected readonly",
                        "public readonly",
                      ],
                      "type": "string",
                    },
                  },
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "description": "Whether to allow certain kinds of properties to be ignored.",
                      "items": {
                        "$ref": "#/items/0/$defs/modifier",
                      },
                      "type": "array",
                    },
                    "prefer": {
                      "description": "Whether to prefer class properties or parameter properties.",
                      "enum": [
                        "class-property",
                        "parameter-property",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "prefer-as-const": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce the use of \`as const\` over literal type",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/prefer-as-const",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "preferConstAssertion": "Expected a \`const\` instead of a literal type assertion.",
                "variableConstAssertion": "Expected a \`const\` assertion instead of a literal type annotation.",
                "variableSuggest": "You should use \`as const\` instead of type annotation.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-destructuring": {
            "create": [Function],
            "defaultOptions": [
              {
                "AssignmentExpression": {
                  "array": true,
                  "object": true,
                },
                "VariableDeclarator": {
                  "array": true,
                  "object": true,
                },
              },
              {},
            ],
            "meta": {
              "docs": {
                "description": "Require destructuring from arrays and/or objects",
                "extendsBaseRule": true,
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-destructuring",
              },
              "fixable": "code",
              "hasSuggestions": undefined,
              "messages": {
                "preferDestructuring": "Use {{type}} destructuring.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "additionalProperties": false,
                      "properties": {
                        "AssignmentExpression": {
                          "additionalProperties": false,
                          "properties": {
                            "array": {
                              "type": "boolean",
                            },
                            "object": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        "VariableDeclarator": {
                          "additionalProperties": false,
                          "properties": {
                            "array": {
                              "type": "boolean",
                            },
                            "object": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      },
                      "type": "object",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "array": {
                          "type": "boolean",
                        },
                        "object": {
                          "type": "boolean",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
                {
                  "properties": {
                    "enforceForDeclarationWithTypeAnnotation": {
                      "description": "Whether to enforce destructuring on variable declarations with type annotations.",
                      "type": "boolean",
                    },
                    "enforceForRenamedProperties": {
                      "description": "Whether to enforce destructuring that use a different variable name than the property name.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-enum-initializers": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Require each enum member value to be explicitly initialized",
                "url": "https://typescript-eslint.io/rules/prefer-enum-initializers",
              },
              "hasSuggestions": true,
              "messages": {
                "defineInitializer": "The value of the member '{{ name }}' should be explicitly defined.",
                "defineInitializerSuggestion": "Can be fixed to {{ name }} = {{ suggested }}",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-find": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce the use of Array.prototype.find() over Array.prototype.filter() followed by [0] when looking for a single result",
                "recommended": "stylistic",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-find",
              },
              "hasSuggestions": true,
              "messages": {
                "preferFind": "Prefer .find(...) instead of .filter(...)[0].",
                "preferFindSuggestion": "Use .find(...) instead of .filter(...)[0].",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-for-of": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce the use of \`for-of\` loop over the standard \`for\` loop where possible",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/prefer-for-of",
              },
              "messages": {
                "preferForOf": "Expected a \`for-of\` loop instead of a \`for\` loop with this simple iteration.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-function-type": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce using function types instead of interfaces with call signatures",
                "recommended": "stylistic",
                "url": "https://typescript-eslint.io/rules/prefer-function-type",
              },
              "fixable": "code",
              "messages": {
                "functionTypeOverCallableType": "{{ literalOrInterface }} only has a call signature, you should use a function type instead.",
                "unexpectedThisOnFunctionOnlyInterface": "\`this\` refers to the function type '{{ interfaceName }}', did you intend to use a generic \`this\` parameter like \`<Self>(this: Self, ...) => Self\` instead?",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-includes": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce \`includes\` method over \`indexOf\` method",
                "recommended": "stylistic",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-includes",
              },
              "fixable": "code",
              "messages": {
                "preferIncludes": "Use 'includes()' method instead.",
                "preferStringIncludes": "Use \`String#includes()\` method with a string instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-literal-enum-member": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowBitwiseExpressions": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Require all enum members to be literal values",
                "recommended": "strict",
                "requiresTypeChecking": false,
                "url": "https://typescript-eslint.io/rules/prefer-literal-enum-member",
              },
              "messages": {
                "notLiteral": "Explicit enum value must only be a literal value (string or number).",
                "notLiteralOrBitwiseExpression": "Explicit enum value must only be a literal value (string or number) or a bitwise expression.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowBitwiseExpressions": {
                      "description": "Whether to allow using bitwise expressions in enum initializers.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-namespace-keyword": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Require using \`namespace\` keyword over \`module\` keyword to declare custom TypeScript modules",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/prefer-namespace-keyword",
              },
              "fixable": "code",
              "messages": {
                "useNamespace": "Use 'namespace' instead of 'module' to declare custom TypeScript modules.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-nullish-coalescing": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": false,
                "ignoreBooleanCoercion": false,
                "ignoreConditionalTests": true,
                "ignoreMixedLogicalExpressions": false,
                "ignorePrimitives": {
                  "bigint": false,
                  "boolean": false,
                  "number": false,
                  "string": false,
                },
                "ignoreTernaryTests": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce using the nullish coalescing operator instead of logical assignments or chaining",
                "recommended": "stylistic",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-nullish-coalescing",
              },
              "hasSuggestions": true,
              "messages": {
                "noStrictNullCheck": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
                "preferNullishOverOr": "Prefer using nullish coalescing operator (\`??{{ equals }}\`) instead of a logical {{ description }} (\`||{{ equals }}\`), as it is a safer operator.",
                "preferNullishOverTernary": "Prefer using nullish coalescing operator (\`??{{ equals }}\`) instead of a ternary expression, as it is simpler to read.",
                "suggestNullish": "Fix to nullish coalescing operator (\`??{{ equals }}\`).",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
                      "description": "Unless this is set to \`true\`, the rule will error on every file whose \`tsconfig.json\` does _not_ have the \`strictNullChecks\` compiler option (or \`strict\`) set to \`true\`.",
                      "type": "boolean",
                    },
                    "ignoreBooleanCoercion": {
                      "description": "Whether to ignore arguments to the \`Boolean\` constructor",
                      "type": "boolean",
                    },
                    "ignoreConditionalTests": {
                      "description": "Whether to ignore cases that are located within a conditional test.",
                      "type": "boolean",
                    },
                    "ignoreMixedLogicalExpressions": {
                      "description": "Whether to ignore any logical or expressions that are part of a mixed logical expression (with \`&&\`).",
                      "type": "boolean",
                    },
                    "ignorePrimitives": {
                      "description": "Whether to ignore all (\`true\`) or some (an object with properties) primitive types.",
                      "oneOf": [
                        {
                          "description": "Which primitives types may be ignored.",
                          "properties": {
                            "bigint": {
                              "description": "Ignore bigint primitive types.",
                              "type": "boolean",
                            },
                            "boolean": {
                              "description": "Ignore boolean primitive types.",
                              "type": "boolean",
                            },
                            "number": {
                              "description": "Ignore number primitive types.",
                              "type": "boolean",
                            },
                            "string": {
                              "description": "Ignore string primitive types.",
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                        {
                          "description": "Ignore all primitive types.",
                          "enum": [
                            true,
                          ],
                          "type": "boolean",
                        },
                      ],
                    },
                    "ignoreTernaryTests": {
                      "description": "Whether to ignore any ternary expressions that could be simplified by using the nullish coalescing operator.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-optional-chain": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowPotentiallyUnsafeFixesThatModifyTheReturnTypeIKnowWhatImDoing": false,
                "checkAny": true,
                "checkBigInt": true,
                "checkBoolean": true,
                "checkNumber": true,
                "checkString": true,
                "checkUnknown": true,
                "requireNullish": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce using concise optional chain expressions instead of chained logical ands, negated logical ors, or empty objects",
                "recommended": "stylistic",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-optional-chain",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "optionalChainSuggest": "Change to an optional chain.",
                "preferOptionalChain": "Prefer using an optional chain expression instead, as it's more concise and easier to read.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowPotentiallyUnsafeFixesThatModifyTheReturnTypeIKnowWhatImDoing": {
                      "description": "Allow autofixers that will change the return type of the expression. This option is considered unsafe as it may break the build.",
                      "type": "boolean",
                    },
                    "checkAny": {
                      "description": "Check operands that are typed as \`any\` when inspecting "loose boolean" operands.",
                      "type": "boolean",
                    },
                    "checkBigInt": {
                      "description": "Check operands that are typed as \`bigint\` when inspecting "loose boolean" operands.",
                      "type": "boolean",
                    },
                    "checkBoolean": {
                      "description": "Check operands that are typed as \`boolean\` when inspecting "loose boolean" operands.",
                      "type": "boolean",
                    },
                    "checkNumber": {
                      "description": "Check operands that are typed as \`number\` when inspecting "loose boolean" operands.",
                      "type": "boolean",
                    },
                    "checkString": {
                      "description": "Check operands that are typed as \`string\` when inspecting "loose boolean" operands.",
                      "type": "boolean",
                    },
                    "checkUnknown": {
                      "description": "Check operands that are typed as \`unknown\` when inspecting "loose boolean" operands.",
                      "type": "boolean",
                    },
                    "requireNullish": {
                      "description": "Skip operands that are not typed with \`null\` and/or \`undefined\` when inspecting "loose boolean" operands.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-promise-reject-errors": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowEmptyReject": false,
                "allowThrowingAny": false,
                "allowThrowingUnknown": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Require using Error objects as Promise rejection reasons",
                "extendsBaseRule": true,
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-promise-reject-errors",
              },
              "messages": {
                "rejectAnError": "Expected the Promise rejection reason to be an Error.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowEmptyReject": {
                      "description": "Whether to allow calls to \`Promise.reject()\` with no arguments.",
                      "type": "boolean",
                    },
                    "allowThrowingAny": {
                      "description": "Whether to always allow throwing values typed as \`any\`.",
                      "type": "boolean",
                    },
                    "allowThrowingUnknown": {
                      "description": "Whether to always allow throwing values typed as \`unknown\`.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-readonly": {
            "create": [Function],
            "defaultOptions": [
              {
                "onlyInlineLambdas": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Require private members to be marked as \`readonly\` if they're never modified outside of the constructor",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-readonly",
              },
              "fixable": "code",
              "messages": {
                "preferReadonly": "Member '{{name}}' is never reassigned; mark it as \`readonly\`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "onlyInlineLambdas": {
                      "description": "Whether to restrict checking only to members immediately assigned a lambda value.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-readonly-parameter-types": {
            "create": [Function],
            "defaultOptions": [
              {
                "allow": [],
                "checkParameterProperties": true,
                "ignoreInferredTypes": false,
                "treatMethodsAsReadonly": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Require function parameters to be typed as \`readonly\` to prevent accidental mutation of inputs",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-readonly-parameter-types",
              },
              "messages": {
                "shouldBeReadonly": "Parameter should be a read only type.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "description": "An array of type specifiers to ignore.",
                      "items": {
                        "oneOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "file",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                              "path": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "from",
                              "name",
                            ],
                            "type": "object",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "lib",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                            },
                            "required": [
                              "from",
                              "name",
                            ],
                            "type": "object",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "package",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                              "package": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "from",
                              "name",
                              "package",
                            ],
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                    "checkParameterProperties": {
                      "description": "Whether to check class parameter properties.",
                      "type": "boolean",
                    },
                    "ignoreInferredTypes": {
                      "description": "Whether to ignore parameters which don't explicitly specify a type.",
                      "type": "boolean",
                    },
                    "treatMethodsAsReadonly": {
                      "description": "Whether to treat all mutable methods as though they are readonly.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-reduce-type-parameter": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce using type parameter when calling \`Array#reduce\` instead of using a type assertion",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-reduce-type-parameter",
              },
              "fixable": "code",
              "messages": {
                "preferTypeParameter": "Unnecessary assertion: Array#reduce accepts a type parameter for the default value.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "prefer-regexp-exec": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce \`RegExp#exec\` over \`String#match\` if no global flag is provided",
                "recommended": "stylistic",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-regexp-exec",
              },
              "fixable": "code",
              "messages": {
                "regExpExecOverStringMatch": "Use the \`RegExp#exec()\` method instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-return-this-type": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce that \`this\` is used when only \`this\` type is returned",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-return-this-type",
              },
              "fixable": "code",
              "messages": {
                "useThisType": "Use \`this\` type instead.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "prefer-string-starts-ends-with": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowSingleElementEquality": "never",
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce using \`String#startsWith\` and \`String#endsWith\` over other equivalent methods of checking substrings",
                "recommended": "stylistic",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/prefer-string-starts-ends-with",
              },
              "fixable": "code",
              "messages": {
                "preferEndsWith": "Use the 'String#endsWith' method instead.",
                "preferStartsWith": "Use 'String#startsWith' method instead.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowSingleElementEquality": {
                      "description": "Whether to allow equality checks against the first or last element of a string.",
                      "enum": [
                        "always",
                        "never",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "prefer-ts-expect-error": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "deprecated": {
                "deprecatedSince": "7.11.0",
                "replacedBy": [
                  {
                    "rule": {
                      "name": "@typescript-eslint/ban-ts-comment",
                      "url": "https://typescript-eslint.io/rules/ban-ts-comment",
                    },
                  },
                ],
                "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9081",
              },
              "docs": {
                "description": "Enforce using \`@ts-expect-error\` over \`@ts-ignore\`",
                "url": "https://typescript-eslint.io/rules/prefer-ts-expect-error",
              },
              "fixable": "code",
              "messages": {
                "preferExpectErrorComment": "Use "@ts-expect-error" to ensure an error is actually being suppressed.",
              },
              "replacedBy": [
                "@typescript-eslint/ban-ts-comment",
              ],
              "schema": [],
              "type": "problem",
            },
          },
          "promise-function-async": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowAny": true,
                "allowedPromiseNames": [],
                "checkArrowFunctions": true,
                "checkFunctionDeclarations": true,
                "checkFunctionExpressions": true,
                "checkMethodDeclarations": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Require any function or method that returns a Promise to be marked async",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/promise-function-async",
              },
              "fixable": "code",
              "messages": {
                "missingAsync": "Functions that return promises must be async.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowAny": {
                      "description": "Whether to consider \`any\` and \`unknown\` to be Promises.",
                      "type": "boolean",
                    },
                    "allowedPromiseNames": {
                      "description": "Any extra names of classes or interfaces to be considered Promises.",
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    "checkArrowFunctions": {
                      "description": "Whether to check arrow functions.",
                      "type": "boolean",
                    },
                    "checkFunctionDeclarations": {
                      "description": "Whether to check standalone function declarations.",
                      "type": "boolean",
                    },
                    "checkFunctionExpressions": {
                      "description": "Whether to check inline function expressions",
                      "type": "boolean",
                    },
                    "checkMethodDeclarations": {
                      "description": "Whether to check methods on classes and object literals.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "related-getter-setter-pairs": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce that \`get()\` types should be assignable to their equivalent \`set()\` type",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/related-getter-setter-pairs",
              },
              "messages": {
                "mismatch": "\`get()\` type should be assignable to its equivalent \`set()\` type.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "require-array-sort-compare": {
            "create": [Function],
            "defaultOptions": [
              {
                "ignoreStringArrays": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Require \`Array#sort\` and \`Array#toSorted\` calls to always provide a \`compareFunction\`",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/require-array-sort-compare",
              },
              "messages": {
                "requireCompare": "Require 'compare' argument.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreStringArrays": {
                      "description": "Whether to ignore arrays in which all elements are strings.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "require-await": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow async functions which do not return promises and have no \`await\` expression",
                "extendsBaseRule": true,
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/require-await",
              },
              "hasSuggestions": true,
              "messages": {
                "missingAwait": "{{name}} has no 'await' expression.",
                "removeAsync": "Remove 'async'.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
          "restrict-plus-operands": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowAny": true,
                "allowBoolean": true,
                "allowNullish": true,
                "allowNumberAndString": true,
                "allowRegExp": true,
                "skipCompoundAssignments": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Require both operands of addition to be the same type and be \`bigint\`, \`number\`, or \`string\`",
                "recommended": {
                  "recommended": true,
                  "strict": [
                    {
                      "allowAny": false,
                      "allowBoolean": false,
                      "allowNullish": false,
                      "allowNumberAndString": false,
                      "allowRegExp": false,
                    },
                  ],
                },
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/restrict-plus-operands",
              },
              "messages": {
                "bigintAndNumber": "Numeric '+' operations must either be both bigints or both numbers. Got \`{{left}}\` + \`{{right}}\`.",
                "invalid": "Invalid operand for a '+' operation. Operands must each be a number or {{stringLike}}. Got \`{{type}}\`.",
                "mismatched": "Operands of '+' operations must be a number or {{stringLike}}. Got \`{{left}}\` + \`{{right}}\`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowAny": {
                      "description": "Whether to allow \`any\` typed values.",
                      "type": "boolean",
                    },
                    "allowBoolean": {
                      "description": "Whether to allow \`boolean\` typed values.",
                      "type": "boolean",
                    },
                    "allowNullish": {
                      "description": "Whether to allow potentially \`null\` or \`undefined\` typed values.",
                      "type": "boolean",
                    },
                    "allowNumberAndString": {
                      "description": "Whether to allow \`bigint\`/\`number\` typed values and \`string\` typed values to be added together.",
                      "type": "boolean",
                    },
                    "allowRegExp": {
                      "description": "Whether to allow \`regexp\` typed values.",
                      "type": "boolean",
                    },
                    "skipCompoundAssignments": {
                      "description": "Whether to skip compound assignments such as \`+=\`.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "restrict-template-expressions": {
            "create": [Function],
            "defaultOptions": [
              {
                "allow": [
                  {
                    "from": "lib",
                    "name": [
                      "Error",
                      "URL",
                      "URLSearchParams",
                    ],
                  },
                ],
                "allowAny": true,
                "allowBoolean": true,
                "allowNullish": true,
                "allowNumber": true,
                "allowRegExp": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce template literal expressions to be of \`string\` type",
                "recommended": {
                  "recommended": true,
                  "strict": [
                    {
                      "allowAny": false,
                      "allowBoolean": false,
                      "allowNever": false,
                      "allowNullish": false,
                      "allowNumber": false,
                      "allowRegExp": false,
                    },
                  ],
                },
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/restrict-template-expressions",
              },
              "messages": {
                "invalidType": "Invalid type "{{type}}" of template literal expression.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allow": {
                      "description": "Types to allow in template expressions.",
                      "items": {
                        "oneOf": [
                          {
                            "type": "string",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "file",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                              "path": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "from",
                              "name",
                            ],
                            "type": "object",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "lib",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                            },
                            "required": [
                              "from",
                              "name",
                            ],
                            "type": "object",
                          },
                          {
                            "additionalProperties": false,
                            "properties": {
                              "from": {
                                "enum": [
                                  "package",
                                ],
                                "type": "string",
                              },
                              "name": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                  },
                                  {
                                    "items": {
                                      "type": "string",
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true,
                                  },
                                ],
                              },
                              "package": {
                                "type": "string",
                              },
                            },
                            "required": [
                              "from",
                              "name",
                              "package",
                            ],
                            "type": "object",
                          },
                        ],
                      },
                      "type": "array",
                    },
                    "allowAny": {
                      "description": "Whether to allow \`any\` typed values in template expressions.",
                      "type": "boolean",
                    },
                    "allowArray": {
                      "description": "Whether to allow \`array\` typed values in template expressions.",
                      "type": "boolean",
                    },
                    "allowBoolean": {
                      "description": "Whether to allow \`boolean\` typed values in template expressions.",
                      "type": "boolean",
                    },
                    "allowNever": {
                      "description": "Whether to allow \`never\` typed values in template expressions.",
                      "type": "boolean",
                    },
                    "allowNullish": {
                      "description": "Whether to allow \`nullish\` typed values in template expressions.",
                      "type": "boolean",
                    },
                    "allowNumber": {
                      "description": "Whether to allow \`number\` typed values in template expressions.",
                      "type": "boolean",
                    },
                    "allowRegExp": {
                      "description": "Whether to allow \`regexp\` typed values in template expressions.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "return-await": {
            "create": [Function],
            "defaultOptions": [
              "in-try-catch",
            ],
            "meta": {
              "docs": {
                "description": "Enforce consistent awaiting of returned promises",
                "recommended": {
                  "strict": [
                    "error-handling-correctness-only",
                  ],
                },
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/return-await",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "disallowedPromiseAwait": "Returning an awaited promise is not allowed in this context.",
                "disallowedPromiseAwaitSuggestion": "Remove \`await\` before the expression. Use caution as this may impact control flow.",
                "nonPromiseAwait": "Returning an awaited value that is not a promise is not allowed.",
                "requiredPromiseAwait": "Returning an awaited promise is required in this context.",
                "requiredPromiseAwaitSuggestion": "Add \`await\` before the expression. Use caution as this may impact control flow.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "description": "Requires that all returned promises be awaited.",
                      "enum": [
                        "always",
                      ],
                      "type": "string",
                    },
                    {
                      "description": "In error-handling contexts, the rule enforces that returned promises must be awaited. In ordinary contexts, the rule does not enforce any particular behavior around whether returned promises are awaited.",
                      "enum": [
                        "error-handling-correctness-only",
                      ],
                      "type": "string",
                    },
                    {
                      "description": "In error-handling contexts, the rule enforces that returned promises must be awaited. In ordinary contexts, the rule enforces that returned promises _must not_ be awaited.",
                      "enum": [
                        "in-try-catch",
                      ],
                      "type": "string",
                    },
                    {
                      "description": "Disallows awaiting any returned promises.",
                      "enum": [
                        "never",
                      ],
                      "type": "string",
                    },
                  ],
                  "type": "string",
                },
              ],
              "type": "problem",
            },
          },
          "sort-type-constituents": {
            "create": [Function],
            "defaultOptions": [
              {
                "caseSensitive": false,
                "checkIntersections": true,
                "checkUnions": true,
                "groupOrder": [
                  "named",
                  "keyword",
                  "operator",
                  "literal",
                  "function",
                  "import",
                  "conditional",
                  "object",
                  "tuple",
                  "intersection",
                  "union",
                  "nullish",
                ],
              },
            ],
            "meta": {
              "deprecated": {
                "deprecatedSince": "7.13.0",
                "replacedBy": [
                  {
                    "plugin": {
                      "name": "eslint-plugin-perfectionist",
                      "url": "https://perfectionist.dev",
                    },
                    "rule": {
                      "name": "perfectionist/sort-intersection-types",
                      "url": "https://perfectionist.dev/rules/sort-intersection-types",
                    },
                  },
                  {
                    "plugin": {
                      "name": "eslint-plugin-perfectionist",
                      "url": "https://perfectionist.dev",
                    },
                    "rule": {
                      "name": "perfectionist/sort-union-types",
                      "url": "https://perfectionist.dev/rules/sort-union-types",
                    },
                  },
                ],
                "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9253",
              },
              "docs": {
                "description": "Enforce constituents of a type union/intersection to be sorted alphabetically",
                "url": "https://typescript-eslint.io/rules/sort-type-constituents",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "notSorted": "{{type}} type constituents must be sorted.",
                "notSortedNamed": "{{type}} type {{name}} constituents must be sorted.",
                "suggestFix": "Sort constituents of type (removes all comments).",
              },
              "replacedBy": [
                "perfectionist/sort-intersection-types",
                "perfectionist/sort-union-types",
              ],
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "caseSensitive": {
                      "description": "Whether to sort using case sensitive string comparisons.",
                      "type": "boolean",
                    },
                    "checkIntersections": {
                      "description": "Whether to check intersection types (\`&\`).",
                      "type": "boolean",
                    },
                    "checkUnions": {
                      "description": "Whether to check union types (\`|\`).",
                      "type": "boolean",
                    },
                    "groupOrder": {
                      "description": "Ordering of the groups.",
                      "items": {
                        "enum": [
                          "conditional",
                          "function",
                          "import",
                          "intersection",
                          "keyword",
                          "nullish",
                          "literal",
                          "named",
                          "object",
                          "operator",
                          "tuple",
                          "union",
                        ],
                        "type": "string",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "strict-boolean-expressions": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowAny": false,
                "allowNullableBoolean": false,
                "allowNullableEnum": false,
                "allowNullableNumber": false,
                "allowNullableObject": true,
                "allowNullableString": false,
                "allowNumber": true,
                "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": false,
                "allowString": true,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow certain types in boolean expressions",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/strict-boolean-expressions",
              },
              "hasSuggestions": true,
              "messages": {
                "conditionErrorAny": "Unexpected any value in {{context}}. An explicit comparison or type conversion is required.",
                "conditionErrorNullableBoolean": "Unexpected nullable boolean value in {{context}}. Please handle the nullish case explicitly.",
                "conditionErrorNullableEnum": "Unexpected nullable enum value in {{context}}. Please handle the nullish/zero/NaN cases explicitly.",
                "conditionErrorNullableNumber": "Unexpected nullable number value in {{context}}. Please handle the nullish/zero/NaN cases explicitly.",
                "conditionErrorNullableObject": "Unexpected nullable object value in {{context}}. An explicit null check is required.",
                "conditionErrorNullableString": "Unexpected nullable string value in {{context}}. Please handle the nullish/empty cases explicitly.",
                "conditionErrorNullish": "Unexpected nullish value in conditional. The condition is always false.",
                "conditionErrorNumber": "Unexpected number value in {{context}}. An explicit zero/NaN check is required.",
                "conditionErrorObject": "Unexpected object value in {{context}}. The condition is always true.",
                "conditionErrorOther": "Unexpected value in conditional. A boolean expression is required.",
                "conditionErrorString": "Unexpected string value in {{context}}. An explicit empty string check is required.",
                "conditionFixCastBoolean": "Explicitly convert value to a boolean (\`Boolean(value)\`)",
                "conditionFixCompareArrayLengthNonzero": "Change condition to check array's length (\`value.length > 0\`)",
                "conditionFixCompareArrayLengthZero": "Change condition to check array's length (\`value.length === 0\`)",
                "conditionFixCompareEmptyString": "Change condition to check for empty string (\`value !== ""\`)",
                "conditionFixCompareFalse": "Change condition to check if false (\`value === false\`)",
                "conditionFixCompareNaN": "Change condition to check for NaN (\`!Number.isNaN(value)\`)",
                "conditionFixCompareNullish": "Change condition to check for null/undefined (\`value != null\`)",
                "conditionFixCompareStringLength": "Change condition to check string's length (\`value.length !== 0\`)",
                "conditionFixCompareTrue": "Change condition to check if true (\`value === true\`)",
                "conditionFixCompareZero": "Change condition to check for 0 (\`value !== 0\`)",
                "conditionFixDefaultEmptyString": "Explicitly treat nullish value the same as an empty string (\`value ?? ""\`)",
                "conditionFixDefaultFalse": "Explicitly treat nullish value the same as false (\`value ?? false\`)",
                "conditionFixDefaultZero": "Explicitly treat nullish value the same as 0 (\`value ?? 0\`)",
                "explicitBooleanReturnType": "Add an explicit \`boolean\` return type annotation.",
                "noStrictNullCheck": "This rule requires the \`strictNullChecks\` compiler option to be turned on to function correctly.",
                "predicateCannotBeAsync": "Predicate function should not be 'async'; expected a boolean return type.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowAny": {
                      "description": "Whether to allow \`any\`s in a boolean context.",
                      "type": "boolean",
                    },
                    "allowNullableBoolean": {
                      "description": "Whether to allow nullable \`boolean\`s in a boolean context.",
                      "type": "boolean",
                    },
                    "allowNullableEnum": {
                      "description": "Whether to allow nullable \`enum\`s in a boolean context.",
                      "type": "boolean",
                    },
                    "allowNullableNumber": {
                      "description": "Whether to allow nullable \`number\`s in a boolean context.",
                      "type": "boolean",
                    },
                    "allowNullableObject": {
                      "description": "Whether to allow nullable \`object\`s, \`symbol\`s, and functions in a boolean context.",
                      "type": "boolean",
                    },
                    "allowNullableString": {
                      "description": "Whether to allow nullable \`string\`s in a boolean context.",
                      "type": "boolean",
                    },
                    "allowNumber": {
                      "description": "Whether to allow \`number\`s in a boolean context.",
                      "type": "boolean",
                    },
                    "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
                      "description": "Unless this is set to \`true\`, the rule will error on every file whose \`tsconfig.json\` does _not_ have the \`strictNullChecks\` compiler option (or \`strict\`) set to \`true\`.",
                      "type": "boolean",
                    },
                    "allowString": {
                      "description": "Whether to allow \`string\`s in a boolean context.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "switch-exhaustiveness-check": {
            "create": [Function],
            "defaultOptions": [
              {
                "allowDefaultCaseForExhaustiveSwitch": true,
                "considerDefaultExhaustiveForUnions": false,
                "requireDefaultForNonUnion": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Require switch-case statements to be exhaustive",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/switch-exhaustiveness-check",
              },
              "hasSuggestions": true,
              "messages": {
                "addMissingCases": "Add branches for missing cases.",
                "dangerousDefaultCase": "The switch statement is exhaustive, so the default case is unnecessary.",
                "switchIsNotExhaustive": "Switch is not exhaustive. Cases not matched: {{missingBranches}}",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "allowDefaultCaseForExhaustiveSwitch": {
                      "description": "If 'true', allow 'default' cases on switch statements with exhaustive cases.",
                      "type": "boolean",
                    },
                    "considerDefaultExhaustiveForUnions": {
                      "description": "If 'true', the 'default' clause is used to determine whether the switch statement is exhaustive for union type",
                      "type": "boolean",
                    },
                    "defaultCaseCommentPattern": {
                      "description": "Regular expression for a comment that can indicate an intentionally omitted default case.",
                      "type": "string",
                    },
                    "requireDefaultForNonUnion": {
                      "description": "If 'true', require a 'default' clause for switches on non-union types.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "triple-slash-reference": {
            "create": [Function],
            "defaultOptions": [
              {
                "lib": "always",
                "path": "never",
                "types": "prefer-import",
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow certain triple slash directives in favor of ES6-style import declarations",
                "recommended": "recommended",
                "url": "https://typescript-eslint.io/rules/triple-slash-reference",
              },
              "messages": {
                "tripleSlashReference": "Do not use a triple slash reference for {{module}}, use \`import\` style instead.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "lib": {
                      "description": "What to enforce for \`/// <reference lib="..." />\` references.",
                      "enum": [
                        "always",
                        "never",
                      ],
                      "type": "string",
                    },
                    "path": {
                      "description": "What to enforce for \`/// <reference path="..." />\` references.",
                      "enum": [
                        "always",
                        "never",
                      ],
                      "type": "string",
                    },
                    "types": {
                      "description": "What to enforce for \`/// <reference types="..." />\` references.",
                      "enum": [
                        "always",
                        "never",
                        "prefer-import",
                      ],
                      "type": "string",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "typedef": {
            "create": [Function],
            "defaultOptions": [
              {
                "arrayDestructuring": false,
                "arrowParameter": false,
                "memberVariableDeclaration": false,
                "objectDestructuring": false,
                "parameter": false,
                "propertyDeclaration": false,
                "variableDeclaration": false,
                "variableDeclarationIgnoreFunction": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Require type annotations in certain places",
                "url": "https://typescript-eslint.io/rules/typedef",
              },
              "messages": {
                "expectedTypedef": "Expected a type annotation.",
                "expectedTypedefNamed": "Expected {{name}} to have a type annotation.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "arrayDestructuring": {
                      "description": "Whether to enforce type annotations on variables declared using array destructuring.",
                      "type": "boolean",
                    },
                    "arrowParameter": {
                      "description": "Whether to enforce type annotations for parameters of arrow functions.",
                      "type": "boolean",
                    },
                    "memberVariableDeclaration": {
                      "description": "Whether to enforce type annotations on member variables of classes.",
                      "type": "boolean",
                    },
                    "objectDestructuring": {
                      "description": "Whether to enforce type annotations on variables declared using object destructuring.",
                      "type": "boolean",
                    },
                    "parameter": {
                      "description": "Whether to enforce type annotations for parameters of functions and methods.",
                      "type": "boolean",
                    },
                    "propertyDeclaration": {
                      "description": "Whether to enforce type annotations for properties of interfaces and types.",
                      "type": "boolean",
                    },
                    "variableDeclaration": {
                      "description": "Whether to enforce type annotations for variable declarations, excluding array and object destructuring.",
                      "type": "boolean",
                    },
                    "variableDeclarationIgnoreFunction": {
                      "description": "Whether to ignore variable declarations for non-arrow and arrow functions.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "unbound-method": {
            "create": [Function],
            "defaultOptions": [
              {
                "ignoreStatic": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Enforce unbound methods are called with their expected scope",
                "recommended": "recommended",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/unbound-method",
              },
              "messages": {
                "unbound": "Avoid referencing unbound methods which may cause unintentional scoping of \`this\`.",
                "unboundWithoutThisAnnotation": "Avoid referencing unbound methods which may cause unintentional scoping of \`this\`.
If your function does not access \`this\`, you can annotate it with \`this: void\`, or consider using an arrow function instead.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreStatic": {
                      "description": "Whether to skip checking whether \`static\` methods are correctly bound.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "problem",
            },
          },
          "unified-signatures": {
            "create": [Function],
            "defaultOptions": [
              {
                "ignoreDifferentlyNamedParameters": false,
                "ignoreOverloadsWithDifferentJSDoc": false,
              },
            ],
            "meta": {
              "docs": {
                "description": "Disallow two overloads that could be unified into one with a union or an optional/rest parameter",
                "recommended": "strict",
                "url": "https://typescript-eslint.io/rules/unified-signatures",
              },
              "messages": {
                "omittingRestParameter": "{{failureStringStart}} with a rest parameter.",
                "omittingSingleParameter": "{{failureStringStart}} with an optional parameter.",
                "singleParameterDifference": "{{failureStringStart}} taking \`{{type1}} | {{type2}}\`.",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "ignoreDifferentlyNamedParameters": {
                      "description": "Whether two parameters with different names at the same index should be considered different even if their types are the same.",
                      "type": "boolean",
                    },
                    "ignoreOverloadsWithDifferentJSDoc": {
                      "description": "Whether two overloads with different JSDoc comments should be considered different even if their parameter and return types are the same.",
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "use-unknown-in-catch-callback-variable": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Enforce typing arguments in Promise rejection callbacks as \`unknown\`",
                "recommended": "strict",
                "requiresTypeChecking": true,
                "url": "https://typescript-eslint.io/rules/use-unknown-in-catch-callback-variable",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "addUnknownRestTypeAnnotationSuggestion": "Add an explicit \`: [unknown]\` type annotation to the rejection callback rest variable.",
                "addUnknownTypeAnnotationSuggestion": "Add an explicit \`: unknown\` type annotation to the rejection callback variable.",
                "useUnknown": "Prefer the safe \`: unknown\` for a \`{{method}}\`{{append}} callback variable.",
                "useUnknownArrayDestructuringPattern": "Prefer the safe \`: unknown\` for a \`{{method}}\`{{append}} callback variable. The thrown error may not be iterable.",
                "useUnknownObjectDestructuringPattern": "Prefer the safe \`: unknown\` for a \`{{method}}\`{{append}} callback variable. The thrown error may be nullable, or may not have the expected shape.",
                "wrongRestTypeAnnotationSuggestion": "Change existing type annotation to \`: [unknown]\`.",
                "wrongTypeAnnotationSuggestion": "Change existing type annotation to \`: unknown\`.",
              },
              "schema": [],
              "type": "suggestion",
            },
          },
        },
      },
    },
  },
  {
    "files": [
      "**/*.ts",
      "**/*.tsx",
      "**/*.mts",
      "**/*.cts",
    ],
    "name": "typescript-eslint/eslint-recommended",
    "rules": {
      "constructor-super": "off",
      "getter-return": "off",
      "no-class-assign": "off",
      "no-const-assign": "off",
      "no-dupe-args": "off",
      "no-dupe-class-members": "off",
      "no-dupe-keys": "off",
      "no-func-assign": "off",
      "no-import-assign": "off",
      "no-new-native-nonconstructor": "off",
      "no-new-symbol": "off",
      "no-obj-calls": "off",
      "no-redeclare": "off",
      "no-setter-return": "off",
      "no-this-before-super": "off",
      "no-undef": "off",
      "no-unreachable": "off",
      "no-unsafe-negation": "off",
      "no-var": "error",
      "prefer-const": "error",
      "prefer-rest-params": "error",
      "prefer-spread": "error",
    },
  },
  {
    "name": "typescript-eslint/recommended",
    "rules": {
      "@typescript-eslint/ban-ts-comment": "error",
      "@typescript-eslint/no-array-constructor": "error",
      "@typescript-eslint/no-duplicate-enum-values": "error",
      "@typescript-eslint/no-empty-object-type": "error",
      "@typescript-eslint/no-explicit-any": "error",
      "@typescript-eslint/no-extra-non-null-assertion": "error",
      "@typescript-eslint/no-misused-new": "error",
      "@typescript-eslint/no-namespace": "error",
      "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
      "@typescript-eslint/no-require-imports": "error",
      "@typescript-eslint/no-this-alias": "error",
      "@typescript-eslint/no-unnecessary-type-constraint": "error",
      "@typescript-eslint/no-unsafe-declaration-merging": "error",
      "@typescript-eslint/no-unsafe-function-type": "error",
      "@typescript-eslint/no-unused-expressions": "error",
      "@typescript-eslint/no-unused-vars": "error",
      "@typescript-eslint/no-wrapper-object-types": "error",
      "@typescript-eslint/prefer-as-const": "error",
      "@typescript-eslint/prefer-namespace-keyword": "error",
      "@typescript-eslint/triple-slash-reference": "error",
      "no-array-constructor": "off",
      "no-unused-expressions": "off",
      "no-unused-vars": "off",
    },
  },
  {
    "name": "tanstack/query/flat/recommended",
    "plugins": {
      "@tanstack/query": {
        "configs": {
          "flat/recommended": [
            {
              "name": "tanstack/query/flat/recommended",
              "plugins": [Circular],
              "rules": {
                "@tanstack/query/exhaustive-deps": "error",
                "@tanstack/query/infinite-query-property-order": "error",
                "@tanstack/query/no-rest-destructuring": "warn",
                "@tanstack/query/no-unstable-deps": "error",
                "@tanstack/query/stable-query-client": "error",
              },
            },
          ],
          "recommended": {
            "plugins": [
              "@tanstack/query",
            ],
            "rules": {
              "@tanstack/query/exhaustive-deps": "error",
              "@tanstack/query/infinite-query-property-order": "error",
              "@tanstack/query/no-rest-destructuring": "warn",
              "@tanstack/query/no-unstable-deps": "error",
              "@tanstack/query/stable-query-client": "error",
            },
          },
        },
        "meta": {
          "name": "@tanstack/eslint-plugin-query",
        },
        "rules": {
          "exhaustive-deps": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Exhaustive deps rule for useQuery",
                "recommended": "error",
                "url": "https://tanstack.com/query/latest/docs/eslint/exhaustive-deps",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "fixTo": "Fix to {{result}}",
                "missingDeps": "The following dependencies are missing in your queryKey: {{deps}}",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "infinite-query-property-order": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Ensure correct order of inference sensitive properties for infinite queries",
                "recommended": "error",
                "url": "https://tanstack.com/query/latest/docs/eslint/infinite-query-property-order",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "invalidOrder": "Invalid order of properties for \`{{function}}\`.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-rest-destructuring": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallows rest destructuring in queries",
                "recommended": "warn",
                "url": "https://tanstack.com/query/latest/docs/eslint/no-rest-destructuring",
              },
              "messages": {
                "objectRestDestructure": "Object rest destructuring on a query will observe all changes to the query, leading to excessive re-renders.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "no-unstable-deps": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Disallow putting the result of query hooks directly in a React hook dependency array",
                "recommended": "error",
                "url": "https://tanstack.com/query/latest/docs/eslint/no-unstable-deps",
              },
              "messages": {
                "noUnstableDeps": "The result of {{queryHook}} is not referentially stable, so don't pass it directly into the dependencies array of {{reactHook}}. Instead, destructure the return value of {{queryHook}} and pass the destructured values into the dependency array of {{reactHook}}.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "stable-query-client": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "Makes sure that QueryClient is stable",
                "recommended": "error",
                "url": "https://tanstack.com/query/latest/docs/eslint/stable-query-client",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "messages": {
                "fixTo": "Fix to {{result}}",
                "unstable": "QueryClient is not stable. It should be either extracted from the component or wrapped in React.useState.
See https://tkdodo.eu/blog/react-query-fa-qs#2-the-queryclient-is-not-stable",
              },
              "schema": [],
              "type": "problem",
            },
          },
        },
      },
    },
    "rules": {
      "@tanstack/query/exhaustive-deps": "error",
      "@tanstack/query/infinite-query-property-order": "error",
      "@tanstack/query/no-rest-destructuring": "warn",
      "@tanstack/query/no-unstable-deps": "error",
      "@tanstack/query/stable-query-client": "error",
    },
  },
  {
    "plugins": {
      "@devup": {
        "rules": {
          "app-page": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "required 페이지나 레이아웃 컴포넌트는 반드시 export default로 내보내야 합니다.",
                "url": "https://github.com/dev-five-git/devup/tree/main/packages/eslint-plugin/src/rules/app-page",
              },
              "fixable": "code",
              "messages": {
                "nameOfPageOrLayoutComponentShouldHaveSuffix": "페이지나 레이아웃 컴포넌트의 이름은 반드시 \`Page\`나 \`Layout\`으로 끝나야 합니다.",
                "pageOrLayoutComponentShouldDefaultExport": "페이지나 레이아웃 컴포넌트는 반드시 \`export default\`로 내보내야 합니다.",
                "pathParamsShouldExist": "경로 변수를 사용할 수 있을 경우 \`params\`는 반드시 존재해야 합니다.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "component": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "required 컴포넌트 이름은 디렉터리 혹은 파일명을 따라야 합니다.",
                "url": "https://github.com/dev-five-git/devup/tree/main/packages/eslint-plugin/src/rules/component",
              },
              "fixable": "code",
              "messages": {
                "componentFileShouldExportComponent": "컴포넌트 파일은 컴포넌트를 내보내야 합니다.",
                "componentNameShouldBeFollowDirectoryStructure": "컴포넌트 이름은 디렉토리명 혹은 파일명을 따라야 합니다.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "component-interface": {
            "create": [Function],
            "defaultOptions": [],
            "meta": {
              "docs": {
                "description": "required type annotation for component props when empty object pattern",
                "url": "https://github.com/dev-five-git/devup/tree/main/packages/eslint-plugin/src/rules/component-interface",
              },
              "fixable": "code",
              "messages": {
                "componentPropsShouldHaveTypeAnnotationWhenEmptyObjectPattern": "컴포넌트의 \`props\`가 비어있고 타입이 없을 경우 반드시 타입을 명시해야 합니다.",
              },
              "schema": [],
              "type": "problem",
            },
          },
          "rsc-api": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "required 서버 컴포넌트에서는 반드시 cache 버전을 사용해야 합니다.",
                "recommended": true,
              },
              "fixable": "code",
              "messages": {
                "apiShouldBeCached": "\`{{ api }}\`는 서버 컴포넌트에서는 반드시 cache 버전을 사용해야 합니다.",
              },
              "schema": [],
              "type": "problem",
            },
          },
        },
      },
      "react-hooks": {
        "configs": {
          "recommended": {
            "plugins": [
              "react-hooks",
            ],
            "rules": {
              "react-hooks/exhaustive-deps": "warn",
              "react-hooks/rules-of-hooks": "error",
            },
          },
          "recommended-latest": {
            "name": "react-hooks/recommended",
            "plugins": {
              "react-hooks": {
                "configs": [Circular],
                "meta": {
                  "name": "eslint-plugin-react-hooks",
                },
                "rules": {
                  "exhaustive-deps": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "verifies the list of dependencies for Hooks like useEffect and similar",
                        "recommended": true,
                        "url": "https://github.com/facebook/react/issues/14920",
                      },
                      "fixable": "code",
                      "hasSuggestions": true,
                      "schema": [
                        {
                          "additionalProperties": false,
                          "enableDangerousAutofixThisMayCauseInfiniteLoops": false,
                          "properties": {
                            "additionalHooks": {
                              "type": "string",
                            },
                            "enableDangerousAutofixThisMayCauseInfiniteLoops": {
                              "type": "boolean",
                            },
                          },
                          "type": "object",
                        },
                      ],
                      "type": "suggestion",
                    },
                  },
                  "rules-of-hooks": {
                    "create": [Function],
                    "meta": {
                      "docs": {
                        "description": "enforces the Rules of Hooks",
                        "recommended": true,
                        "url": "https://reactjs.org/docs/hooks-rules.html",
                      },
                      "type": "problem",
                    },
                  },
                },
              },
            },
            "rules": {
              "react-hooks/exhaustive-deps": "warn",
              "react-hooks/rules-of-hooks": "error",
            },
          },
          "recommended-legacy": {
            "plugins": [
              "react-hooks",
            ],
            "rules": {
              "react-hooks/exhaustive-deps": "warn",
              "react-hooks/rules-of-hooks": "error",
            },
          },
        },
        "meta": {
          "name": "eslint-plugin-react-hooks",
        },
        "rules": {
          "exhaustive-deps": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "verifies the list of dependencies for Hooks like useEffect and similar",
                "recommended": true,
                "url": "https://github.com/facebook/react/issues/14920",
              },
              "fixable": "code",
              "hasSuggestions": true,
              "schema": [
                {
                  "additionalProperties": false,
                  "enableDangerousAutofixThisMayCauseInfiniteLoops": false,
                  "properties": {
                    "additionalHooks": {
                      "type": "string",
                    },
                    "enableDangerousAutofixThisMayCauseInfiniteLoops": {
                      "type": "boolean",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "suggestion",
            },
          },
          "rules-of-hooks": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "enforces the Rules of Hooks",
                "recommended": true,
                "url": "https://reactjs.org/docs/hooks-rules.html",
              },
              "type": "problem",
            },
          },
        },
      },
      "simple-import-sort": {
        "meta": {
          "name": "eslint-plugin-simple-import-sort",
          "version": "12.1.1",
        },
        "rules": {
          "exports": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Automatically sort exports.",
                "url": "https://github.com/lydell/eslint-plugin-simple-import-sort#sort-order",
              },
              "fixable": "code",
              "messages": {
                "sort": "Run autofix to sort these exports!",
              },
              "schema": [],
              "type": "layout",
            },
          },
          "imports": {
            "create": [Function],
            "meta": {
              "docs": {
                "description": "Automatically sort imports.",
                "url": "https://github.com/lydell/eslint-plugin-simple-import-sort#sort-order",
              },
              "fixable": "code",
              "messages": {
                "sort": "Run autofix to sort these imports!",
              },
              "schema": [
                {
                  "additionalProperties": false,
                  "properties": {
                    "groups": {
                      "items": {
                        "items": {
                          "type": "string",
                        },
                        "type": "array",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
              ],
              "type": "layout",
            },
          },
        },
      },
      "unused-imports": {
        "meta": {
          "name": "unused-imports",
        },
        "rules": {
          "no-unused-imports": {
            "create": [Function],
            "defaultOptions": [
              {},
            ],
            "meta": {
              "docs": {
                "description": "Disallow unused variables",
                "extendsBaseRule": true,
                "recommended": "recommended",
                "url": "https://github.com/sweepline/eslint-plugin-unused-imports/blob/master/docs/rules/no-unused-imports.md",
              },
              "fixable": "code",
              "messages": {
                "unusedVar": "'{{varName}}' is {{action}} but never used{{additional}}.",
                "usedIgnoredVar": "'{{varName}}' is marked as ignored but is used{{additional}}.",
                "usedOnlyAsType": "'{{varName}}' is {{action}} but only used as a type{{additional}}.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "enum": [
                        "all",
                        "local",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "args": {
                          "description": "Whether to check all, some, or no arguments.",
                          "enum": [
                            "all",
                            "after-used",
                            "none",
                          ],
                          "type": "string",
                        },
                        "argsIgnorePattern": {
                          "description": "Regular expressions of argument names to not check for usage.",
                          "type": "string",
                        },
                        "caughtErrors": {
                          "description": "Whether to check catch block arguments.",
                          "enum": [
                            "all",
                            "none",
                          ],
                          "type": "string",
                        },
                        "caughtErrorsIgnorePattern": {
                          "description": "Regular expressions of catch block argument names to not check for usage.",
                          "type": "string",
                        },
                        "destructuredArrayIgnorePattern": {
                          "description": "Regular expressions of destructured array variable names to not check for usage.",
                          "type": "string",
                        },
                        "ignoreClassWithStaticInitBlock": {
                          "description": "Whether to ignore classes with at least one static initialization block.",
                          "type": "boolean",
                        },
                        "ignoreRestSiblings": {
                          "description": "Whether to ignore sibling properties in \`...\` destructurings.",
                          "type": "boolean",
                        },
                        "reportUsedIgnorePattern": {
                          "description": "Whether to report variables that match any of the valid ignore pattern options if they have been used.",
                          "type": "boolean",
                        },
                        "vars": {
                          "description": "Whether to check all variables or only locally-declared variables.",
                          "enum": [
                            "all",
                            "local",
                          ],
                          "type": "string",
                        },
                        "varsIgnorePattern": {
                          "description": "Regular expressions of variable names to not check for usage.",
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "problem",
            },
          },
          "no-unused-vars": {
            "create": [Function],
            "defaultOptions": [
              {},
            ],
            "meta": {
              "docs": {
                "description": "Disallow unused variables",
                "extendsBaseRule": true,
                "recommended": "recommended",
                "url": "https://github.com/sweepline/eslint-plugin-unused-imports/blob/master/docs/rules/no-unused-vars.md",
              },
              "fixable": "code",
              "messages": {
                "unusedVar": "'{{varName}}' is {{action}} but never used{{additional}}.",
                "usedIgnoredVar": "'{{varName}}' is marked as ignored but is used{{additional}}.",
                "usedOnlyAsType": "'{{varName}}' is {{action}} but only used as a type{{additional}}.",
              },
              "schema": [
                {
                  "oneOf": [
                    {
                      "enum": [
                        "all",
                        "local",
                      ],
                      "type": "string",
                    },
                    {
                      "additionalProperties": false,
                      "properties": {
                        "args": {
                          "description": "Whether to check all, some, or no arguments.",
                          "enum": [
                            "all",
                            "after-used",
                            "none",
                          ],
                          "type": "string",
                        },
                        "argsIgnorePattern": {
                          "description": "Regular expressions of argument names to not check for usage.",
                          "type": "string",
                        },
                        "caughtErrors": {
                          "description": "Whether to check catch block arguments.",
                          "enum": [
                            "all",
                            "none",
                          ],
                          "type": "string",
                        },
                        "caughtErrorsIgnorePattern": {
                          "description": "Regular expressions of catch block argument names to not check for usage.",
                          "type": "string",
                        },
                        "destructuredArrayIgnorePattern": {
                          "description": "Regular expressions of destructured array variable names to not check for usage.",
                          "type": "string",
                        },
                        "ignoreClassWithStaticInitBlock": {
                          "description": "Whether to ignore classes with at least one static initialization block.",
                          "type": "boolean",
                        },
                        "ignoreRestSiblings": {
                          "description": "Whether to ignore sibling properties in \`...\` destructurings.",
                          "type": "boolean",
                        },
                        "reportUsedIgnorePattern": {
                          "description": "Whether to report variables that match any of the valid ignore pattern options if they have been used.",
                          "type": "boolean",
                        },
                        "vars": {
                          "description": "Whether to check all variables or only locally-declared variables.",
                          "enum": [
                            "all",
                            "local",
                          ],
                          "type": "string",
                        },
                        "varsIgnorePattern": {
                          "description": "Regular expressions of variable names to not check for usage.",
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                  ],
                },
              ],
              "type": "problem",
            },
          },
        },
      },
    },
    "rules": {
      "@devup/app-page": "error",
      "@devup/component": "error",
      "@devup/component-interface": "error",
      "@devup/rsc-api": "error",
      "@typescript-eslint/ban-ts-comment": "off",
      "@typescript-eslint/explicit-module-boundary-types": "off",
      "@typescript-eslint/no-explicit-any": "off",
      "@typescript-eslint/no-unused-expressions": [
        "error",
        {
          "allowShortCircuit": true,
          "allowTernary": true,
        },
      ],
      "@typescript-eslint/no-unused-vars": [
        "error",
        {
          "args": "all",
          "argsIgnorePattern": "^_",
          "caughtErrors": "all",
          "caughtErrorsIgnorePattern": "^_",
          "destructuredArrayIgnorePattern": "^_",
          "ignoreRestSiblings": true,
          "varsIgnorePattern": "^_",
        },
      ],
      "@typescript-eslint/no-var-requires": "off",
      "camelcase": "off",
      "comma-dangle": "off",
      "no-console": [
        "error",
        {
          "allow": [
            "info",
            "debug",
            "warn",
            "error",
          ],
        },
      ],
      "no-constant-condition": [
        "error",
        {
          "checkLoops": false,
        },
      ],
      "no-trailing-spaces": "error",
      "prettier/prettier": [
        "error",
        {
          "endOfLine": "auto",
          "semi": false,
          "singleQuote": true,
          "trailingComma": "all",
        },
      ],
      "react-hooks/exhaustive-deps": [
        "warn",
        {
          "additionalHooks": "useSafeEffect",
        },
      ],
      "react-hooks/rules-of-hooks": "error",
      "react/jsx-curly-brace-presence": "error",
      "react/jsx-sort-props": [
        "error",
        {
          "callbacksLast": false,
          "ignoreCase": false,
          "noSortAlphabetically": false,
          "reservedFirst": true,
          "shorthandFirst": false,
          "shorthandLast": false,
        },
      ],
      "react/prop-types": "off",
      "react/react-in-jsx-scope": "off",
      "react/sort-default-props": "error",
      "require-jsdoc": "off",
      "simple-import-sort/exports": "error",
      "simple-import-sort/imports": "error",
      "spaced-comment": [
        "error",
        "always",
        {
          "markers": [
            "/",
          ],
        },
      ],
      "unused-imports/no-unused-imports": "error",
      "unused-imports/no-unused-vars": "off",
      "valid-jsdoc": "off",
    },
    "settings": {
      "react": {
        "version": "detect",
      },
    },
  },
  {
    "files": [
      "**/*.test-d.{ts,tsx}",
    ],
    "rules": {
      "@typescript-eslint/no-unused-expressions": "off",
    },
  },
]
`;
